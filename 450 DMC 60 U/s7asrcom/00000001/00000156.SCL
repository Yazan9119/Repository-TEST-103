FUNCTION_BLOCK FB_SMARTKEY

TITLE = ''
//$Revision: 1.5 $
//$Date: 2008/03/03 13:37:47CET $
//$Author: wri $

VAR_INPUT
    EX_Enable : BOOL;   //Aktivierung des Bausteins
    EX_Init : BOOL; //Initalisierung des Bausteins und damit in den Grundzustand zu setzen
    EX_MaschineEin : BOOL; //Einschaltsignal der Maschine zum Start der Schrittkette
    EX_ResetError : BOOL; //Zurücksetzen des Fehlerzustandes
    EX_BA2_Activ : BOOL; //Betriebart 2 angewählt
    EX_BA3_Activ : BOOL; //Betriebart 3 angewählt
    EX_BA4_Activ : BOOL; //Betriebart 4 angewählt
    EX_GEN_OM_SERVICE_ACTIVE : BOOL; //Servicebetriebsart angewählt
    EB_GEN_OM_BYTE : BYTE; //Eingangsbyte vom Smartkey-Reader über den Status
END_VAR

VAR_IN_OUT
    EAB_SmartkeyStatus : BYTE; //Smartkey-Status muss noch bei Jörn Wolf nachgefragt werden.
    EAB_SmartkeyBCD : BYTE; //Rückgabe des Eingangsbyte vom Smartkey-Reader
    EAB_SmartkeyInfAut : BYTE; //Anzeige der Betriebsart-Berechtigung auf dem TAG
    EAB_SmartkeyInfoKey : BYTE; //Anzeige der aktuell angewählten Betriebsart
    EAB_InfoOM : BYTE; //Anzeige der aktuell an der Maschine aktive Betriebsart
    EAX_TagRemoved : BOOL; //Flag für Tag wurde entfernt
    EAX_NewTagInside : BOOL; //Flanke für ein neuer Tag wurde angelegt
    EAX_ErrorNoAuthorization : BOOL; //Fehlerbit für keine vorhandene Berechtigung
    EAX_ErrorDeviceFunction : BOOL; //Fehlerbit für fehlhaften Smartkey-Reader
    EAX_ErrorFaultyOperation : BOOL; //Fehlerbit für Fehlerhafte Bedienung des Smartkey-Readers
END_VAR

VAR_OUTPUT
END_VAR

VAR_TEMP
  // temporäre Variablen
   TI_SmartkeyBCD : INT;
END_VAR

VAR
  // statische Variablen
    SX_Maschine_Ein : BOOL;
    SX_ErrorNoAuthorization : BOOL;
    SX_ErrorDeviceFunction : BOOL;
    SX_ErrorFaultyOperation : BOOL;
    SX_TagRemoved : BOOL;
    SX_GEN_OM_SERVICE_ACTIVE : BOOL;
    SX_NewTagInside : BOOL;
    SB_SmartkeyBCD : BYTE;
    SB_SmartkeyInfoAut : BYTE;
    SB_SmartkeyInfoKey : BYTE;
    SB_InfoOEM : BYTE;
END_VAR

    IF (EX_Enable = False) THEN
        RETURN;
    END_IF;
    
    IF (EX_Init = True) THEN
        SX_Maschine_Ein := False;
    END_IF;
    
    IF (EX_MaschineEin = True) THEN
        IF (SX_Maschine_Ein = False) THEN
            SX_Maschine_Ein := True;
        END_IF;
    ELSE
        IF (SX_Maschine_Ein = True) THEN
            SX_Maschine_Ein := False;
        END_IF;
    END_IF;

    IF (EX_ResetError = True) THEN
        SX_ErrorNoAuthorization:= False;
        SX_ErrorDeviceFunction:= False;
        SX_ErrorFaultyOperation:= False;
    END_IF;
    
    
    SB_SmartkeyBCD := EB_GEN_OM_BYTE;
    SX_GEN_OM_SERVICE_ACTIVE := EX_GEN_OM_SERVICE_ACTIVE;
    
    // Feststellung der aktiven Betriebsarten an der Maschine
    IF ((EX_BA2_Activ = False) AND (EX_BA3_Activ = False) AND (EX_BA4_Activ = False))THEN
        SB_InfoOEM := 0;
    END_IF;
    IF (EX_BA2_Activ = True) THEN
        SB_InfoOEM := 1;
    END_IF;
    IF (EX_BA3_Activ = True) THEN
        SB_InfoOEM := 2;
    END_IF;
    IF (EX_BA4_Activ = True) THEN
        SB_InfoOEM := 3;
    END_IF;

    
    TI_SmartkeyBCD := BYTE_TO_INT (SB_SmartkeyBCD);
    
    CASE TI_SmartkeyBCD OF 
        // Keine Signale oder Gerätefehler
        0,1,2,3,13 : 
             SX_ErrorDeviceFunction := True;
             SB_SmartkeyInfoAut := 255;
             SB_SmartkeyInfoKey := 255;
        
        // BA-Berechtigung von Smartkey
        4,5,6,7 : 
            SB_SmartkeyInfoAut := EB_GEN_OM_BYTE AND 16#03;
            SX_TagRemoved := False;
            SX_NewTagInside:= True;
            
        // Anwahl der Betriebsart    
        8,9,10,11 : 
            SX_NewTagInside:= False;
            SB_SmartkeyInfoKey := EB_GEN_OM_BYTE AND 16#03;
            
        // Fehler durch keine Berechtigung
        12 : SX_ErrorNoAuthorization := True;
        
        // Fehler durch falsche Bedienung
        14 : SX_ErrorFaultyOperation := True;
        
        // Smartkey wurde entfernt
        15 : SX_TagRemoved := True;
             SB_SmartkeyInfoAut := 255;
             SB_SmartkeyInfoKey := 255;
             SX_ErrorNoAuthorization:= False;
             SX_ErrorDeviceFunction:= False;
             SX_ErrorFaultyOperation:= False;
    END_CASE;     


    // Schreiben der statischen Variablen auf die Ausgangsvariablen
    EAB_SmartkeyStatus  := 0;
    EAB_SmartkeyBCD     := EB_GEN_OM_BYTE;
    EAB_SmartkeyInfAut  := SB_SmartkeyInfoAut;
    EAB_SmartkeyInfoKey := SB_SmartkeyInfoKey;
    EAB_InfoOM          := SB_InfoOEM;

    EAX_TagRemoved := SX_TagRemoved;
    EAX_NewTagInside := SX_NewTagInside;
    EAX_ErrorNoAuthorization := SX_ErrorNoAuthorization;
    EAX_ErrorDeviceFunction := SX_ErrorDeviceFunction;
    EAX_ErrorFaultyOperation := SX_ErrorFaultyOperation;

END_FUNCTION_BLOCK
