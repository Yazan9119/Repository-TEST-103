FUNCTION_BLOCK "FB_Wz_sperren"
TITLE =
//$Revision: 1.6 $
//$Date: 2008/05/29 06:55:59CEST $
//$Author: hgc $
//
//28.02.2008 gs
//Feste Anzahl der Magazinplatzdaten(7) geäandert.
//Daten werden mit "M_numMagPlaceParam" berechnet.
//zZ ist der Wert 8
AUTHOR : AB
VERSION : 0.1


VAR_INPUT
  E_Zwischensp_Nr : INT  := 2;	
  E_WRITE : BOOL ;	
END_VAR
VAR_IN_OUT
  EA_Error_Write : BOOL ;	
  EA_DONE_Write : BOOL ;	
END_VAR
VAR
  Req_Get_Read : BOOL ;	
  NDR_GET_Read : BOOL ;	
  Error_Get_Read : BOOL ;	
  Req_Get_Write : BOOL ;	
  NDR_Get_Write : BOOL ;	
  Error_Get_Write : BOOL ;	
  Req_Put_Write : BOOL ;	
  NDR_Put_Write : BOOL ;	
  Error_Put_Write : BOOL ;	
  Req_Get_TNR : BOOL ;	
  NDR_Get_TNR : BOOL ;	
  Error_Get_TNR : BOOL ;	
  S_Write : BOOL ;	
  TNR_Write : INT ;	
  SW_Toolstate : WORD ;	
  SW_Toolstate_Write : WORD ;	
  T1_TO_edgeData25_1 : STRUCT 	//SM Optionsbits $TC_DPC25
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD  := W#16#1;	
   zeile : WORD  := W#16#19;	
   bausteintyp : BYTE ;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#F;	
   laenge : BYTE  := B#16#8;	
  END_STRUCT ;	
  T1_TU_data1_1 : STRUCT 	//$TC_TCP1 Anwender Schneidendaten
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD  := W#16#1;	
   zeile : WORD  := W#16#1;	
   bausteintyp : BYTE ;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#F;	
   laenge : BYTE  := B#16#8;	
  END_STRUCT ;	
  toolState_1T1TD8GET6 : STRUCT 	
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD ;	
   zeile : WORD ;	
   bausteintyp : BYTE  := B#16#21;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#4;	
   laenge : BYTE  := B#16#2;	
  END_STRUCT ;	
  T1TP1_TNrGET : STRUCT 	
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD ;	
   zeile : WORD ;	
   bausteintyp : BYTE  := B#16#28;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#4;	
   laenge : BYTE  := B#16#2;	
  END_STRUCT ;	
  PUT_FB3 : "FB_SIEM_PUT";	
  GET_TNR : "FB_SIEM_GET";	
  GET_Toolstate : "FB_SIEM_GET";	
END_VAR
VAR_TEMP
  locline1 : WORD ;	
  locspalte : WORD ;	
  WZLine_WZ : WORD ;	
END_VAR
BEGIN
NETWORK
TITLE =

      U     #E_WRITE; 
      SPB   STRT; 
      CLR   ; 
      =     #EA_DONE_Write; 
      =     #EA_Error_Write; 
      =     #S_Write; 
      BE    ; 

STRT: NOP   0; 

NETWORK
TITLE =Wz Toolstate lesen, sperren und schreiben
//1. Lesen T-Nummer des Wz im Zwischenspeicher
//2. Lesen von Toolstate
//3. Wz sperre und Toolstate schreiben
//
//
//
//Werkzeugstatus toolState $TC_TP8
//
//0: nicht freigegeben
//1: aktives Werkzeug (A)
//2: freigegeben (F)
//4: gesperrt (G)
//8: vermessen (M)
//16: Vorwarngrenze erreicht (V)
//32: WZ ist im Wechsel (W)
//64: festplatzcodiert (P)
//128: WZ war im Einsatz (E)
      U     #E_WRITE; 
      FP    #S_Write; 
      R     #EA_DONE_Write; 
      R     #EA_Error_Write; 
      S     #Req_Get_TNR; 

//--------- T-Nr lesen des Wz im Zwischenspeicher

      L     9998; 
      T     #locspalte; // Zwischenspeicher  

      L     #E_Zwischensp_Nr; 
      DEC   1; 
      L     "MW_numMagPlaceParam"; 
      *I    ; 
      L     3; // Platz 1 --> (PlatzNr.-1) * numMagPlaceParam + Parameter-Nr.
      +I    ; 
      T     #locline1; // Zeile Addr1  = T-Nr. Zeilenindex 3


      CALL #GET_TNR (
           Req                      := #Req_Get_TNR,
           NumVar                   := 1,
           Addr1                    := #T1TP1_TNrGET,
           Column1                  := #locspalte,
           Line1                    := #locline1,
           Error                    := #Error_Get_TNR,
           NDR                      := #NDR_Get_TNR,
           RD1                      := #TNR_Write);


      U     #Error_Get_TNR; 
      S     #EA_Error_Write; 

      O     #NDR_Get_TNR; // Lesen beendet 
      O     #Error_Get_TNR; // Lesen beendet mit Fehler
      R     #Req_Get_TNR; // Anstoß lesen löschen


//---- Toolstate lesen


      U     #NDR_Get_TNR; // Lesen beendet 
      S     #Req_Get_Write; 

      L     #TNR_Write; // logische T-Nr. = Zeilenadresse
      T     #WZLine_WZ; 

      CALL #GET_Toolstate (
           Req                      := #Req_Get_Write,
           NumVar                   := 1,
           Addr1                    := #toolState_1T1TD8GET6,
           Column1                  := W#16#8,
           Line1                    := #WZLine_WZ,
           Error                    := #Error_Get_Write,
           NDR                      := #NDR_Get_Write,
           RD1                      := #SW_Toolstate);

      U     #Error_Get_Write; 
      S     #EA_Error_Write; 

      O     #NDR_Get_Write; // Lesen beendet 
      O     #Error_Get_Write; // Lesen beendet mit Fehler
      R     #Req_Get_Write; // Anstoß lesen löschen


// Toolstate schreiben

      U     #NDR_Get_Write; // Lesen beendet 
      S     #Req_Put_Write; 
      SPBN  xx2; 
      L     #SW_Toolstate; 
      L     4; 
      OW    ; 
      T     #SW_Toolstate_Write; 


xx2:  CALL #PUT_FB3 (
           Req                      := #Req_Put_Write,
           NumVar                   := 1,
           Addr1                    := #toolState_1T1TD8GET6,
           Column1                  := W#16#8,
           Line1                    := #WZLine_WZ,
           Error                    := #Error_Put_Write,
           Done                     := #NDR_Put_Write,
           SD1                      := #SW_Toolstate_Write);

      U     #Error_Put_Write; 
      S     #EA_Error_Write; 

      O     #NDR_Put_Write; // Lesen beendet 
      O     #Error_Put_Write; // Lesen beendet mit Fehler
      R     #Req_Put_Write; // Anstoß lesen löschen

//---- Fertig Werkzeug sperren    

      U     #NDR_Get_Write; // Lesen beendet 
      S     #EA_DONE_Write; 
      S     "DB_CMM_PLC".CMM_IN.get_tool_data; 


END_FUNCTION_BLOCK

