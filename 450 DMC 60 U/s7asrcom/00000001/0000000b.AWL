TYPE "UDT_DB21_SIEM_KANAL1"
{ S7_language := '9(1) Englisch (USA)  13.02.2008  07:20:20' }


  STRUCT 	
   f0_0 : BOOL ;	
   f0_1 : BOOL ;	
   f0_2 : BOOL ;	
   A_DRF : BOOL ;	//Activate DRF
   A_SBL : BOOL ;	//Activate single block
   A_M01 : BOOL ;	//Activate M01
   A_DRY : BOOL ;	//Activate dry run feedrate
   f0_7 : BOOL ;	
   A_Ref : BOOL ;	//Activate referencing
   A_ProtZone : BOOL ;	//Enable protection zones
   A_SynOff : BOOL ;	//Synchronous action off
   A_TM_TimOut : BOOL ;	//Activate time-out (TM)
   A_CLC_Stop : BOOL ;	//CLC stop
   A_CLC_OR : BOOL ;	//CLC override
   A_PLC_ActCompl : BOOL ;	//PLC action complete
   A_ProgTest : BOOL ;	//Activate program test
   A_SKP0 : BOOL ;	//Activate skip block \0
   A_SKP1 : BOOL ;	//Activate skip block \1
   A_SKP2 : BOOL ;	//Activate skip block \2
   A_SKP3 : BOOL ;	//Activate skip block \3
   A_SKP4 : BOOL ;	//Activate skip block \4
   A_SKP5 : BOOL ;	//Activate skip block \5
   A_SKP6 : BOOL ;	//Activate skip block \6
   A_SKP7 : BOOL ;	//Activate skip block \7
   A_StrokEnab : BOOL ;	//Stroke enable
   A_ManStrokEnab : BOOL ;	//Manual stroke enable
   A_StrokSup : BOOL ;	//Stroke suppression
   A_StrokDelayed : BOOL ;	//Stroke delayed
   A_StrokStop : BOOL ;	//Stroke not operating
   A_ManRelStroke2 : BOOL ;	// Manual release of stroke 2
   A3_6 : BOOL ;	
   A3_7 : BOOL ;	
   A_FD_OR : BYTE ;	//Feedrate override
   A_RT_OR : BYTE ;	//Rapid traverse override
   A_FDdisable : BOOL ;	//Feed disable
   A_RIdisable : BOOL ;	//Read-in disable
   A_DeleteDTG : BOOL ;	//Delete distance to go
   A_SP_Clear : BOOL ;	//Clear SP repetitions
   A_ProgAbort : BOOL ;	//Program level abort
   A_F_Limit : BOOL ;	//Tool path feedrate limitation
   A_RT_ORA : BOOL ;	//Rapid traverse override active
   A_FD_ORA : BOOL ;	//Feedrate override active
   A_NCStartDisabl : BOOL ;	//NC start disable
   A_NCStart : BOOL ;	//NC start
   A_NCStopBlock : BOOL ;	//NC stop at block limit
   A_NCStop : BOOL ;	//NC stop
   A_NCStopASp : BOOL ;	//NC stop axes plus spindle
   A_SuppStartLock : BOOL ;	// Suppress Start Lock
   f7_6 : BOOL ;	
   A_Reset : BOOL ;	//Reset
   A_MRP : ARRAY  [1 .. 10 ] OF BOOL ;	//Activate machine-related protection area [1..10]
   A_CSP : ARRAY  [1 .. 10 ] OF BOOL ;	//Activate channel-specific protection area [1..10]
   A_Geo : ARRAY  [1 .. 3 ] OF STRUCT 	//Control signals for geometry axis [1..3]
    HW1 : BOOL ;	//Activate handwheel 1
    HW2 : BOOL ;	//Activate handwheel 2
    HW3 : BOOL ;	//Activate handwheel 3
    FDStop : BOOL ;	//Feed stop
    Disabl : BOOL ;	//Traversing key disable
    RapidTrOR : BOOL ;	//Rapid traverse override
    Minus : BOOL ;	//Traversing key minus
    Plus : BOOL ;	//Traversing key plus
    INC1 : BOOL ;	//INC 1
    INC10 : BOOL ;	//INC 10
    INC100 : BOOL ;	//INC 100
    INC1000 : BOOL ;	//INC 1000
    INC10000 : BOOL ;	//INC 10000
    INCVar : BOOL ;	//INC variable
    OEM : BYTE ;	//OEM signals
    f3 : BYTE ;	
   END_STRUCT ;	
   f24_0 : BOOL ;	
   f24_1 : BOOL ;	
   f24_2 : BOOL ;	
   E_MMC_DRF : BOOL ;	//MMC DRF selected
   f24_4 : BOOL ;	
   E_MMC_M01 : BOOL ;	//MMC M01 selected
   E_MMC_DRY : BOOL ;	//MMC Dry run feedrate selected
   f24_7 : BOOL ;	
   E_MMC_REPOSPM_0 : BOOL ;	//MMC REPOSPATHMODE 0
   E_MMC_REPOSPM_1 : BOOL ;	//MMC REPOSPATHMODE 1
   E_MMC_REPOSPM_2 : BOOL ;	//MMC REPOSPATHMODE 2
   E_MMC_FD_OR4RT_OR : BOOL ;	//MMC Feedrate override for rapid traverse selected
   E_MMC_REPOSMode : BOOL ;	//MMC REPOS MODE EDGE
   f25_5 : BOOL ;	
   f25_6 : BOOL ;	
   E_MMC_ProgTest : BOOL ;	//Program test selected
   E_MMC_SKP0 : BOOL ;	//MMC skip block selected \0
   E_MMC_SKP1 : BOOL ;	//MMC skip block selected \1
   E_MMC_SKP2 : BOOL ;	//MMC skip block selected \2
   E_MMC_SKP3 : BOOL ;	//MMC skip block selected \3
   E_MMC_SKP4 : BOOL ;	//MMC skip block selected \4
   E_MMC_SKP5 : BOOL ;	//MMC skip block selected \5
   E_MMC_SKP6 : BOOL ;	//MMC skip block selected \6
   E_MMC_SKP7 : BOOL ;	//MMC skip block selected \7
   E_MMC_SKP8 : BOOL ;	//MMC skip block selected \8
   E_MMC_SKP9 : BOOL ;	//MMC skip block selected \9
   f27_2 : BOOL ;	
   f27_3 : BOOL ;	
   f27_4 : BOOL ;	
   f27_5 : BOOL ;	
   f27_6 : BOOL ;	
   f27_7 : BOOL ;	
   A_OEM : BYTE ;	
   A_FixedFD1 : BOOL ;	//Fixed feeds
   A_FixedFD2 : BOOL ;	
   A_FixedFD3 : BOOL ;	
   A_FixedFD4 : BOOL ;	
   A_PTP_Travel : BOOL ;	//Activate PTP travel
   A_DisablWP_Counter : BOOL ;	//Disable workpiece counter
   A_DisablWearMon : BOOL ;	//Disable wear monitoring
   A_DontDisablTool : BOOL ;	//Do not disable tool
   A_ContHW1 : BOOL ;	//Activate contour handwheels
   A_ContHW2 : BOOL ;	
   A_ContHW3 : BOOL ;	
   A_ContHWsim : BOOL ;	//Simulated contour handwheel on
   A_ContHWneg : BOOL ;	//Contour handwheel neg. route
   A_NCKrelatedM01 : BOOL ;	// Activate NCK-related M01
   f30_6 : BOOL ;	
   A_NoToolChangeCmd : BOOL ;	// No tool change commands
   A_REPOSPM_0 : BOOL ;	//REPOSPATHMODE 0
   A_REPOSPM_1 : BOOL ;	//REPOSPATHMODE 1
   A_REPOSPM_2 : BOOL ;	//REPOSPATHMODE 2
   f31_3 : BOOL ;	
   A_REPOSMode : BOOL ;	//REPOS MODE EDGE
   f31_5 : BOOL ;	
   A_SKP8 : BOOL ;	//Activate skip block \8
   A_SKP9 : BOOL ;	//Activate skip block \9
   E_ExecExtern : BOOL ;	//Execution from external source active
   E_RetMove : BOOL ;	//Return move active
   E_Move : BOOL ;	//Forward move active
   E_ActBlock : BOOL ;	//Action block active
   E_BegBlock : BOOL ;	//Approach block active
   E_M01 : BOOL ;	//M0/M1 active
   E_LastActBlock : BOOL ;	//Last action block active
   f32_7 : BOOL ;	
   E_Ref : BOOL ;	//Referencing active
   E_OrieToolholder : BOOL ;	// Orientable toolholder active
   E_RevFD : BOOL ;	//Revolutional feedrate active
   E_HWOverlay : BOOL ;	//Handwheel overlay active
   E_BlockSearch : BOOL ;	//Block search active
   E_M30 : BOOL ;	//M2/M30 active
   E_Transform : BOOL ;	//Transformation active
   E_ProgTest : BOOL ;	//Program test active
   E_OEMChan : BYTE ;	//OEM channel signals feedback
   E_ProgRunn : BOOL ;	//Program running
   E_ProgWait : BOOL ;	//Program waiting
   E_ProgStop : BOOL ;	//Program stopped
   E_ProgInterrupt : BOOL ;	//Program interrupted
   E_ProgrAborted : BOOL ;	//Program aborted
   E_ChanActive : BOOL ;	//Channel active
   E_ChanInterrupt : BOOL ;	//Channel interrupted
   E_ChanReset : BOOL ;	//Channel reset
   E_StartReq : BOOL ;	//Start request 
   E_StopReq : BOOL ;	//Stop request 
   E_AxesRef : BOOL ;	//All axes referenced
   E_AxesStop : BOOL ;	//All axes stationary
   E_IR_Activ : BOOL ;	//Interrupt processing active 
   E_ChanRO : BOOL ;	//Channel ready for operation
   E_NCKalarmChan : BOOL ;	//Channel-specific NCK alarm present
   E_NCKalarmStop : BOOL ;	//NCK alarm with processing stop present
   E_CHW1 : BOOL ;	//Contour handwheel 1 on
   E_CHW2 : BOOL ;	//Contour handwheel 2 on
   E_CHW3 : BOOL ;	//Contour handwheel 3 on
   E_CLC : BOOL ;	//CLC active 
   E_CLCStopLL : BOOL ;	//CLC stopped lower limit 
   E_CLCStopUL : BOOL ;	//CLC stopped upper limit 
   E_RIEnabIgnored : BOOL ;	//Read-in enable is ignored
   E_StopBlkEndSBLsuppr : BOOL ;	//Stop at block end with SBL is suppressed
   E_StrokeEA : BOOL ;	//Stroke enable active
   E_AcknManStrokEnab : BOOL ;	//Acknowledgement manual stroke enable
   f38_2 : BOOL ;	
   f38_3 : BOOL ;	
   f38_4 : BOOL ;	
   f38_5 : BOOL ;	
   f38_6 : BOOL ;	
   f38_7 : BOOL ;	
   E_ProtZoneNOK : BOOL ;	//Protection zones not guaranteed
   f39_1 : BOOL ;	
   f39_2 : BOOL ;	
   f39_3 : BOOL ;	
   f39_4 : BOOL ;	
   f39_5 : BOOL ;	
   f39_6 : BOOL ;	
   f39_7 : BOOL ;	
   E_Geo : ARRAY  [1 .. 3 ] OF STRUCT 	//Status signals of geometry axis [1..3]
    HW1 : BOOL ;	//Handwheel 1 active
    HW2 : BOOL ;	//Handwheel 2 active
    HW3 : BOOL ;	//Handwheel 3 active
    f0_3 : BOOL ;	
    TReqMinus : BOOL ;	// Travel requests minus
    TReqPlus : BOOL ;	// Travel requests plus
    TCMinus : BOOL ;	//Traverse command minus
    TCPlus : BOOL ;	//Traverse command plus
    INC1 : BOOL ;	//INC 1 active
    INC10 : BOOL ;	//INC 10 active
    INC100 : BOOL ;	//INC 100 active
    INC1000 : BOOL ;	//INC 1000 active
    INC10000 : BOOL ;	//INC 10000 active
    INCVar : BOOL ;	//INC variable active
    OEM : BYTE ;	//OEM signals
    f4 : INT ;	
   END_STRUCT ;	
   M1Change : BOOL ;	//M function 1 change
   M2Change : BOOL ;	//M function 2 change
   M3Change : BOOL ;	//M function 3 change
   M4Change : BOOL ;	//M function 4 change
   M5Change : BOOL ;	//M function 5 change
   f58_5 : BOOL ;	
   f58_6 : BOOL ;	
   f58_7 : BOOL ;	
   M1NDec : BOOL ;	//M function 1 not decoded
   M2NDec : BOOL ;	//M function 2 not decoded
   M3NDec : BOOL ;	//M function 3 not decoded
   M4NDec : BOOL ;	//M function 4 not decoded
   M5NDec : BOOL ;	//M function 5 not decoded
   f59_5 : BOOL ;	
   f59_6 : BOOL ;	
   f59_7 : BOOL ;	
   S1Change : BOOL ;	//S function 1 change
   S2Change : BOOL ;	//S function 2 change
   S3Change : BOOL ;	//S function 3 change
   f60_3 : BOOL ;	
   S1Quick : BOOL ;	//S function 1 quick
   S2Quick : BOOL ;	//S function 2 quick
   S3Quick : BOOL ;	//S function 3 quick
   f60_7 : BOOL ;	
   T1Change : BOOL ;	//T function 1 change
   T2Change : BOOL ;	//T function 2 change
   T3Change : BOOL ;	//T function 3 change
   f61_3 : BOOL ;	
   T1Quick : BOOL ;	//T function 1 quick
   T2Quick : BOOL ;	//T function 2 quick
   T3Quick : BOOL ;	//T function 3 quick
   f61_7 : BOOL ;	
   D1Change : BOOL ;	//D function 1 change
   D2Change : BOOL ;	//D function 2 change
   D3Change : BOOL ;	//D function 3 change
   f62_3 : BOOL ;	
   D1Quick : BOOL ;	//D function 1 quick
   D2Quick : BOOL ;	//D function 2 quick
   D3Quick : BOOL ;	//D function 3 quick
   f62_7 : BOOL ;	
   EChange : BOOL ;	//E function change
   f63_1 : BOOL ;	
   f63_2 : BOOL ;	
   f63_3 : BOOL ;	
   EQuick : BOOL ;	//E function quick
   f63_5 : BOOL ;	
   f63_6 : BOOL ;	
   f63_7 : BOOL ;	
   H1Change : BOOL ;	//H function 1 change
   H2Change : BOOL ;	//H function 2 change
   H3Change : BOOL ;	//H function 3 change
   f64_3 : BOOL ;	
   H1Quick : BOOL ;	//H function 1 quick
   H2Quick : BOOL ;	//H function 2 quick
   H3Quick : BOOL ;	//H function 3 quick
   f64_7 : BOOL ;	
   F1Change : BOOL ;	//F function 1 change
   F2Change : BOOL ;	//F function 2 change
   F3Change : BOOL ;	//F function 3 change
   F4Change : BOOL ;	//F function 4 change
   F5Change : BOOL ;	//F function 5 change
   F6Change : BOOL ;	//F function 6 change
   f65_6 : BOOL ;	
   f65_7 : BOOL ;	
   M1Quick : BOOL ;	//M function 1 quick
   M2Quick : BOOL ;	//M function 2 quick
   M3Quick : BOOL ;	//M function 3 quick
   M4Quick : BOOL ;	//M function 4 quick
   M5Quick : BOOL ;	//M function 5 quick
   f66_5 : BOOL ;	
   f66_6 : BOOL ;	
   f66_7 : BOOL ;	
   F1Quick : BOOL ;	//F function 1 quick
   F2Quick : BOOL ;	//F function 2 quick
   F3Quick : BOOL ;	//F function 3 quick
   F4Quick : BOOL ;	//F function 4 quick
   F5Quick : BOOL ;	//F function 5 quick
   F6Quick : BOOL ;	//F function 6 quick
   f67_6 : BOOL ;	
   f67_7 : BOOL ;	
   ExtM1 : INT ;	//Extended address M function 1 (16 bit INT)
   M1 : DINT ;	//M function 1 (DInt)
   ExtM2 : INT ;	//Extended address M function 1 (16 bit INT)
   M2 : DINT ;	//M function 2 (DInt)
   ExtM3 : INT ;	//Extended address M function 1 (16 bit INT)
   M3 : DINT ;	//M function 3 (DInt)
   ExtM4 : INT ;	//Extended address M function 1 (16 bit INT)
   M4 : DINT ;	//M function 4 (DInt)
   ExtM5 : INT ;	//Extended address M function 1 (16 bit INT)
   M5 : DINT ;	//M function 5 (DInt)
   ExtS1 : INT ;	//Extended address S function 1 (16 bit INT)
   S1 : REAL ;	//S function 1 (REAL)
   ExtS2 : INT ;	//Extended address S function 2 (16 bit INT)
   S2 : REAL ;	//S function 2 (REAL)
   ExtS3 : INT ;	//Extended address S function 3 (16 bit INT)
   S3 : REAL ;	//S function 3 (REAL)
   ExtT1 : INT ;	//Extended address T function 1 (16 bit INT)
//T : DINT; //T function (DInt)
//f122 :
   T1 : INT ;	//T function 1 (INT)
   ExtT2 : INT ;	//Extended address T function 2 (16 bit INT)
   T2 : INT ;	//T function 2 (INT)
   ExtT3 : INT ;	//Extended address T function 3 (16 bit INT)
   T3 : INT ;	//T function 3 (INT)
   ExtD1 : BYTE ;	//Extended address D function 1 (8 bit INT)
//D : INT;
//f132 : INT;   //Change in ca
   D1 : BYTE ;	//D function 1 (8 bit INT)
   ExtD2 : BYTE ;	//Extended address D function 2 (8 bit INT)
   D2 : BYTE ;	//D function 2 (8 bit INT)
   ExtD3 : BYTE ;	//Extended address D function 3 (8 bit INT)
   D3 : BYTE ;	//D function 3 (8 bit INT)
   ExtE : INT ;	//Extended address E function 3 (16 bit INT)
   E : REAL ;	//E function (REAL)
   ExtH1 : INT ;	//Extended address H function 1 (16 bit INT)
   H1 : REAL ;	//H function 1 (REAL)
   ExtH2 : INT ;	//Extended address H function 2 (16 bit INT)
   H2 : REAL ;	//H function 2 (REAL)
   ExtH3 : INT ;	//Extended address H function 3 (16 bit INT)
   H3 : REAL ;	//H function 3 (REAL)
   ExtF1 : INT ;	//Extended address F function 1 (16 bit INT)
   F1 : REAL ;	//F function 1 (REAL)
   ExtF2 : INT ;	//Extended address F function 2 (16 bit INT)
   F2 : REAL ;	//F function 2 (REAL)
   ExtF3 : INT ;	//Extended address F function 3 (16 bit INT)
   F3 : REAL ;	//F function 3 (REAL)
   ExtF4 : INT ;	//Extended address F function 4 (16 bit INT)
   F4 : REAL ;	//F function 4 (REAL)
   ExtF5 : INT ;	//Extended address F function 5 (16 bit INT)
   F5 : REAL ;	//F function 5 (REAL)
   ExtF6 : INT ;	//Extended address F function 6 (16 bit INT)
   F6 : REAL ;	//F function 6 (REAL)
   MDyn : ARRAY  [0 .. 99 ] OF BOOL ;	//Dynamic M functions [0..99]
   GAct : ARRAY  [1 .. 64 ] OF BYTE ;	//Active G function of group [1..64]
   E_MRPactivated : ARRAY  [1 .. 10 ] OF BOOL ;	//Machine-related protection area [1..10] preactivated
   E_CSPactivated : ARRAY  [1 .. 10 ] OF BOOL ;	//Channel-specific protection area [1..10] preactivated
   E_MRPViolated : ARRAY  [1 .. 10 ] OF BOOL ;	//Machine-related protection area [1..10] violated
   E_CSPViolated : ARRAY  [1 .. 10 ] OF BOOL ;	//Channel-specific protection area [1..10] violated
//from P4 on
   A_Str_DNo : BOOL ;	//Request of D number to NCK
   A_Str_Synon : BOOL ;	//Request of syn.action to NCK
   f_280_2 : BOOL ;	
   f_280_3 : BOOL ;	
   f_280_4 : BOOL ;	
   f_280_5 : BOOL ;	
   f_280_6 : BOOL ;	
   f_280_7 : BOOL ;	
   f_281_0 : BOOL ;	
   A_Str_Synfrom : BOOL ;	//Request syn.action from NCK
   f_281_2 : BOOL ;	
   f_281_3 : BOOL ;	
   f_281_4 : BOOL ;	
   f_281_5 : BOOL ;	
   f_281_6 : BOOL ;	
   f_281_7 : BOOL ;	
   A_D1 : INT ;	//Assignment D1
   A_D2 : INT ;	//Assignment D2
   A_D3 : INT ;	//Assignment D3
   A_D4 : INT ;	//Assignment D4
   A_D5 : INT ;	//Assignment D5
   A_D6 : INT ;	//Assignment D6
   A_D7 : INT ;	//Assignment D7
   A_D8 : INT ;	//Assignment D8
   A_D9 : INT ;	//Assignment D9
   A_SynDisabl : ARRAY  [1 .. 64 ] OF BOOL ;	//Disable synchronous actions 
   E_SynDisabled : ARRAY  [1 .. 64 ] OF BOOL ;	//Synchronous actions disabled
   E_G00 : BOOL ;	//Active G functions
   f316_1 : BOOL ;	
   f316_2 : BOOL ;	
   f316_3 : BOOL ;	
   f316_4 : BOOL ;	
   f316_5 : BOOL ;	
   f316_6 : BOOL ;	
   f316_7 : BOOL ;	
   E_ExtLang : BOOL ;	// External language mode active
   E_WS_Setp : BOOL ;	// Workpiece setpoint reached 
   f317_2 : BOOL ;	
   f317_3 : BOOL ;	
   f317_4 : BOOL ;	
   E_DriveTest : BOOL ;	// Travel request drive test
   E_PTP_Travel : BOOL ;	//PTP travel active
   E_ToolMissing : BOOL ;	//Tool missing
   E_ASUP_Stop : BOOL ;	// ASUP stopped
   E_SearchAct : BOOL ;	// Search active
   E_TOFF : BOOL ;	// TOFF active
   E_TOFFmovem : BOOL ;	// TOFF movement active
   E_StopDelayed : BOOL ;	// Stop delayed
   E_AssM01 : BOOL ;	// Associated M01 active
   E_DRY : BOOL ;	// Dry-run feedrate active
   E_Overstore : BOOL ;	// Overstore active
   E_REPOS_EdgeAckn : BOOL ;	// REPOS MODE EDGE ACKN
   E_REPOS_PMode0 : BOOL ;	// Repos Path Mode Ackn 0
   E_REPOS_PMode1 : BOOL ;	// Repos Path Mode Ackn 0
   E_REPOS_PMode2 : BOOL ;	// Repos Path Mode Ackn 2
   E_DelayFTS : BOOL ;	// Delay FTS
   E_REPOS_DEFERRA : BOOL ;	// Repos DEFERRA L Chan
   E_Stop_NoDelayR : BOOL ;	// Stop-delayrange not activated
   E_NoToolChangeCmd : BOOL ;	// No tool change command active
   A_Ori : ARRAY  [1 .. 3 ] OF STRUCT 	//Control signals for orientation axes [1..3]
    HW_Bit0 : BOOL ;	//Activate handwheel Bit value coding 
    HW_Bit1 : BOOL ;	//Activate handwheel Bit value coding 
    HW_Bit2 : BOOL ;	//Activate handwheel Bit value coding 
    FDStop : BOOL ;	//Feed stop
    Disabl : BOOL ;	//Traversing key disable
    RapidTrOR : BOOL ;	//Rapid traverse override
    Minus : BOOL ;	//Traversing key minus
    Plus : BOOL ;	//Traversing key plus
    INC1 : BOOL ;	//INC 1 active
    INC10 : BOOL ;	//INC 10 active
    INC100 : BOOL ;	//INC 100 active
    INC1000 : BOOL ;	//INC 1000 active
    INC10000 : BOOL ;	//INC 10000 active
    INCVar : BOOL ;	//INC variable active
    OEM : BYTE ;	//OEM signals
    f3 : BYTE ;	
   END_STRUCT ;	
   E_Ori : ARRAY  [1 .. 3 ] OF STRUCT 	//Control signals for orientation axes [1..3]
    HW_Bit0 : BOOL ;	//Activate handwheel Bit value coding 
    HW_Bit1 : BOOL ;	//Activate handwheel Bit value coding 
    HW_Bit2 : BOOL ;	//Activate handwheel Bit value coding 
    f0_3 : BOOL ;	
    TReqMinus : BOOL ;	// Travel requests minus
    TReqPlus : BOOL ;	// Travel requests plus
    Minus : BOOL ;	//Traversing key minus
    Plus : BOOL ;	//Traversing key plus
    INC1 : BOOL ;	//INC 1 active
    INC10 : BOOL ;	//INC 10 active
    INC100 : BOOL ;	//INC 100 active
    INC1000 : BOOL ;	//INC 1000 active
    INC10000 : BOOL ;	//INC 10000 active
    INCVar : BOOL ;	//INC variable active
    OEM : BYTE ;	//OEM signals
    f3 : BYTE ;	
   END_STRUCT ;	
   E_T_PrewarnLimit : BOOL ;	//Tool prewarn limit reached
   E_T_Limit : BOOL ;	//Tool limit reached 
   E_NewReplT : BOOL ;	//Transition to new replacement tool 
   E_LastReplT : BOOL ;	//last replacement tool of the tool group
   f344_4 : BOOL ;	
   f344_5 : BOOL ;	
   f344_6 : BOOL ;	
   f344_7 : BOOL ;	
   f345 : BYTE ;	
   f346 : BYTE ;	
   f347 : BYTE ;	
   E_T_NoPrewarnLimit : DINT ;	//T number for tool prewarn limit
   E_T_NoLimit : DINT ;	//T number for tool limit
   E_NewReplT_No : DINT ;	//T number of the new replacement tool
   E_LastReplT_No : DINT ;	//T number of the last replacement tool
   E_Cycle_Sig : ARRAY  [0 .. 15 ] OF BOOL ;	//Cycles Input Signals 
   A_Cycle_Sig : ARRAY  [0 .. 15 ] OF BOOL ;	//Cycles Output Signals 
   E_OEM_TechnoSig : ARRAY  [0 .. 31 ] OF BOOL ;	//OEM Techno Input Signals 
   A_OEM_TechnoSig : ARRAY  [0 .. 31 ] OF BOOL ;	//OEM Techno Output Signals 
   ProgEventDispl : BYTE ;	// ProgEventDisplay
   E_CollCheckStop : BOOL ;	//Stop of Collision Check
   f377_1 : BOOL ;	
   f377_2 : BOOL ;	
   f377_3 : BOOL ;	
   f377_4 : BOOL ;	
   f377_5 : BOOL ;	
   f377_6 : BOOL ;	
   f377_7 : BOOL ;	
   f378 : BYTE ;	
   f379 : BYTE ;	
   f380 : ARRAY  [0 .. 31 ] OF BOOL ;	//Reserved
   A_ProgJump : BOOL ;	// control program jump
   f384_1 : BOOL ;	
   f384_2 : BOOL ;	
   f384_3 : BOOL ;	
   f384_4 : BOOL ;	
   f384_5 : BOOL ;	
   f384_6 : BOOL ;	
   f384_7 : BOOL ;	
   f385 : BYTE ;	
   f386 : WORD ;	
  END_STRUCT ;	
END_TYPE

