FUNCTION "FC_IF_DMC_ROBOTER" : VOID
TITLE =
//$Revision: 1.52 $
//$Date: 2009/03/04 07:16:40CET $
//$Author: riedlh $
//
//Roboter-Interface für PW-Maschinen
//==================================
AUTHOR : FUH
VERSION : 0.1


VAR_INPUT
  EX_Freigabe : BOOL ;	
  EX_Takt_1Hz : BOOL ;	
  EX_Leistung_steht_an : BOOL ;	
  EX_Kein_NotAus : BOOL ;	
  EX_Automatikbetrieb : BOOL ;	
  EX_RPL_TUER_ZU : BOOL ;	//I_PW_Tuer_Ruestpl_Zu
  EX_RPL_TUER_OFFEN : BOOL ;	
  ER_RPL_Position : REAL ;	
  EX_RPL_TUER_VERRIEGELT : BOOL ;	//I_RPT_verriegelt
  EX_ALK_SS_AUS : BOOL ;	//I_SP_RPL_ALK_AUS Auflagenkontrolle Schlüsselschalter AUS
  EX_RPL_ALK1_OK : BOOL ;	//I_SP_AUFL_ST1_GESPANNT
  EX_RPL_ALK2_OK : BOOL ;	//I_SP_AUFL_ST2_GESPANNT
  EX_RPL_ALK3_OK : BOOL ;	//I_SP_AUFL_ST3_GESPANNT
  EX_RPL_ALK4_OK : BOOL ;	//I_SP_AUFL_ST4_GESPANNT
  EX_KM_RP_DUSCHE : BOOL ;	//Meldung RPL-Dusche ist EIN mit: O_KM_RP_Dusche_Ventil
  EX_VORR_ABBLASEN : BOOL ;	//Meldung Vorrichtung wird abgeblasen mit: O_SP_VORR_ABBLASEN
  EX_PW_Ablauf_in_GRST : BOOL ;	//Palettenwechsel fertig (PW-Grundstellung)
  EX_SCHUTZZAUN_VERRIEGELT : BOOL ;	//Schutzzaun geschlossen+verriegelt
  EX_SS_ROBOTERBETRIEB : BOOL ;	//I_SS_ROBOTERBETRIEB
  EX_RPL_0_GRAD_FIXIERT : BOOL ;	//Rüstplatz 0-Grad-Position fixiert
END_VAR
VAR_IN_OUT
  EAX_Fehler_LZ_Roboter : BOOL ;	
  EAX_Fehler_Roboter_BTB : BOOL ;	
  EAX_Lader_im_Stoerber : BOOL ;	
  EAX_Roboter_NotAus : BOOL ;	
  EAX_Schutzzaun_ni_zu : BOOL ;	
  EAX_RPL_PW_Freigabe : BOOL ;	//Rüstplatz ist für PW-Ablauf freigegeben
END_VAR
VAR_TEMP
  tx_SpHy_RPL_entspannt : BOOL ;	
  ti_RPL_Status : INT ;	
  tx_RPL_entleert : BOOL ;	
  tx_RPL_beladen : BOOL ;	
  tx_RPL_STATUS_Fertigteil : BOOL ;	
  tx_RPL_STATUS_Rohteil : BOOL ;	
  tx_RPL_STATUS_Leerpal : BOOL ;	
  tx_RPL_STATUS_Defekt : BOOL ;	
  tx_RPL_STATUS_inArbeit : BOOL ;	
  tx_dummy : BOOL ;	
  tr_RPL_Sollposition : REAL ;	
  tr_RPL_Fenster_minus : REAL ;	
  tr_RPL_Fenster_plus : REAL ;	
  tr_RPL_Position : REAL ;	
  td_RPL_Position : DINT ;	
  td_RPL_Sollposition : DINT ;	
  tb_Fehlteil : INT ;	
  tx_SpSt1_Teil_ni_bearb : BOOL ;	
  tx_SpSt2_Teil_ni_bearb : BOOL ;	
  tx_SpSt3_Teil_ni_bearb : BOOL ;	
  tx_SpSt4_Teil_ni_bearb : BOOL ;	
  tx_4Seitenbearb_aktiv : BOOL ;	
  tx_SpSt1_CTRL_aktiv : BOOL ;	
  tx_SpSt2_CTRL_aktiv : BOOL ;	
  tx_SpSt3_CTRL_aktiv : BOOL ;	
  tx_SpSt4_CTRL_aktiv : BOOL ;	
  tx_MPL_STATUS_Leerpal : BOOL ;	
  dummy : BOOL ;	
  tx_PI_PW_GRST : BOOL ;	
  t_RET_VAL : INT ;	
  t_INT : INT ;	
  t_DINT : DINT ;	
  t_PalNr : BYTE ;	
  t_JUMP_1 : BOOL ;	
  t_JUMP_2 : BOOL ;	
  t_PW_ABLAUF_AKTIV : BOOL ;	
  t_ALK_OK : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =----- Meldungen an Roboter (auch OHNE Roboter-Anwahl) ----------
// Netzwerk-Übersicht
// ==================
// NW 1: ----- Meldungen an Roboter (auch OHNE Roboter-Anwahl) ----------
// NW 2: PLC>>ROB: Lebenszeichen (1Hz) von DMG
// NW 3: PLC>>ROB: Maschine auf Betriebsart "Automation mit Roboter"
// NW 4: PLC>>ROB: Rüstplatz 0-Grad-Position fixiert
// NW 5: PLC>>ROB: Freigabe Schutzzaun öffnen von DMG
// NW 6: PLC>>ROB: kein NOTAUS von DMG
// NW 7: PLC>>ROB: Bediener-Schutz ok Schutzzaun/PW-Türen
// NW 8: PLC>>ROB: PW-Freigabe ist aktiv
// NW 9: PLC>>ROB: Rüstplatz-Türen offen
// NW 10: PLC>>ROB: Rüstplatz-Türen zu
// NW 11: PLC>>ROB: Rüstplatz Wasser ist ein
// NW 12: PLC>>ROB: Rüstplatz Luft ist ein
// NW 13: PLC>>ROB: Palette 1 ist am Ruestplatz
// NW 14: PLC>>ROB: Palette 2 ist am Ruestplatz
// NW 15: PLC>>ROB: RPL-Achse: IST-Position
// NW 16: <<Meldung>> Lebenszeichen von Roboter fehlt
// NW 17: <<Meldung>> BTB von Roboter fehlt
// NW 18: <<Meldung>> Roboter im Störbereich der Maschine
// NW 19: <<Meldung>> Roboter meldet Not-Aus
// NW 20: <<Meldung>> Schutzzaun ist offen
// NW 21: ----- Freigabe Modul -------------------------------------------
// NW 22: Baustein_ENDE, wenn #EX_Freigabe=0
// NW 23: Auswertung: RPL-Paletten-Status
// NW 24: Auswertung: MPL-Status =1: MPL-Paletten-Status = Leerpalette
// NW 25: RPL-Status ==2: Rüstplatz auf STATUS "Rohteil" setzen
// NW 26: RPL-Status ==2: Rüstplatz auf STATUS "Rohteil" (bei 9999) setzen
// NW 27: RPL-Status ==1: Rüstplatz auf STATUS "Leerpalette" setzen
// NW 28: ----- Meldungen an Roboter (bei aktivem Roboterbetrieb) --------
// NW 29: PLC>>ROB: Maschinenplatz und Rüstplatz sind leer
// NW 30: PLC>>ROB: Nullpunkt-Spannsystem 1 Freigabe zum Entladen
// NW 31: PLC>>ROB: Nullpunkt-Spannsystem 1 ist gespannt
// NW 32: PLC>>ROB: Nullpunkt-Spannsystem 1 ist entspannt
// NW 33: PLC>>ROB: Nullpunkt-Spannsystem 2 Freigabe zum Entladen
// NW 34: PLC>>ROB: Nullpunkt-Spannsystem 2 ist gespannt
// NW 35: PLC>>ROB: Nullpunkt-Spannsystem 2 ist entspannt
// NW 36: PLC>>ROB: Entlade- und Belade-Freigabe für externe Einheit
// NW 37: PLC>>ROB: WS-Typ-Spiegelung
// NW 38: WS_TYP-Übergabe von RPL nach PW (TeilePrg-Steuerung)
// NW 39: Erfassen der Paletten-Nr am RPL (Werkstück-Steuerung)
// NW 40: JMPN [TMA]
// NW 41: Teile-Nr von RPL-Pal aus DB_TEILE_NR lesen (Werkstück-Steuerung)
// NW 42: PLC>>ROB: WS_TYP-Übergabe von RPL nach PW
// NW 43: --- RPL-Abfrage auf Nr "9999" (Teile-Nr) ------
// NW 44: RPL: Teile-Nr ist "9999" (für Einpaletten-Betrieb)
// NW 45: RPL: Teile-/ Werkstück-Nr ist "9999" (für Einpaletten-Betrieb)
// NW 46: --- RPL-Abfrage auf Nr "9999" (Werkstück-Nr) ------
// NW 47: RPL: Werkstück-Nr ist "9999" (für Einpaletten-Betrieb)
// NW 48: PLC>>ROB: Sonder MahleKönig: MPL-Status = 3 (Palette in Arbeit)
// NW 49: ----- Rüstplatz-Achse ------------------------------------------
// NW 50: PLC>>ROB: Freigabe Rüstplatz-Positionierung
// NW 51: ROB>>PLC: RPL_ACHSE: Befehl Rüstplatz positionieren
// NW 52: PLC>>ROB: Meldung Rüstplatzposition erreicht
// NW 53: RPL_ACHSE: Anstoss für Rüstplatzposition lesen
// NW 54: RPL_ACHSE: REAL-Wert: umgewandelter Wert für SOLL-Position
// NW 55: ----- Befehle/Meldungen von Roboter ----------------------------
// NW 56: ROB>>PLC: Befehl PW-Freigabe (pos.Flanke)
// NW 57: MPL: Übergabe NC-Meldung Teil/Seite: Defekt UND Position_NOK
// NW 58: von__PalVerw: Stelle 1: Produktionsfehler (Messtaster)
// NW 59: von__PalVerw: Stelle 2: Produktionsfehler (Messtaster)
// NW 60: von__PalVerw: Stelle 3: Produktionsfehler (Messtaster)
// NW 61: von__PalVerw: Stelle 4: Produktionsfehler (Messtaster)
// NW 62: von__PalVerw: Stelle 1: Position nicht OK (Messtaster)
// NW 63: von__PalVerw: Stelle 2: Position nicht OK (Messtaster)
// NW 64: von__PalVerw: Stelle 3: Position nicht OK (Messtaster)
// NW 65: von__PalVerw: Stelle 4: Position nicht OK (Messtaster)
// NW 66: an___PalVerw: RESET NiO-Teil/Stelle in DB_PRG_LISTE
// NW 67: von__PalVerw: Teil nicht bearbeitet 
// NW 68: an___PalVerw: RESET: Seite[x] bearbeitet
// NW 69: Auflagenkontrolle aktivieren
// NW 70: JMP---P990: bei "9999" kein Eintrag in PalVerw (Teile-Prg)
// NW 71: Mit "DB_HR".vonROB.Bef_PW_FG Zwischen-Speicher löschen
// NW 72: Vor Beschreiben mit ROB-Daten PRG-Name löschen
// NW 73: an___PalVerw: WS_TYP-Eintrag am Rüstplatz auf "Prg_Name"
// NW 74: an___PalVerw: WS_TYP-Eintrag am Rüstplatz auf "Teile-Nr"
// NW 75: Eintrag der PalNr in Liste "DB-Teile-Nr" (Werkstück-Steuerung)
// NW 76: WS_TYP von PLCanROB = WS_TYP von Roboter gespiegelt
// NW 77: Ablauf Spannstelle 1 entladen
// NW 78: Ablauf Spannstelle 2 entladen
// NW 79: Ablauf Spannstelle 3 entladen
// NW 80: Ablauf Spannstelle 4 entladen
// NW 81: Meldung ALK für Spannstelle 1 OK (Auswertung ALK1+ALK2)
// NW 82: Ablauf Spannstelle 1 beladen
// NW 83: Ablauf Spannstelle 2 beladen
// NW 84: Ablauf Spannstelle 3 beladen
// NW 85: Ablauf Spannstelle 4 beladen
// NW 86: Übernahme FG-Status bei Umschalten auf Roboter-Beladung
// NW 87: Bosch-Rexroth-Daten-Erweiterung (2-Teile auf 1er-Spannstelle)
// NW 88: Ende

      NOP   0; 

NETWORK
TITLE =PLC>>ROB: Lebenszeichen (1Hz) von DMG
//Deckel Maho sendet an Roboter 0/1-Signale mit einer Frequenz von 1Hz.
//Erkennt der Roboter keine Änderung, so ist die Kommunikation von DMC an Roboter 
//unterbrochen
      U     #EX_Takt_1Hz; 
      =     "DB_ROB_IF".OUT.gesamt.LZ; 
NETWORK
TITLE =PLC>>ROB: Maschine auf Betriebsart "Automation mit Roboter"
//Die DMC ist eingeschaltet und die Betriebsart AUTO ist angewählt.
//Es steht kein VSH an.
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Not_Aus; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Spin_VS_Halt_Satzwechsel; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Vorschub_Halt_Kanal; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Spindel_Halt_Kanal; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Vorschub_Halt_Haupt_Achs; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Stop_Asychron_Prozess1; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Stop_Asychron_Prozess2; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Stop_Asychron_Prozess3; 
      UN    "DB_FAMILIEN_MODUL".E_Fehler.Stop_Asychron_Prozess4; 
      U     #EX_Leistung_steht_an; 
      U     #EX_Automatikbetrieb; 
      U     #EX_SS_ROBOTERBETRIEB; 
      =     "DB_ROB_IF".OUT.gesamt.Automation_ein; 
NETWORK
TITLE =PLC>>ROB: Rüstplatz 0-Grad-Position fixiert

      U     #EX_RPL_0_GRAD_FIXIERT; 
      =     "DB_ROB_IF".OUT.gesamt.RPL_0_Grad_fixiert; 
NETWORK
TITLE =PLC>>ROB: Freigabe Schutzzaun öffnen von DMG
//Es steht kein PW-Ablauf an oder es ist kein PW-Ablauf in der Ausführung.
//Der Schutzzaun kann aus Sicht der DMC sofort geöffnet werden.
      U     #EX_PW_Ablauf_in_GRST; 
      =     "DB_ROB_IF".OUT.gesamt.FG_Schutzzaun_oeffnen; 
NETWORK
TITLE =PLC>>ROB: kein NOTAUS von DMG
//An der DMC steht kein NOTAUS an
      U     #EX_Kein_NotAus; 
      =     "DB_ROB_IF".OUT.gesamt.NOTAUS_ok; 
NETWORK
TITLE =PLC>>ROB: Bediener-Schutz ok Schutzzaun/PW-Türen
//Der Bedienerschutz aus Sicht der DMC ist erfüllt bei
//a) Schutzzaun zu+verriegelt
//b) Rüstplatztür zu
//c) Schutzzaun zu+verriegelt & Rüstplatztür zu
//noch zu programmieren
      O     #EX_RPL_TUER_ZU; 
      O     "DB_PW_DATA".bPW_0Grad; 
      O     "DB_PW_DATA".bPW_180Grad; 
      O     #EX_SCHUTZZAUN_VERRIEGELT; 
      =     "DB_ROB_IF".OUT.gesamt.Bedienerschutz_ok; 
NETWORK
TITLE =PLC>>ROB: PW-Freigabe ist aktiv
//a) DMC meldet, dass die PW-Freigabe aktiviert ist. Die NC hat Freigabe zum 
//Palettenwechsel.
//b) NC ist fertig und bereit zum Ent-/Beladen
//      U     #EX_PW_aktiv
      O     "DB_HR".RPT.RP_PWFG_oRSP_aktiv; 
      O     "DB_HR".RPT.VSM_RS_Freigabe; 
      ON    "DB_PW_DATA".bPW_GRDST; 
      =     "DB_ROB_IF".OUT.RPL.PW_aktiv; 
NETWORK
TITLE =PLC>>ROB: Rüstplatz-Türen offen

      U     #EX_RPL_TUER_OFFEN; 
      =     "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen; 
NETWORK
TITLE =PLC>>ROB: Rüstplatz-Türen zu

      U     #EX_RPL_TUER_ZU; 
      =     "DB_ROB_IF".OUT.RPL.RPL_Tuer_zu; 
NETWORK
TITLE =PLC>>ROB: Rüstplatz Wasser ist ein

      U     #EX_KM_RP_DUSCHE; 
      =     "DB_ROB_IF".OUT.RPL.RPL_Wasser_ein; 
NETWORK
TITLE =PLC>>ROB: Rüstplatz Luft ist ein

      U     #EX_VORR_ABBLASEN; 
      =     "DB_ROB_IF".OUT.RPL.RPL_Luft_ein; 
NETWORK
TITLE =PLC>>ROB: Palette 1 ist am Ruestplatz
//PLC-Eingang: Bero PW-Stellung 180-Grad ist "1"
      U     "DB_PW_DATA".bPW_180Grad; 
      =     "DB_ROB_IF".OUT.RPL.RPL_PAL_1; 
NETWORK
TITLE =PLC>>ROB: Palette 2 ist am Ruestplatz
//PLC-Eingang: Bero PW-Stellung 0-Grad ist "1"
      U     "DB_PW_DATA".bPW_0Grad; 
      =     "DB_ROB_IF".OUT.RPL.RPL_PAL_2; 
NETWORK
TITLE =PLC>>ROB: RPL-Achse: IST-Position
//IST-Position Rüstplatz-Achse
      U(    ; 
      U(    ; 
      U(    ; 
      U     "m_eins"; 
      SPBNB _001; 
      L     #ER_RPL_Position; 
      T     #tr_RPL_Position; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_001: U     BIE; 
      )     ; 
      SPBNB _003; 
      L     #tr_RPL_Position; 
      RND   ; 
      T     #td_RPL_Position; 
      UN    OV; 
      SAVE  ; 
      CLR   ; 
_003: U     BIE; 
      )     ; 
      SPBNB _006; 
      L     #td_RPL_Position; 
      T     "DB_ROB_IF".OUT.RPL.Achse.AX_ISTposition; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_006: U     BIE; 
      )     ; 
      U(    ; 
      L     "DB_ROB_IF".OUT.RPL.Achse.AX_ISTposition; 
      L     360; 
      ==I   ; 
      )     ; 
      SPBNB _007; 
      L     0; 
      T     "DB_ROB_IF".OUT.RPL.Achse.AX_ISTposition; 
_007: NOP   0; 
NETWORK
TITLE =<<Meldung>> Lebenszeichen von Roboter fehlt

      U(    ; 
      UN    "DB_ROB_IF".IN.gesamt.LZ; 
      L     S5T#2S; 
      SE    "te_Roboter_LZ_0_Signal"; 
      NOP   0; 
      NOP   0; 
      NOP   0; 
      U     "te_Roboter_LZ_0_Signal"; 
      )     ; 
      S     "DB_ROB_IF".STAT.Roboter.LZ.Fehler; 
      U(    ; 
      ON    #EX_SS_ROBOTERBETRIEB; 
      O     "M_Ruecksetze_Fehler"; 
      )     ; 
      R     "DB_ROB_IF".STAT.Roboter.LZ.Fehler; 
      U     "DB_ROB_IF".STAT.Roboter.LZ.Fehler; 
      =     #EAX_Fehler_LZ_Roboter; 
NETWORK
TITLE =<<Meldung>> BTB von Roboter fehlt
//Im Automatikbetrieb und korrektem Lebenszeichen wird auf Roboter BTB überwacht
//
      UN    "DB_ROB_IF".IN.gesamt.ROB_BTB; 
      U     #EX_Automatikbetrieb; 
      UN    "DB_ROB_IF".STAT.Roboter.LZ.Fehler; 
      U     #EX_SS_ROBOTERBETRIEB; 
      =     #EAX_Fehler_Roboter_BTB; 
NETWORK
TITLE =<<Meldung>> Roboter im Störbereich der Maschine
//Wenn ein Palettenwechsel ausgeführt werden soll, wird überwacht ob der Lader 
//aus dem Störbereich ist
      U(    ; 
      O     "DB_DM_M_FUNKTION".MX_M[60]; 
      O     "DB_ROB_IF".IN.RPL.Bef_PW_Freigabe; 
      O     "I_RPT_Taste_Pal_drehen"; 
      O     "m_Req_RPAchse_drehen"; 
      O     "DB_PW_DATA".Out.OX_PW_Hub_heben; 
      )     ; 
      UN    "DB_ROB_IF".IN.gesamt.ROB_aus_Stoerbereich; 
      S     #EAX_Lader_im_Stoerber; 
      U     "M_Ruecksetze_Fehler"; 
      U     "DB_ROB_IF".IN.gesamt.ROB_aus_Stoerbereich; 
      R     #EAX_Lader_im_Stoerber; 
      NOP   0; 
NETWORK
TITLE =<<Meldung>> Roboter meldet Not-Aus
//Fehler Roboter Not-Aus
      UN    "DB_ROB_IF".IN.gesamt.NOTAUS_ok; 
      S     #EAX_Roboter_NotAus; 
      U     "M_Ruecksetze_Fehler"; 
      U     "DB_ROB_IF".IN.gesamt.NOTAUS_ok; 
      R     #EAX_Roboter_NotAus; 
      NOP   0; 
NETWORK
TITLE =<<Meldung>> Schutzzaun ist offen

      UN    #EX_SCHUTZZAUN_VERRIEGELT; 
      =     #EAX_Schutzzaun_ni_zu; 
NETWORK
TITLE =----- Freigabe Modul -------------------------------------------

      U     #EX_Freigabe; 
      SPB   A001; 
NETWORK
TITLE =Baustein_ENDE, wenn #EX_Freigabe=0

      U     "m_eins"; 
      SAVE  ; 
      BEB   ; 
NETWORK
TITLE =Auswertung: RPL-Paletten-Status
//1: Leerpalette
//2: Rohteil
//3: in Arbeit
//4: Fertigteil
//5: Störung
A001: O(    ; 
      U     "MX_ABST_Rundspeicher"; 
      SPBNB _014; 
      L     "DB_PAL_NR".Platz[4].Status; 
      T     #ti_RPL_Status; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_014: U     BIE; 
      )     ; 
      O(    ; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _015; 
      L     "DB_PAL_NR".Platz[1].Status; 
      T     #ti_RPL_Status; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_015: U     BIE; 
      )     ; 
      =     L     45.0; 
      U     L     45.0; 
      U(    ; 
      L     #ti_RPL_Status; 
      L     1; 
      ==I   ; 
      )     ; 
      =     #tx_RPL_STATUS_Leerpal; 
      U     L     45.0; 
      U(    ; 
      L     #ti_RPL_Status; 
      L     2; 
      ==I   ; 
      )     ; 
      =     #tx_RPL_STATUS_Rohteil; 
      U     L     45.0; 
      U(    ; 
      L     #ti_RPL_Status; 
      L     3; 
      ==I   ; 
      )     ; 
      =     #tx_RPL_STATUS_inArbeit; 
      U     L     45.0; 
      U(    ; 
      L     #ti_RPL_Status; 
      L     4; 
      ==I   ; 
      )     ; 
      =     #tx_RPL_STATUS_Fertigteil; 
      U     L     45.0; 
      U(    ; 
      L     #ti_RPL_Status; 
      L     5; 
      ==I   ; 
      )     ; 
      =     #tx_RPL_STATUS_Defekt; 
NETWORK
TITLE =Auswertung: MPL-Status =1: MPL-Paletten-Status = Leerpalette

      L     "DB_PAL_NR".Platz[0].Status; 
      L     1; 
      ==I   ; 
      =     #tx_MPL_STATUS_Leerpal; 
NETWORK
TITLE =RPL-Status ==2: Rüstplatz auf STATUS "Rohteil" setzen

      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[1].Meldung_Beladen; 
      U     "DB_ROB_IF".STAT.Stelle[1].gespannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[1].KONF_mitSPH; 
      )     ; 
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[2].Meldung_Beladen; 
      U     "DB_ROB_IF".STAT.Stelle[2].gespannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[2].KONF_mitSPH; 
      )     ; 
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[3].Meldung_Beladen; 
      U     "DB_ROB_IF".STAT.Stelle[3].gespannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[3].KONF_mitSPH; 
      )     ; 
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[4].Meldung_Beladen; 
      U     "DB_ROB_IF".STAT.Stelle[4].gespannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[4].KONF_mitSPH; 
      )     ; 
      U(    ; 
      O     "DB_ROB_IF".IN.Stelle[1].Meldung_Beladen; 
      O     "DB_ROB_IF".IN.Stelle[2].Meldung_Beladen; 
      O     "DB_ROB_IF".IN.Stelle[3].Meldung_Beladen; 
      O     "DB_ROB_IF".IN.Stelle[4].Meldung_Beladen; 
      )     ; 
      U(    ; 
      O     #tx_RPL_STATUS_Leerpal; 
      O     #tx_RPL_STATUS_Fertigteil; 
      O     #tx_RPL_STATUS_Rohteil; 
      )     ; 
      =     L     45.0; 
      U     L     45.0; 
      U     "MX_ABST_Rundspeicher"; 
      SPBNB _016; 
      L     2; 
      T     "DB_PAL_NR".Platz[4].Status; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_016: U     BIE; 
      =     #tx_RPL_beladen; 
      U     L     45.0; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _017; 
      L     2; 
      T     "DB_PAL_NR".Platz[1].Status; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_017: U     BIE; 
      =     #tx_RPL_beladen; 
NETWORK
TITLE =RPL-Status ==2: Rüstplatz auf STATUS "Rohteil" (bei 9999) setzen
//Wenn "9999" am Rüstplatz ist, wird von der PLC
//- Palette auf Status "Rohteil" gesetzt
//- eine PW-Freigabe ausgelöst
      U     "DB_HR".ROB_Interface.RPL_Nr_9999; 
      U     #EX_PW_Ablauf_in_GRST; 
      =     L     45.0; 
      U     L     45.0; 
      U     "MX_ABST_Rundspeicher"; 
      SPBNB _034; 
      L     2; 
      T     "DB_PAL_NR".Platz[4].Status; 
_034: NOP   0; 
      U     L     45.0; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _035; 
      L     2; 
      T     "DB_PAL_NR".Platz[1].Status; 
_035: NOP   0; 
NETWORK
TITLE =RPL-Status ==1: Rüstplatz auf STATUS "Leerpalette" setzen
//Wenn Rüstplatz fertig entladen wurde, dann Status auf Leerpalette setzen
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[1].Meldung_Entladen; 
      U     "DB_ROB_IF".STAT.Stelle[1].entspannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[1].KONF_mitSPH; 
      )     ; 
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[2].Meldung_Entladen; 
      U     "DB_ROB_IF".STAT.Stelle[2].entspannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[2].KONF_mitSPH; 
      )     ; 
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[3].Meldung_Entladen; 
      U     "DB_ROB_IF".STAT.Stelle[3].entspannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[3].KONF_mitSPH; 
      )     ; 
      U(    ; 
      U     "DB_ROB_IF".IN.Stelle[4].Meldung_Entladen; 
      U     "DB_ROB_IF".STAT.Stelle[4].entspannt; 
      ON    "DB_PV_SpH".SpH[1].Stelle[4].KONF_mitSPH; 
      )     ; 
      U(    ; 
      O     "DB_ROB_IF".IN.Stelle[1].Meldung_Entladen; 
      O     "DB_ROB_IF".IN.Stelle[2].Meldung_Entladen; 
      O     "DB_ROB_IF".IN.Stelle[3].Meldung_Entladen; 
      O     "DB_ROB_IF".IN.Stelle[4].Meldung_Entladen; 
      )     ; 
      =     L     45.0; 
      U     L     45.0; 
      U     "MX_ABST_Rundspeicher"; 
      SPBNB _036; 
      L     1; 
      T     "DB_PAL_NR".Platz[4].Status; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_036: U     BIE; 
      =     #tx_RPL_entleert; 
      U     L     45.0; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _037; 
      L     1; 
      T     "DB_PAL_NR".Platz[1].Status; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_037: U     BIE; 
      =     #tx_RPL_entleert; 
NETWORK
TITLE =----- Meldungen an Roboter (bei aktivem Roboterbetrieb) --------



NETWORK
TITLE =PLC>>ROB: Maschinenplatz und Rüstplatz sind leer
//noch zu programmieren
//Der Anlagenmodus "Leerfahren" ist angewählt und beide Vorichtungen
//(Maschine/Rüstplatz) sind entspannt
      U     "DB_ROB_IF".IN.gesamt.BA_Leerfahren; 
      U     #tx_RPL_STATUS_Leerpal; 
      U     #tx_MPL_STATUS_Leerpal; 
      =     "DB_ROB_IF".OUT.gesamt.MPL_RPL_leer; 
NETWORK
TITLE =PLC>>ROB: Nullpunkt-Spannsystem 1 Freigabe zum Entladen
//noch zu programmieren
//Am Rüstplatz befindet sich eine Palette mit Nullpunktspann-System, das zum 
//Ent-/Beladen bereit ist.
      U     "m_null"; 
      =     "DB_ROB_IF".OUT.RPL.NPSPS_1_FG_Entladen; 
NETWORK
TITLE =PLC>>ROB: Nullpunkt-Spannsystem 1 ist gespannt
//noch zu programmierenAlle Elemente, die mit einem Nullspannungssystem 1 
//gespannt 
//werden, sind 
//gespannt
      U     "m_null"; 
      =     "DB_ROB_IF".OUT.RPL.NPSPS_1_gespannt; 
NETWORK
TITLE =PLC>>ROB: Nullpunkt-Spannsystem 1 ist entspannt
//noch zu programmieren
//Alle Elemente, die mit einem Nullspannungssystem 2 gespannt werden, sind gelöst
      U     "m_null"; 
      =     "DB_ROB_IF".OUT.RPL.NPSPS_1_entspannt; 
NETWORK
TITLE =PLC>>ROB: Nullpunkt-Spannsystem 2 Freigabe zum Entladen
//noch zu programmieren
//Am Rüstplatz befindet sich eine Palette mit Nullpunktspann-System, das zum 
//Ent-/Beladen bereit ist.
      U     "m_null"; 
      =     "DB_ROB_IF".OUT.RPL.NPSPS_2_FG_Entladen; 
NETWORK
TITLE =PLC>>ROB: Nullpunkt-Spannsystem 2 ist gespannt
//noch zu programmieren
//Alle Elemente, die mit einem Nullspannungssystem 2 gespannt werden, sind 
//gespannt
      U     "m_null"; 
      =     "DB_ROB_IF".OUT.RPL.NPSPS_2_gespannt; 
NETWORK
TITLE =PLC>>ROB: Nullpunkt-Spannsystem 2 ist entspannt
//noch zu programmierenAlle Elemente, die mit einem Nullspannungssystm 2 gespannt 
//werden, sind gelöst
      U     "m_null"; 
      =     "DB_ROB_IF".OUT.RPL.NPSPS_2_entspannt; 
NETWORK
TITLE =PLC>>ROB: Entlade- und Belade-Freigabe für externe Einheit
//Bei Vorrichtungen, die von EXTERN entspannt/gespannt werden.
//Nach PW-Ablauf & FERTIG-Teil   ==> Freigabe_Entladen an Roboter wird "1"
//ROB meldet "entladen"          ==> PAL_STAT: wird LEERPALETTE
//ROB meldet "beladen"           ==> PAL_STAT: wird ROHTEIL
//ROB meldet "PW-Freigabe"       ==> Freigabe_Entladen an Roboter wird "0"
      U(    ; 
      O     #tx_RPL_STATUS_Fertigteil; 
      O     #tx_RPL_STATUS_Defekt; 
      O     #tx_RPL_STATUS_Leerpal; 
      )     ; 
      UN    "DB_HR".ABST.SpannHydraulik; 
      =     "DB_ROB_IF".OUT.gesamt.Lade_FG_extEinheit; 
NETWORK
TITLE =PLC>>ROB: WS-Typ-Spiegelung
//Roboter gibt vor welcher WS_TYP in die PalVerw eingetragen werden soll.
//PLC spiegelt dem Roboter zurück, welcher WS_TYP in PalVerw eingetragen wird, 
//wenn Roboter PW-Freigabe auslöst.
//Roboter darf PW-Freigabe erst geben, wenn Daten übereinstimmen.
      L     "DB_ROB_IF".IN.RPL.WS_Daten[1].WS_Typ; 
      T     "DB_ROB_IF".OUT.RPL.WS_Daten[1].WS_Typ_gespiegelt; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
      U     BIE; 
      =     #dummy; 
NETWORK
TITLE =WS_TYP-Übergabe von RPL nach PW (TeilePrg-Steuerung)
//Nach PW-Ablauf werden:
//- WS_TYP an Roboter gemeldet bei "Teileprogramm"
      UN    "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      U     #EX_PW_Ablauf_in_GRST; 
      =     L     45.0; 
      U(    ; 
      U     L     45.0; 
      U     "MX_ABST_Rundspeicher"; 
      SPBNB _03b; 
      CALL "FC_SIEM_STRNG_DI" (
           S                        := "DB_PAL_NR".Platz[4].Prg_Name,
           RET_VAL                  := "DB_HR".ROB_Interface.Prg_Nr);
_03b: U     BIE; 
      )     ; 
      SPBNB _047; 
      L     "DB_HR".ROB_Interface.Prg_Nr; 
      T     "DB_ROB_IF".OUT.RPL.WS_Daten[1].WS_Typ; 
_047: NOP   0; 
      U(    ; 
      U     L     45.0; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _04b; 
      CALL "FC_SIEM_STRNG_DI" (
           S                        := "DB_PAL_NR".Platz[1].Prg_Name,
           RET_VAL                  := "DB_HR".ROB_Interface.Prg_Nr);
_04b: U     BIE; 
      )     ; 
      SPBNB _04d; 
      L     "DB_HR".ROB_Interface.Prg_Nr; 
      T     "DB_ROB_IF".OUT.RPL.WS_Daten[1].WS_Typ; 
_04d: NOP   0; 
NETWORK
TITLE =Erfassen der Paletten-Nr am RPL (Werkstück-Steuerung)

      U     "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      U     #EX_PW_Ablauf_in_GRST; 
      =     L     44.0; 
      U     "MX_ABST_Rundspeicher"; 
      U     L     44.0; 
      SPBNB _042; 
      L     "DB_PAL_NR".Platz[4].Pal_Nr; 
      T     #t_PalNr; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_042: U     BIE; 
      =     #t_JUMP_1; 
      U     L     44.0; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _043; 
      L     "DB_PAL_NR".Platz[1].Pal_Nr; 
      T     #t_PalNr; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_043: U     BIE; 
      =     #t_JUMP_2; 
NETWORK
TITLE =JMPN [TMA]

      O     #t_JUMP_1; 
      O     #t_JUMP_2; 
      SPBN  TMA; 
NETWORK
TITLE =Teile-Nr von RPL-Pal aus DB_TEILE_NR lesen (Werkstück-Steuerung)
//Werkstück-Steuerung:
//Übergabe der Teile-Nr erfolgt nur, wenn Pal-Nr innerhalb von    1...99
      L     0; 
      L     #t_PalNr; 
      ==I   ; 
      O(    ; 
      L     99; 
      >I    ; 
      )     ; 
      SPB   TMA; 

      TAK   ; 
      L     -1; 
      +I    ; 
      L     32; 
      *D    ; 
      LAR1  ; 

      AUF   "DB_TEILE_NR"; 
      L     DBD [AR1,P#0.0]; 
      T     "DB_HR".ROB_Interface.WS_Nr; 
NETWORK
TITLE =PLC>>ROB: WS_TYP-Übergabe von RPL nach PW
//Nach PW-Ablauf werden:
//- WS_TYP an Roboter gemeldet
//"DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt = 0  ==> Teile-Programm
//"DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt = 1  ==> Werkstück-Programm
      U     #EX_PW_Ablauf_in_GRST; 
      SPBNB _04e; 
      L     "DB_HR".ROB_Interface.WS_Nr; 
      T     "DB_ROB_IF".OUT.RPL.WS_Daten[1].WS_Typ; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_04e: U     BIE; 
      =     #dummy; 
NETWORK
TITLE =--- RPL-Abfrage auf Nr "9999" (Teile-Nr) ------
//Teile-Nr bzw. Werkstück-Nr
TMA:  U     #EX_PW_Ablauf_in_GRST; 
      UN    "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      SPBN  P998; 
NETWORK
TITLE =RPL: Teile-Nr ist "9999" (für Einpaletten-Betrieb)
//Wenn "9999" am Rüstplatz ist, wird von der PLC
//- Palette auf Status "Rohteil" gesetzt
//- eine PW-Freigabe ausgelöst
      L     "DB_HR".ROB_Interface.Prg_Nr; 
      L     9999; 
      ==D   ; 
      =     "DB_HR".ROB_Interface.RPL_Nr_9999; 
NETWORK
TITLE =RPL: Teile-/ Werkstück-Nr ist "9999" (für Einpaletten-Betrieb)

P998: UN    #EX_PW_Ablauf_in_GRST; 
      R     "DB_HR".ROB_Interface.RPL_Nr_9999; 
NETWORK
TITLE =--- RPL-Abfrage auf Nr "9999" (Werkstück-Nr) ------

      U     #EX_PW_Ablauf_in_GRST; 
      U     "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      SPBN  P999; 
NETWORK
TITLE =RPL: Werkstück-Nr ist "9999" (für Einpaletten-Betrieb)
//Wenn "9999" am Rüstplatz ist, wird von der PLC
//- Palette auf Status "Rohteil" gesetzt
//- eine PW-Freigabe ausgelöst
      L     "DB_HR".ROB_Interface.WS_Nr; 
      L     9999; 
      ==D   ; 
      =     "DB_HR".ROB_Interface.RPL_Nr_9999; 
NETWORK
TITLE =PLC>>ROB: Sonder MahleKönig: MPL-Status = 3 (Palette in Arbeit)

P999: L     "DB_PAL_NR".Platz[0].Status; 
      L     3; 
      ==I   ; 
      =     "DB_ROB_IF".OUT.gesamt.MPL_STATUS_3; 
NETWORK
TITLE =----- Rüstplatz-Achse ------------------------------------------



NETWORK
TITLE =PLC>>ROB: Freigabe Rüstplatz-Positionierung

      U(    ; 
      O     "DB_PW_DATA".bPW_0Grad; 
      O     "DB_PW_DATA".bPW_180Grad; 
      )     ; 
      U     "DB_ROB_IF".OUT.gesamt.Automation_ein; 
      U     "DB_ROB_IF".OUT.gesamt.Bedienerschutz_ok; 
      U     #EX_PW_Ablauf_in_GRST; 
      =     "DB_ROB_IF".OUT.RPL.Achse.FRG_Drehbewegung_RP; 
NETWORK
TITLE =ROB>>PLC: RPL_ACHSE: Befehl Rüstplatz positionieren

      U     "DB_ROB_IF".IN.RPL.Achse.BEF_RPL_positionieren; 
      FP    "DB_ROB_IF".STAT.Ruestplatz.FP_BEF_RPL_positionieren; 
      R     "DB_HR".RPT.RPAX_auf_Pos; 
      S     "DB_HR".vonROB.Bef_RPAX_positionieren; 
      S     "DB_ACHSE_RPL".MX_Ax_Position_Lesen; 
NETWORK
TITLE =PLC>>ROB: Meldung Rüstplatzposition erreicht

      U     "DB_HR".RPT.RPAX_auf_Pos; 
      U     "DB_ROB_IF".IN.RPL.Achse.BEF_RPL_positionieren; 
      =     "DB_ROB_IF".OUT.RPL.Achse.MEL_Position_erreicht_RP; 
NETWORK
TITLE =RPL_ACHSE: Anstoss für Rüstplatzposition lesen

      U     "DB_ROB_IF".IN.RPL.Achse.BEF_RPL_positionieren; 
      FN    "DB_ROB_IF".STAT.Ruestplatz.FN_BEF_RPL_positionieren; 
      O(    ; 
      U(    ; 
      O     "DB_ACHSE9".E_TCMinus; 
      O     "DB_ACHSE9".E_TCMinus; 
      )     ; 
      FN    "DB_ROB_IF".STAT.Ruestplatz.FP_RPL_hat_positioniert; 
      )     ; 
      S     "DB_ACHSE_RPL".MX_Ax_Position_Lesen; 
      R     "DB_HR".vonROB.Bef_RPAX_positionieren; 
      S     "DB_ACHSE_RPL".MX_Abbruch_Positionieren; 
NETWORK
TITLE =RPL_ACHSE: REAL-Wert: umgewandelter Wert für SOLL-Position

      U(    ; 
      L     "DB_ROB_IF".IN.RPL.Achse.RPL_AX_SOLLposition; 
      ITD   ; 
      T     #td_RPL_Sollposition; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
      U     BIE; 
      )     ; 
      SPBNB _04f; 
      L     #td_RPL_Sollposition; 
      DTR   ; 
      T     "DB_ROB_IF".STAT.Ruestplatz.Sollpos_Realwert; 
_04f: NOP   0; 
NETWORK
TITLE =----- Befehle/Meldungen von Roboter ----------------------------



NETWORK
TITLE =ROB>>PLC: Befehl PW-Freigabe (pos.Flanke)
//a) Wenn Roboter aus dem Störbereich ist und die Spannstellen fertig beladen
//   sind, dann wird die PW-Freigabe gesetzt
//
//b) EIN-Paletten-Betrieb: Palette hat Programm-Nr "9999"
//   ==> automatische PW-Freigabe, wenn Palette mit "9999" am RPL ist.
      U     "DB_ROB_IF".IN.RPL.Bef_PW_Freigabe; 
      FP    "DB_HR".ROB_Interface.HM_PI_ROB_PWFG; 
      U     "DB_ROB_IF".IN.gesamt.ROB_aus_Stoerbereich; 
      U(    ; 
      O     #tx_RPL_STATUS_Rohteil; 
      O     #tx_RPL_STATUS_Leerpal; 
      )     ; 
      FP    "DB_ROB_IF".STAT.Palettenwechsler.FP_PW_Freigabe_von_Rob; 
      O     ; 
      U     "DB_HR".ROB_Interface.RPL_Nr_9999; 
      U     "DB_ROB_IF".IN.gesamt.ROB_aus_Stoerbereich; 
      UN    "DB_ROB_IF".OUT.RPL.PW_aktiv; 
      U     #EX_SS_ROBOTERBETRIEB; 
      =     "DB_HR".vonROB.Bef_PW_FG; 
NETWORK
TITLE =MPL: Übergabe NC-Meldung Teil/Seite: Defekt UND Position_NOK
//"DB_NC_PLC".Zusatz.NC_an_PLC.MESSTASTER_nOK
//Die 4-Seiten-Speicherzellen werden bei NICHT-4-Seitenbearbeitung als 
//Speicherzellen für die Teile verwendet.
//Bit 0: Teil_1 / Seite_1   0=ok   1=NiO
//Bit 1: Teil_2 / Seite_2   0=ok   1=NiO
//Bit 2: Teil_3 / Seite_3   0=ok   1=NiO
//Bit 3: Teil_4 / Seite_4   0=ok   1=NiO
//Bit 4: Teil_1 / Seite_1   0=ok   1=Position Nok
//Bit 5: Teil_1 / Seite_1   0=ok   1=Position Nok
//Bit 6: Teil_1 / Seite_1   0=ok   1=Position Nok
//Bit 7: Teil_1 / Seite_1   0=ok   1=Position Nok
//
//RESET erfolgt in PW-Zyklus während PW-Ablauf
      CALL "BLKMOVE" (
           SRCBLK                   := "DB_NC_PLC".Zusatz.NC_an_PLC.MESSTASTER_nOK,
           RET_VAL                  := #t_RET_VAL,
           DSTBLK                   := "DB_HR".ALLG.BYTE_auf_BITS);
      U     BIE; 
      =     L     45.0; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit0; 
      =     "DB_PRG_LISTE".Platz[0].Seite[1].defekt; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit1; 
      =     "DB_PRG_LISTE".Platz[0].Seite[2].defekt; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit2; 
      =     "DB_PRG_LISTE".Platz[0].Seite[3].defekt; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit3; 
      =     "DB_PRG_LISTE".Platz[0].Seite[4].defekt; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit4; 
      =     "DB_PRG_LISTE".Platz[0].Seite[1].Position_NOK; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit5; 
      =     "DB_PRG_LISTE".Platz[0].Seite[2].Position_NOK; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit6; 
      =     "DB_PRG_LISTE".Platz[0].Seite[3].Position_NOK; 
      U     L     45.0; 
      U     "DB_HR".ALLG.BYTE_auf_BITS.Bit7; 
      =     "DB_PRG_LISTE".Platz[0].Seite[4].Position_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 1: Produktionsfehler (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[1].defekt; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[1].defekt; 
      U     "MX_ABST_Rundspeicher"; 
//      =     "DB_ROB_IF".OUT.Stelle[1].Teil_niO
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[1].Messtaster_Check_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 2: Produktionsfehler (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[2].defekt; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[2].defekt; 
      U     "MX_ABST_Rundspeicher"; 
//      =     "DB_ROB_IF".OUT.Stelle[2].Teil_niO
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[2].Messtaster_Check_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 3: Produktionsfehler (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[3].defekt; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[3].defekt; 
      U     "MX_ABST_Rundspeicher"; 
//      =     "DB_ROB_IF".OUT.Stelle[3].Teil_niO
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[3].Messtaster_Check_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 4: Produktionsfehler (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[4].defekt; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[4].defekt; 
      U     "MX_ABST_Rundspeicher"; 
//      =     "DB_ROB_IF".OUT.Stelle[4].Teil_niO
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[4].Messtaster_Check_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 1: Position nicht OK (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[1].Position_NOK; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[1].Position_NOK; 
      U     "MX_ABST_Rundspeicher"; 
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[1].Messtaster_Pos_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 2: Position nicht OK (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[2].Position_NOK; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[2].Position_NOK; 
      U     "MX_ABST_Rundspeicher"; 
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[2].Messtaster_Pos_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 3: Position nicht OK (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[3].Position_NOK; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[3].Position_NOK; 
      U     "MX_ABST_Rundspeicher"; 
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[3].Messtaster_Pos_NOK; 
NETWORK
TITLE =von__PalVerw: Stelle 4: Position nicht OK (Messtaster)

      U     "DB_PRG_LISTE".Platz[1].Seite[4].Position_NOK; 
      UN    "MX_ABST_Rundspeicher"; 
      O     ; 
      U     "DB_PRG_LISTE".Platz[4].Seite[4].Position_NOK; 
      U     "MX_ABST_Rundspeicher"; 
      =     "DB_ROB_IF".OUT.RPL.WS_Daten[4].Messtaster_Pos_NOK; 
NETWORK
TITLE =an___PalVerw: RESET NiO-Teil/Stelle in DB_PRG_LISTE

      U     "DB_HR".vonROB.Bef_PW_FG; 
      =     L     45.0; 
      U     L     45.0; 
      UN    "MX_ABST_Rundspeicher"; 
      R     "DB_PRG_LISTE".Platz[1].Seite[1].defekt; 
      R     "DB_PRG_LISTE".Platz[1].Seite[2].defekt; 
      R     "DB_PRG_LISTE".Platz[1].Seite[3].defekt; 
      R     "DB_PRG_LISTE".Platz[1].Seite[4].defekt; 
      R     "DB_PRG_LISTE".Platz[1].Seite[1].Position_NOK; 
      R     "DB_PRG_LISTE".Platz[1].Seite[2].Position_NOK; 
      R     "DB_PRG_LISTE".Platz[1].Seite[3].Position_NOK; 
      R     "DB_PRG_LISTE".Platz[1].Seite[4].Position_NOK; 
      U     L     45.0; 
      U     "MX_ABST_Rundspeicher"; 
      R     "DB_PRG_LISTE".Platz[4].Seite[1].defekt; 
      R     "DB_PRG_LISTE".Platz[4].Seite[2].defekt; 
      R     "DB_PRG_LISTE".Platz[4].Seite[3].defekt; 
      R     "DB_PRG_LISTE".Platz[4].Seite[4].defekt; 
      R     "DB_PRG_LISTE".Platz[4].Seite[1].Position_NOK; 
      R     "DB_PRG_LISTE".Platz[4].Seite[2].Position_NOK; 
      R     "DB_PRG_LISTE".Platz[4].Seite[3].Position_NOK; 
      R     "DB_PRG_LISTE".Platz[4].Seite[4].Position_NOK; 
NETWORK
TITLE =von__PalVerw: Teil nicht bearbeitet 
//Wird gesetzt bei Palettenstatus "Störung" und "In Arbeit"
      O(    ; 
      L     #ti_RPL_Status; 
      L     5; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     #ti_RPL_Status; 
      L     3; 
      ==I   ; 
      )     ; 
      =     L     45.0; 
      U     L     45.0; 
      U     "DB_PRG_LISTE".Platz[1].Seite[1].aktiv; 
      UN    "DB_PRG_LISTE".Platz[1].Seite[1].bearbeitet; 
      =     #tx_SpSt1_Teil_ni_bearb; 
      U     L     45.0; 
      U     "DB_PRG_LISTE".Platz[1].Seite[2].aktiv; 
      UN    "DB_PRG_LISTE".Platz[1].Seite[2].bearbeitet; 
      =     #tx_SpSt2_Teil_ni_bearb; 
      U     L     45.0; 
      U     "DB_PRG_LISTE".Platz[1].Seite[3].aktiv; 
      UN    "DB_PRG_LISTE".Platz[1].Seite[3].bearbeitet; 
      =     #tx_SpSt3_Teil_ni_bearb; 
      U     L     45.0; 
      U     "DB_PRG_LISTE".Platz[1].Seite[4].aktiv; 
      UN    "DB_PRG_LISTE".Platz[1].Seite[4].bearbeitet; 
      =     #tx_SpSt4_Teil_ni_bearb; 
NETWORK
TITLE =an___PalVerw: RESET: Seite[x] bearbeitet

      U     "m_eins"; 
      =     L     45.0; 
      U     L     45.0; 
      U     "DB_ROB_IF".IN.Stelle[1].Meldung_Entladen; 
      R     "DB_PRG_LISTE".Platz[1].Seite[1].bearbeitet; 
      U     L     45.0; 
      U     "DB_ROB_IF".IN.Stelle[2].Meldung_Entladen; 
      R     "DB_PRG_LISTE".Platz[1].Seite[2].bearbeitet; 
      U     L     45.0; 
      U     "DB_ROB_IF".IN.Stelle[3].Meldung_Entladen; 
      R     "DB_PRG_LISTE".Platz[1].Seite[3].bearbeitet; 
      U     L     45.0; 
      U     "DB_ROB_IF".IN.Stelle[4].Meldung_Entladen; 
      R     "DB_PRG_LISTE".Platz[1].Seite[4].bearbeitet; 
NETWORK
TITLE =Auflagenkontrolle aktivieren

      UN    #EX_ALK_SS_AUS; 
      =     L     45.0; 
      U     L     45.0; 
      U     "DB_PV_SpH".SpH[1].Stelle[1].KONF_CTRL_spannen; 
      =     #tx_SpSt1_CTRL_aktiv; 
      U     L     45.0; 
      U     "DB_PV_SpH".SpH[1].Stelle[2].KONF_CTRL_spannen; 
      =     #tx_SpSt2_CTRL_aktiv; 
      U     L     45.0; 
      U     "DB_PV_SpH".SpH[1].Stelle[3].KONF_CTRL_spannen; 
      =     #tx_SpSt3_CTRL_aktiv; 
      U     L     45.0; 
      U     "DB_PV_SpH".SpH[1].Stelle[4].KONF_CTRL_spannen; 
      =     #tx_SpSt4_CTRL_aktiv; 
NETWORK
TITLE =JMP---P990: bei "9999" kein Eintrag in PalVerw (Teile-Prg)

      O     "DB_HR".ROB_Interface.RPL_Nr_9999; 
      O     "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      SPB   P990; 
NETWORK
TITLE =Mit "DB_HR".vonROB.Bef_PW_FG Zwischen-Speicher löschen

      U     "DB_HR".vonROB.Bef_PW_FG; 
      U     "DB_CONFIG".ABST.ROB_mit_PRG_UEBERGABE; 
      UN    "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      SPBN  PL4E; 

// "DB_HR".ALLG.t_STRING_1  Byte: 808...819  (9-stellige Zahl mit Vorzeichen)
//Byte_1: max.Länge          hier: Byte 808
//Byte_2: Anzahl der STRING  hier: Byte 809
      L     ' '; 
      T     "DB_HR".ALLG.t_STRING_1[1]; 
      T     "DB_HR".ALLG.t_STRING_1[2]; 
      T     "DB_HR".ALLG.t_STRING_1[3]; 
      T     "DB_HR".ALLG.t_STRING_1[4]; 
      T     "DB_HR".ALLG.t_STRING_1[5]; 
      T     "DB_HR".ALLG.t_STRING_1[6]; 
      T     "DB_HR".ALLG.t_STRING_1[7]; 
      T     "DB_HR".ALLG.t_STRING_1[8]; 
      T     "DB_HR".ALLG.t_STRING_1[9]; 
      T     "DB_HR".ALLG.t_STRING_1[10]; 


// "DB_HR".ALLG.t_STRING_2  Byte: 820...822  (Vorzeichen-String "+")
      L     '+'; 
      T     "DB_HR".ALLG.t_STRING_2[1]; 



      U     "MX_ABST_Rundspeicher"; 
      SPB   PL1E; 
// "DB_PAL_NR".Platz[1].Prg_Name  Byte: 114...147  (32-stelliger Programm-Name)
      L     0; 
      T     DB214.DBB  115; 
      L     ' '; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[1]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[2]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[3]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[4]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[5]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[6]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[7]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[8]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[9]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[10]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[11]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[12]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[13]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[14]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[15]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[16]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[17]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[18]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[19]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[20]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[21]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[22]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[23]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[24]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[25]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[26]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[27]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[28]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[29]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[30]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[31]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[32]; 
      SPA   PL4E; 
PL1E: NOP   0; 

// "DB_PAL_NR".Platz[4].Prg_Name  Byte: 342...375  (32-stelliger Programm-Name)
      L     0; 
      T     DB214.DBB  343; 
      L     ' '; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[1]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[2]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[3]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[4]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[5]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[6]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[7]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[8]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[9]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[10]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[11]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[12]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[13]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[14]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[15]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[16]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[17]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[18]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[19]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[20]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[21]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[22]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[23]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[24]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[25]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[26]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[27]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[28]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[29]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[30]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[31]; 
      T     "DB_PAL_NR".Platz[4].Prg_Name[32]; 
PL4E: NOP   0; 
NETWORK
TITLE =Vor Beschreiben mit ROB-Daten PRG-Name löschen

      U     "DB_HR".vonROB.Bef_PW_FG; 
      U     "DB_CONFIG".ABST.ROB_mit_PRG_UEBERGABE; 
      SPBN  DEL; 
      L     32; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[1]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[2]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[3]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[4]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[5]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[6]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[7]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[8]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[9]; 
      T     "DB_PAL_NR".Platz[1].Prg_Name[10]; 
DEL:  NOP   0; 
NETWORK
TITLE =an___PalVerw: WS_TYP-Eintrag am Rüstplatz auf "Prg_Name"
//Mit PW-Freigabe durch den Roboter werden
//- Programm-Nr von Roboter in Pal-Verwaltung übernommen als STRING
//- Bestückungs-Situation in Pal-Verwaltung übernommen
//- Bearbeitungsstatus von Palette aktualisiert (Rohteil = 2)
//- Bei Betriebsart "Leerfahren" Bearbeitungsstatus (Leerpalette = 1)
//
//Vom Roboter kommt über die Schnittstelle ein INT 1...999999999
//Die PalettenVerwaltung benötigt einen STRING.
//INT wird auf STRING gewandelt, "+" wird gesucht, gelöscht und bereinigter STRING
//an PalettenVerwaltung übergeben.
//Dieser Vorgang erfolgt mit Flanke vom Roboter-Befehl "PW-Freigabe", wenn
//"ABST: Programm-Übergabe durch Roboter" freigeschaltet ist (DB700.DBX150.1 = 1)
      U(    ; 
      U     "DB_HR".vonROB.Bef_PW_FG; 
      U     "DB_CONFIG".ABST.ROB_mit_PRG_UEBERGABE; 
      UN    "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      SPBNB _053; 
      L     "DB_ROB_IF".IN.RPL.WS_Daten[1].WS_Typ; 
      T     "DB_HR".ALLG.t_DINT; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_053: U     BIE; 
      )     ; 
      SPBNB _057; 
      CALL "DI_STRNG" (
           I                        := "DB_HR".ALLG.t_DINT,
           RET_VAL                  := "DB_HR".ALLG.t_STRING_1);
_057: U     BIE; 
      =     L     45.0; 
      U     L     45.0; 
      UN    "MX_ABST_Rundspeicher"; 
      SPBNB _05f; 
      CALL "FC_SIEM_DELETE" (
           IN                       := "DB_HR".ALLG.t_STRING_1,
           L                        := 1,
           P                        := 1,
           RET_VAL                  := "DB_PAL_NR".Platz[1].Prg_Name);
_05f: U     BIE; 
      =     #dummy; 
      U     L     45.0; 
      U     "MX_ABST_Rundspeicher"; 
      SPBNB _061; 
      CALL "FC_SIEM_DELETE" (
           IN                       := "DB_HR".ALLG.t_STRING_1,
           L                        := 1,
           P                        := 1,
           RET_VAL                  := "DB_PAL_NR".Platz[4].Prg_Name);
_061: U     BIE; 
      =     #dummy; 
NETWORK
TITLE =an___PalVerw: WS_TYP-Eintrag am Rüstplatz auf "Teile-Nr"

P990: U     "DB_HR".vonROB.Bef_PW_FG; 
      U     "DB_CONFIG".ABST.ROB_mit_PRG_UEBERGABE; 
      U     "DB_PLC_MD_DB20".UDHex._52_Bit3_PrgAblageOrt; 
      SPBN  WS; 
NETWORK
TITLE =Eintrag der PalNr in Liste "DB-Teile-Nr" (Werkstück-Steuerung)
//
//
      L     0; 
      L     #t_PalNr; 
      ==I   ; 
      SPB   ETTL; 

      L     #t_PalNr; 
      L     -1; 
      +I    ; 
      L     32; 
      *D    ; 
      LAR1  ; 

      L     "DB_ROB_IF".IN.RPL.WS_Daten[1].WS_Typ; 
      AUF   "DB_TEILE_NR"; 
      T     DBD [AR1,P#0.0]; 

ETTL: NOP   0; 
NETWORK
TITLE =WS_TYP von PLCanROB = WS_TYP von Roboter gespiegelt
//Der vom Roboter gespiegelte WS_TYP ist identisch mit dem von der PLC 
//übergebenen.
//Nur bei Gleichheit erfolgt "Entlade-Freigabe"
WS:   L     "DB_ROB_IF".OUT.RPL.WS_Daten[1].WS_Typ; 
      L     "DB_ROB_IF".IN.RPL.WS_Daten[1].WS_Typ_gespiegelt; 
      ==D   ; 
      =     "DB_HR".ROB_Interface.WS_TYP_gleich; 
NETWORK
TITLE =Ablauf Spannstelle 1 entladen

      CALL "FC_DMC_ROB_Entladen" (
           EX_BEF_ROB_Entspannen    := "DB_ROB_IF".IN.Stelle[1].Bef_Entspannen,
           EX_MEL_DMC_SpSt_entsp    := "DB_ROB_IF".STAT.Stelle[1].entspannt,
           EX_MEL_DMC_Teil_niO      := #tx_RPL_STATUS_Defekt,//"DB_ROB_IF".OUT.Stelle[1].Teil_niO
           EX_MEL_DMC_Teil_ni_bearb := #tx_SpSt1_Teil_ni_bearb,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[1].Meldung_Entladen,
           EX_MEL_ROB_SpSt_sich_auf := "DB_ROB_IF".IN.Stelle[1].Meldung_SICHER_offen,
           EX_ABST_Sicher_Offen     := FALSE,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[1].KONF_mitSPH,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EAX_FRG_DMC_Entladen     := "DB_ROB_IF".OUT.Stelle[1].FG_Entladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[1].aktivieren_entspannen,
           EAX_BEF_DMC_SpSt_entsp   := "DB_HR".vonROB.Bef_St1_entspannen,
           EAX_MEL_DMC_entsp_oFehl  := "DB_ROB_IF".OUT.Stelle[1].entspannt_OHNE_Fehler,
           EAX_MEL_DMC_entsp_mFehl  := "DB_ROB_IF".OUT.Stelle[1].entspannt_MIT_Fehler,
           EAX_MEL_DMC_Teil_niO     := "DB_ROB_IF".OUT.Stelle[1].Teil_niO,
           EAX_MEL_DMC_Teil_ni_bear := "DB_ROB_IF".OUT.Stelle[1].Teil_nicht_bearbeitet);

NETWORK
TITLE =Ablauf Spannstelle 2 entladen

      CALL "FC_DMC_ROB_Entladen" (
           EX_BEF_ROB_Entspannen    := "DB_ROB_IF".IN.Stelle[2].Bef_Entspannen,
           EX_MEL_DMC_SpSt_entsp    := "DB_ROB_IF".STAT.Stelle[2].entspannt,
           EX_MEL_DMC_Teil_niO      := "DB_ROB_IF".OUT.Stelle[2].Teil_niO,//"DB_ROB_IF".STAT.Stelle[2].Teil_nicht_in_Ordnung
           EX_MEL_DMC_Teil_ni_bearb := #tx_SpSt2_Teil_ni_bearb,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[2].Meldung_Entladen,
           EX_MEL_ROB_SpSt_sich_auf := "DB_ROB_IF".IN.Stelle[2].Meldung_SICHER_offen,
           EX_ABST_Sicher_Offen     := FALSE,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[2].KONF_mitSPH,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EAX_FRG_DMC_Entladen     := "DB_ROB_IF".OUT.Stelle[2].FG_Entladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[2].aktivieren_entspannen,
           EAX_BEF_DMC_SpSt_entsp   := "DB_HR".vonROB.Bef_St2_entspannen,
           EAX_MEL_DMC_entsp_oFehl  := "DB_ROB_IF".OUT.Stelle[2].entspannt_OHNE_Fehler,
           EAX_MEL_DMC_entsp_mFehl  := "DB_ROB_IF".OUT.Stelle[2].entspannt_MIT_Fehler,
           EAX_MEL_DMC_Teil_niO     := "DB_ROB_IF".OUT.Stelle[2].Teil_niO,
           EAX_MEL_DMC_Teil_ni_bear := "DB_ROB_IF".OUT.Stelle[2].Teil_nicht_bearbeitet);

NETWORK
TITLE =Ablauf Spannstelle 3 entladen

      CALL "FC_DMC_ROB_Entladen" (
           EX_BEF_ROB_Entspannen    := "DB_ROB_IF".IN.Stelle[3].Bef_Entspannen,
           EX_MEL_DMC_SpSt_entsp    := "DB_ROB_IF".STAT.Stelle[3].entspannt,
           EX_MEL_DMC_Teil_niO      := "DB_ROB_IF".OUT.Stelle[3].Teil_niO,//"DB_ROB_IF".STAT.Stelle[3].Teil_nicht_in_Ordnung
           EX_MEL_DMC_Teil_ni_bearb := #tx_SpSt3_Teil_ni_bearb,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[3].Meldung_Entladen,
           EX_MEL_ROB_SpSt_sich_auf := "DB_ROB_IF".IN.Stelle[3].Meldung_SICHER_offen,
           EX_ABST_Sicher_Offen     := FALSE,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[3].KONF_mitSPH,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EAX_FRG_DMC_Entladen     := "DB_ROB_IF".OUT.Stelle[3].FG_Entladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[3].aktivieren_entspannen,
           EAX_BEF_DMC_SpSt_entsp   := "DB_HR".vonROB.Bef_St3_entspannen,
           EAX_MEL_DMC_entsp_oFehl  := "DB_ROB_IF".OUT.Stelle[3].entspannt_OHNE_Fehler,
           EAX_MEL_DMC_entsp_mFehl  := "DB_ROB_IF".OUT.Stelle[3].entspannt_MIT_Fehler,
           EAX_MEL_DMC_Teil_niO     := "DB_ROB_IF".OUT.Stelle[3].Teil_niO,
           EAX_MEL_DMC_Teil_ni_bear := "DB_ROB_IF".OUT.Stelle[3].Teil_nicht_bearbeitet);

NETWORK
TITLE =Ablauf Spannstelle 4 entladen

      CALL "FC_DMC_ROB_Entladen" (
           EX_BEF_ROB_Entspannen    := "DB_ROB_IF".IN.Stelle[4].Bef_Entspannen,
           EX_MEL_DMC_SpSt_entsp    := "DB_ROB_IF".STAT.Stelle[4].entspannt,
           EX_MEL_DMC_Teil_niO      := "DB_ROB_IF".OUT.Stelle[4].Teil_niO,//"DB_ROB_IF".STAT.Stelle[4].Teil_nicht_in_Ordnung
           EX_MEL_DMC_Teil_ni_bearb := #tx_SpSt4_Teil_ni_bearb,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[4].Meldung_Entladen,
           EX_MEL_ROB_SpSt_sich_auf := "DB_ROB_IF".IN.Stelle[4].Meldung_SICHER_offen,
           EX_ABST_Sicher_Offen     := FALSE,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[4].KONF_mitSPH,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EAX_FRG_DMC_Entladen     := "DB_ROB_IF".OUT.Stelle[4].FG_Entladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[4].aktivieren_entspannen,
           EAX_BEF_DMC_SpSt_entsp   := "DB_HR".vonROB.Bef_St4_entspannen,
           EAX_MEL_DMC_entsp_oFehl  := "DB_ROB_IF".OUT.Stelle[4].entspannt_OHNE_Fehler,
           EAX_MEL_DMC_entsp_mFehl  := "DB_ROB_IF".OUT.Stelle[4].entspannt_MIT_Fehler,
           EAX_MEL_DMC_Teil_niO     := "DB_ROB_IF".OUT.Stelle[4].Teil_niO,
           EAX_MEL_DMC_Teil_ni_bear := "DB_ROB_IF".OUT.Stelle[4].Teil_nicht_bearbeitet);

NETWORK
TITLE =Meldung ALK für Spannstelle 1 OK (Auswertung ALK1+ALK2)



      U     #EX_RPL_ALK1_OK; 
      U(    ; 
      O     #EX_RPL_ALK2_OK; 
      ON    "DB_PLC_MD_DB20".UDHex._29_Bit4_St1_ALK1_ALK2; 
      )     ; 
      =     #t_ALK_OK; 
NETWORK
TITLE =Ablauf Spannstelle 1 beladen

      CALL "FC_DMC_ROB_Beladen" (
           EX_BEF_ROB_spannen_oCTRL := "DB_ROB_IF".IN.Stelle[1].Bef_Spannen_OHNE_CTRL,
           EX_BEF_ROB_spannen_mCTRL := "DB_ROB_IF".IN.Stelle[1].Bef_Spannen_MIT_CTRL,
           EX_BEF_ROB_leerfahren    := "DB_ROB_IF".IN.gesamt.BA_Leerfahren,
           EX_MEL_DMC_SpSt_gesp     := "DB_ROB_IF".STAT.Stelle[1].gespannt,
           EX_MEL_ROB_SpSt_beladen  := "DB_ROB_IF".IN.Stelle[1].Meldung_Beladen,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[1].Meldung_Entladen,
           EX_RPL_Status_Leerpal    := #tx_RPL_STATUS_Leerpal,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[1].KONF_mitSPH,
           EX_Auflagenkontr_aktiv   := #tx_SpSt1_CTRL_aktiv,
           EX_Auflagenkontr_ok      := #t_ALK_OK,//#EX_RPL_ALK1_OK
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EX_Auflagenkontr_FM      := "DB_FEHLERMELDUNG".MELDUNG3._700500_SpH,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EAX_FRG_DMC_Beladen      := "DB_ROB_IF".OUT.Stelle[1].FG_Beladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[1].aktivieren_spannen,
           EAX_BEF_DMC_SpSt_spannen := "DB_HR".vonROB.Bef_St1_spannen,
           EAX_MEL_DMC_gesp_oFehl   := "DB_ROB_IF".OUT.Stelle[1].gepannt_OHNE_Fehler,
           EAX_MEL_DMC_gesp_mFehl   := "DB_ROB_IF".OUT.Stelle[1].gepannt_MIT_Fehler);

NETWORK
TITLE =Ablauf Spannstelle 2 beladen

      CALL "FC_DMC_ROB_Beladen" (
           EX_BEF_ROB_spannen_oCTRL := "DB_ROB_IF".IN.Stelle[2].Bef_Spannen_OHNE_CTRL,
           EX_BEF_ROB_spannen_mCTRL := "DB_ROB_IF".IN.Stelle[2].Bef_Spannen_MIT_CTRL,
           EX_BEF_ROB_leerfahren    := "DB_ROB_IF".IN.gesamt.BA_Leerfahren,
           EX_MEL_DMC_SpSt_gesp     := "DB_ROB_IF".STAT.Stelle[2].gespannt,
           EX_MEL_ROB_SpSt_beladen  := "DB_ROB_IF".IN.Stelle[2].Meldung_Beladen,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[2].Meldung_Entladen,
           EX_RPL_Status_Leerpal    := #tx_RPL_STATUS_Leerpal,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[2].KONF_mitSPH,
           EX_Auflagenkontr_aktiv   := #tx_SpSt1_CTRL_aktiv,
           EX_Auflagenkontr_ok      := #EX_RPL_ALK2_OK,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EX_Auflagenkontr_FM      := "DB_FEHLERMELDUNG".MELDUNG3._700501_SpH,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EAX_FRG_DMC_Beladen      := "DB_ROB_IF".OUT.Stelle[2].FG_Beladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[2].aktivieren_spannen,
           EAX_BEF_DMC_SpSt_spannen := "DB_HR".vonROB.Bef_St2_spannen,
           EAX_MEL_DMC_gesp_oFehl   := "DB_ROB_IF".OUT.Stelle[2].gepannt_OHNE_Fehler,
           EAX_MEL_DMC_gesp_mFehl   := "DB_ROB_IF".OUT.Stelle[2].gepannt_MIT_Fehler);

NETWORK
TITLE =Ablauf Spannstelle 3 beladen

      CALL "FC_DMC_ROB_Beladen" (
           EX_BEF_ROB_spannen_oCTRL := "DB_ROB_IF".IN.Stelle[3].Bef_Spannen_OHNE_CTRL,
           EX_BEF_ROB_spannen_mCTRL := "DB_ROB_IF".IN.Stelle[3].Bef_Spannen_MIT_CTRL,
           EX_BEF_ROB_leerfahren    := "DB_ROB_IF".IN.gesamt.BA_Leerfahren,
           EX_MEL_DMC_SpSt_gesp     := "DB_ROB_IF".STAT.Stelle[3].gespannt,
           EX_MEL_ROB_SpSt_beladen  := "DB_ROB_IF".IN.Stelle[3].Meldung_Beladen,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[3].Meldung_Entladen,
           EX_RPL_Status_Leerpal    := #tx_RPL_STATUS_Leerpal,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[3].KONF_mitSPH,
           EX_Auflagenkontr_aktiv   := #tx_SpSt1_CTRL_aktiv,
           EX_Auflagenkontr_ok      := #EX_RPL_ALK3_OK,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EX_Auflagenkontr_FM      := "DB_FEHLERMELDUNG".MELDUNG3._700502_SpH,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EAX_FRG_DMC_Beladen      := "DB_ROB_IF".OUT.Stelle[3].FG_Beladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[3].aktivieren_spannen,
           EAX_BEF_DMC_SpSt_spannen := "DB_HR".vonROB.Bef_St3_spannen,
           EAX_MEL_DMC_gesp_oFehl   := "DB_ROB_IF".OUT.Stelle[3].gepannt_OHNE_Fehler,
           EAX_MEL_DMC_gesp_mFehl   := "DB_ROB_IF".OUT.Stelle[3].gepannt_MIT_Fehler);

NETWORK
TITLE =Ablauf Spannstelle 4 beladen

      CALL "FC_DMC_ROB_Beladen" (
           EX_BEF_ROB_spannen_oCTRL := "DB_ROB_IF".IN.Stelle[4].Bef_Spannen_OHNE_CTRL,
           EX_BEF_ROB_spannen_mCTRL := "DB_ROB_IF".IN.Stelle[4].Bef_Spannen_MIT_CTRL,
           EX_BEF_ROB_leerfahren    := "DB_ROB_IF".IN.gesamt.BA_Leerfahren,
           EX_MEL_DMC_SpSt_gesp     := "DB_ROB_IF".STAT.Stelle[4].gespannt,
           EX_MEL_ROB_SpSt_beladen  := "DB_ROB_IF".IN.Stelle[4].Meldung_Beladen,
           EX_MEL_ROB_SpSt_entladen := "DB_ROB_IF".IN.Stelle[4].Meldung_Entladen,
           EX_RPL_Status_Leerpal    := #tx_RPL_STATUS_Leerpal,
           EX_Spannst_konfiguriert  := "DB_PV_SpH".SpH[1].Stelle[4].KONF_mitSPH,
           EX_Auflagenkontr_aktiv   := #tx_SpSt1_CTRL_aktiv,
           EX_Auflagenkontr_ok      := #EX_RPL_ALK4_OK,
           EX_RPL_Tuer_offen        := "DB_ROB_IF".OUT.RPL.RPL_Tuer_offen,
           EX_Auflagenkontr_FM      := "DB_FEHLERMELDUNG".MELDUNG3._700503_SpH,
           EX_RPL_Stat_1_Leerpalett := #tx_RPL_STATUS_Leerpal,
           EX_RPL_Stat_2_Rohteil    := #tx_RPL_STATUS_Rohteil,
           EX_RPL_Stat_3_inArbeit   := #tx_RPL_STATUS_inArbeit,
           EX_RPL_Stat_4_Fertig     := #tx_RPL_STATUS_Fertigteil,
           EX_RPL_Stat_5_Defekt     := #tx_RPL_STATUS_Defekt,
           EAX_FRG_DMC_Beladen      := "DB_ROB_IF".OUT.Stelle[4].FG_Beladen,
           EAX_AKT_DMC_Spannstelle  := "DB_ROB_IF".STAT.Stelle[4].aktivieren_spannen,
           EAX_BEF_DMC_SpSt_spannen := "DB_HR".vonROB.Bef_St4_spannen,
           EAX_MEL_DMC_gesp_oFehl   := "DB_ROB_IF".OUT.Stelle[4].gepannt_OHNE_Fehler,
           EAX_MEL_DMC_gesp_mFehl   := "DB_ROB_IF".OUT.Stelle[4].gepannt_MIT_Fehler);

NETWORK
TITLE =Übernahme FG-Status bei Umschalten auf Roboter-Beladung
//1) Mit Schlüsselschalter Umschalten auf Roboter-Beladung
//   aktueller Status von PW-Freigabe bleibt erhalten.
//
//2) Auf Schlüsselschalterstellung: Roboterbeladung
//a) Setzen der Freigabe erfolgt nur durch Roboter.
//b) Rücksetzen der Freigabe erfolgt mit Flanke PW_in_GRST
//c) Öffnen des Schutzzaunes unterdrückt PW-Freigabe, d.h nach Schließen des
//   Schutzzaunes muss PW-Freigabe wieder da sein.
//d) Nach Sondersituationen wie NOTAUS, Spannung_AUS etc. erfolgt RESET für PW-
//   Freigabe. Wenn für Roboterbetrieb eine PW-Freigabe vorhanden sein soll, muss
//   - Roboterbetrieb abgewählt
//   - PW-Freigabe aktiviert und
//   - RoboterBetrieb wieder angewählt werden.
      CLR   ; 
      =     "DB_HR".ROB_Interface.PW_Freigabe; 

NETWORK
TITLE =Bosch-Rexroth-Daten-Erweiterung (2-Teile auf 1er-Spannstelle)

      U     "DB_PLC_MD_DB20".UDHex._52_Bit4_BR_ERWEITERUNG; 
      SPBN  E416; 

      CALL "FC_ROB_RPL_STAT_ERW" (
           i_MEL_ROB_T1_entladen    := "DB_ROB_IF".IN.gesamt.ST1_T1_entladen,
           i_MEL_ROB_T1_beladen     := "DB_ROB_IF".IN.gesamt.ST1_T1_beladen,
           i_MEL_ROB_T2_entladen    := "DB_ROB_IF".IN.gesamt.ST1_T2_entladen,
           i_MEL_ROB_T2_beladen     := "DB_ROB_IF".IN.gesamt.ST1_T2_beladen,
           i_BEF_ROB_PWFG           := "DB_ROB_IF".IN.RPL.Bef_PW_Freigabe,
           i_St1_Entlade_FG         := "DB_ROB_IF".OUT.Stelle[1].FG_Entladen,
           i_St1_Belade_FG          := "DB_ROB_IF".OUT.Stelle[1].FG_Beladen,
           i_PW_aktiv               := "DB_ROB_IF".OUT.RPL.PW_aktiv,
           o_Be_Entlade_FG          := "DB_ROB_IF".OUT.gesamt.Lade_FG_extEinheit,
           o_ROB_T1_belegt          := "DB_ROB_IF".OUT.gesamt.STAT_Teil_1_belegt,
           o_ROB_T1_bearbeitet      := "DB_ROB_IF".OUT.gesamt.STAT_Teil_1_bearbeitet,
           o_ROB_T1_niO             := "DB_ROB_IF".OUT.gesamt.STAT_Teil_1_niO,
           o_ROB_T2_belegt          := "DB_ROB_IF".OUT.gesamt.STAT_Teil_2_belegt,
           o_ROB_T2_bearbeitet      := "DB_ROB_IF".OUT.gesamt.STAT_Teil_2_bearbeitet,
           o_ROB_T2_niO             := "DB_ROB_IF".OUT.gesamt.STAT_Teil_2_niO,
           io_RPL_T1_belegt         := "DB_PV_SpH".SpH_Erw[1].Stelle[1].Status.T1_belegt,
           io_RPL_T1_bearbeitet     := "DB_PV_SpH".SpH_Erw[1].Stelle[1].Status.T1_bearbeitet,
           io_RPL_T1_NIO            := "DB_PV_SpH".SpH_Erw[1].Stelle[1].Status.T1_niO,
           io_RPL_T2_belegt         := "DB_PV_SpH".SpH_Erw[1].Stelle[1].Status.T2_belegt,
           io_RPL_T2_bearbeitet     := "DB_PV_SpH".SpH_Erw[1].Stelle[1].Status.T2_bearbeitet,
           io_RPL_T2_NIO            := "DB_PV_SpH".SpH_Erw[1].Stelle[1].Status.T2_niO);

E416: NOP   0; 
NETWORK
TITLE =Ende

      U     #dummy; 
      =     #dummy; 
END_FUNCTION

