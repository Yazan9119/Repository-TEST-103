FUNCTION "FC_DMTDC" : VOID
TITLE =
//$Revision: 1.47 $
//$Date: 2008/05/16 07:36:16CEST $
//$Author: hgc $
//$ProjectRevision: Last Checkpoint: 1.223 $
{ S7_language := '7(1) Deutsch (Deutschland)  27.03.2008  07:31:59' }
AUTHOR : STH
NAME : TDS
VERSION : 0.1


VAR_INPUT
  E_T_IN : BOOL ;	//Taste T-IN
  E_T_OUT : BOOL ;	//Taste T-Out
  E_Blink : BOOL ;	//Blinkmerker
  E_Platz_Nr : INT ;	//Platznummer an Entladestelle
END_VAR
VAR_IN_OUT
  A_Lampe_T_IN : BOOL ;	
  A_Anf_MagPos_lesen : BOOL ;	//A_Anf_Magazin
  A_Mag_sperren : BOOL ;	
  EA_Done_MagPos_lesen : BOOL ;	
  A_Quit_Beladen : BOOL ;	
  A_Abbr_Beladen : BOOL ;	
  S_SKZ : INT ;	
  S_Lampe_T_IN_schnell : BOOL ;	
  S_Lampe_T_OUT_schnell : BOOL ;	
  Anf_TDS_lesen_beladen : BOOL ;	//M182.1
  Done_TDS_lesen_beladen : BOOL ;	
  Anf_TDS_lesen_entladen : BOOL ;	
  Done_TDS_lesen_entladen : BOOL ;	//M182.4
  Anf_TDS_schreib_entladen : BOOL ;	
  Done_TDS_schrei_entladen : BOOL ;	//M182.5
  Anf_NC_schreiben_beladen : BOOL ;	
  Done_NC_schreiben_belade : BOOL ;	//M182.2
  Anf_NC_lesen_entladen : BOOL ;	
  Done_NC_lesen_entladen : BOOL ;	//M182.3
  Anf_NC_loeschen : BOOL ;	
  Done_NC_loeschen : BOOL ;	
  Start_DatVert_schreiben : BOOL ;	//M180.0
  Start_DatVert_lesen : BOOL ;	//M180.1
  Start_DatVert_loeschen : BOOL ;	//M180.2
  Start_DatVert_loes_Err : BOOL ;	//M180.3
  Req_DatVert : BOOL ;	//M181.1
  Req_DatVert_FP : BOOL ;	//M181.0
  Err_DatVert : BOOL ;	//M181.2
  Done_DatVert : BOOL ;	//M181.3
  Activ_DatVert : BOOL ;	//M181.4
  Bytezaehler_lesen : WORD ;	
  Bytezaehler_schreiben : WORD ;	
  Hilfsmerker_lesen : BOOL ;	
  Hilfsmerker_schreiben : BOOL ;	
  Anf_Konvert_beladen : BOOL ;	
  Done_Konvert_beladen : BOOL ;	
  Anf_Konvert_entladen : BOOL ;	
  Done_Konvert_entladen : BOOL ;	
  Anf_Konvert_vergleichen : BOOL ;	
  Done_Konvert_vergleichen : BOOL ;	
  Done_Konverter : BOOL ;	
END_VAR
VAR_TEMP
  MagazinNr : BYTE ;	
  Beladestelle : BYTE ;	
  maxAnzSchneiden : BYTE ;	
  T_TIN_TOUT_Freigabe : BOOL ;	//Freigabe TIN TOUT Taste
  Request_Sperre : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =Anwahl TDS Balluff oder Bilz

      L     "DB_PLC_MD_DB20".UDInt._013_ANWAHL_TDS; 
      L     2; 
      ==I   ; 
      SPB   BILZ; 

// Anwahl TDS-System BALLUFF

      SET   ; 
      =     "M_TDS_BALLUFF_aktiv"; 
      SPA   BALL; 

// Anwahl TDS-System Bilz 

BILZ: SET   ; 
      =     "M_TDS_BILZ_aktiv"; 

BALL: NOP   0; 
NETWORK
TITLE =Definitionen

      U     "DB_KONFIG_DMTDC".Option.MD_Bit0; // 1: Löschen des Beladewerkzeugs in Beladeliste bei Fehler/Abbruch
      =     "DI_FB_WZV_Komm".MDBit[0]; 
      U     "DB_KONFIG_DMTDC".Option.MD_Bit1; // 1: Anzahl der CC-Parameter ermitteln
      =     "DI_FB_WZV_Komm".MDBit[1]; 
      U     "DB_KONFIG_DMTDC".Option.MD_Bit2; // 1:Überwachungsdaten Verschleißwert verwenden
      =     "DI_FB_WZV_Komm".MDBit[2]; 
      U     "DB_KONFIG_DMTDC".Option.MD_Bit3; // 1:Mit Semaphoren arbeiten
      =     "DI_FB_WZV_Komm".MDBit[3]; 
      U     "DB_KONFIG_DMTDC".Option.MD_Bit4; // 1:Prüfen ob Wz beim anlegen vorhanden ist 
      =     "DI_FB_WZV_Komm".MDBit[4]; 
      =     "DI_FB_WZV_Komm".MDBit[5]; 
      U     "DB_KONFIG_DMTDC".Option.DM_Bit2; //Option Überwachungsdaten lesen
      =     "DB_WZV_DV".Ueberwachung_aktiv; // Überwachung aktiv


      U     "DB_KONFIG_DMTDC".Option.chip128Byte; 
      SPBN  aa1; 

      U     "M_TDS_BILZ_aktiv"; 
      SPB   aa10; 

      L     128; 
      SPA   aa11; 

aa10: L     120; 
aa11: T     DB224.DBW   12; //Chiplänge

aa1:  U     "DB_KONFIG_DMTDC".Option.chip256Byte; 
      SPBN  aa2; 
      L     256; 
      T     DB224.DBW   12; //Chiplänge

aa2:  U     "DB_KONFIG_DMTDC".Option.chip511Byte; 
      SPBN  aa3; 
      L     511; 
      T     DB224.DBW   12; //#Chiplänge

aa3:  U     "M_TDS_BILZ_aktiv"; //U     DB228.DBX    9.3
      U     "DB_KONFIG_DMTDC".Option.chip511Byte; 
      SPBN  aa4; 
      L     506; // 506 Byte  Max. Länge für Bilz Chip 1024
      T     DB224.DBW   12; //#Chiplänge


aa4:  L     DB224.DBW   12; //Chiplänge
      SLD   8; 
      T     DB224.DBW   14; //#temp1
      L     DB224.DBW   12; //Chiplänge
      SRD   8; 
      L     DB224.DBW   14; //#temp1
      OW    ; 
      T     DB224.DBW   16; //  #Chiplaengegedreht


// TDS angewaehlt

      L     "DB_PLC_MD_DB20".UDInt._013_ANWAHL_TDS; 
      L     0; 
      ==I   ; 
      SPBN  OK; 

      R     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      R     "DB_FEHLERMELDUNG".Meldung._702148_TDS_Wz_Name; // FM, Länge Werkzeugbezeichner nicht i.O.
      R     "DB_FEHLERMELDUNG".Meldung._702149_TDS_Anz_Schneide; // FM, Scheidenanzahl nicht i.O.
      R     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // FM, Falsches Werkzeug am Entladeplatz Bez.und Duplo nicht gleich
      R     "DB_FEHLERMELDUNG".Meldung._702151_TDS_Uebertrag; // FM, Übertragungsfehler TDS <-> Datenträger
      R     "DB_FEHLERMELDUNG".Meldung._702152_TDS_Betriebsber; // FM, TDS-Station nicht betriebsbereit
      R     "DB_FEHLERMELDUNG".Meldung._702153_TDS_Lesebereich; // FM, Wzg-Datenträger nicht im Lesebereich
      R     "DB_FEHLERMELDUNG".Meldung._702154_TDS_Platz_leer; // FM, Platz ist bereits leer
      R     "DB_FEHLERMELDUNG".Meldung._702155_TDS_BeladeFehl; // FM, Werkzeug ist bereits beladen
      R     "DB_FEHLERMELDUNG".Meldung._702156_TDS_PlatzFehl; // FM, Platz kann nicht beladen werden        
      R     "DB_FEHLERMELDUNG".Meldung._702147_TDS_KONV_ERROR1; 
      R     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      R     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      R     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 
      R     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 
      R     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 
      R     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 
      R     "DB_VGL_DMTDC".Softkeys.Status; 
      R     "DB_VGL_DMTDC".Softkeys.Daten_loeschen; 
      BEA   ; 

OK:   NOP   0; 

// Beim Format 4SFD02 die Werkzeuggrundorientierung aktivieren!!
      L     "DB_KONFIG_DMTDC".format_number; 
      L     11; 
      ==I   ; 
      SPBN  ndpv; 
      SET   ; 
      =     "DI_FB_WZV_Komm".MDBit[7]; 
      SPA   dpv; 
ndpv: CLR   ; 
      =     "DI_FB_WZV_Komm".MDBit[7]; 

// Beim Maschinentyp DMx160x müssen Halblätze rechts/links mit oben/unten vertauscht werden 
// und die Anwenderdaten 2 und 3 sind nicht vorhanden
dpv:  L     "DB_PLC_MD_DB20".UDInt._000_STANDORT_MASCHTYP; 
      L     3081; 
      ==I   ; 
      SPBN  a09; 

      L     73; 
      T     "DB_KONFIG_DMTDC".list[1].item.ziel; 
      L     75; 
      T     "DB_KONFIG_DMTDC".list[2].item.ziel; 

      L     1; 
      T     "DB_WZV_DV".Groesse_Links; 
      L     1; 
      T     "DB_WZV_DV".Groesse_Rechts; 

      L     0; 
      T     "DB_KONFIG_DMTDC".list[13].item.Funktion; 
      T     "DB_KONFIG_DMTDC".list[14].item.Funktion; 
      T     "DB_KONFIG_DMTDC".list[15].item.Funktion; 
      SPA   a10; 


a09:  NOP   0; 
      L     1; // Bei allen anderen Maschinen werden die Halbplätze oben und unten immer auf 1 geschrieben
      T     "DB_WZV_DV".Groesse_Oben; 
      L     1; 
      T     "DB_WZV_DV".Groesse_Unten; 
//Der Platztyp auch auf 1 da bei Kettenmagazinen immer nur Typ 1 vorhanden; nur wenn er Null ist
      L     0; 
      L     "DB_WZV_DV".Mag_Platz_Typ; 
      ==I   ; 
      SPBN  a10; 
      L     1; 
      T     "DB_WZV_DV".Mag_Platz_Typ; 

a10:  NOP   0; 

// Balluff Eingangs- und Ausgangswörter 160-189
      U     "M_TDS_BALLUFF_aktiv"; 
      SPBN  SBBI; 

      L     PEB  160; // Statusbyte Balluff
      T     DB224.DBB  118; // Eingangsbitleiste
      SPA   SBBA; 

// Eingangs- und Ausgangswörter 160-175

SBBI: L     PEB  161; // Statusbyte Bilz
      T     DB224.DBB  276; // Eingangsbitleiste Bilz

SBBA: L     10; 
      T     #maxAnzSchneiden; 

      L     1; 
      T     #MagazinNr; 

      L     2; 
      T     #Beladestelle; 

      O     "DB_FEHLERMELDUNG".Meldung._702148_TDS_Wz_Name; // FM, Länge Werkzeugbezeichner nicht i.O.
      O     "DB_FEHLERMELDUNG".Meldung._702149_TDS_Anz_Schneide; // FM, Scheidenanzahl nicht i.O.
      O     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // FM, Falsches Werkzeug am Entladeplatz Bez.und Duplo nicht gleich
      O     "DB_FEHLERMELDUNG".Meldung._702151_TDS_Uebertrag; // FM, Übertragungsfehler TDS <-> Datenträger
      O     "DB_FEHLERMELDUNG".Meldung._702152_TDS_Betriebsber; // FM, TDS-Station nicht betriebsbereit
      O     "DB_FEHLERMELDUNG".Meldung._702153_TDS_Lesebereich; // FM, Wzg-Datenträger nicht im Lesebereich
      O     "DB_FEHLERMELDUNG".Meldung._702154_TDS_Platz_leer; // FM, Platz ist bereits leer
      O     "DB_FEHLERMELDUNG".Meldung._702155_TDS_BeladeFehl; // FM, Werkzeug ist bereits beladen
      O     "DB_FEHLERMELDUNG".Meldung._702156_TDS_PlatzFehl; // FM, Platz kann nicht beladen werden        
      O     "DB_FEHLERMELDUNG".Meldung._702147_TDS_KONV_ERROR1; 
      O     "DB_FEHLERMELDUNG".Meldung4._702416_TDS_KONV_ERROR3; 
      O     "DB_FEHLERMELDUNG".Meldung4._702420_TDS_KONV_ERROR7; 
      O     "DB_FEHLERMELDUNG".Meldung4._702419_TDS_KONV_ERROR6; 
      O     "DB_FEHLERMELDUNG".Meldung4._702418_TDS_KONV_ERROR5; 
      O     "DB_FEHLERMELDUNG".Meldung4._702417_TDS_KONV_ERROR4; 
      O     "DB_FEHLERMELDUNG".Meldung4._702415_TDS_KONV_ERROR2; 
      O     "DB_FEHLERMELDUNG".Meldung4._702438_TDS_KONV_ERROR8; // 702438 "MEL, Keine Werte (DB229/Wizzard)od. Pos_length/radiusDB228 eingetragen"
      O     "DB_FEHLERMELDUNG".Meldung4._702439_TDS_KONV_ERROR9; //702439 "MEL, _TDS_KONV_ERROR9"
      O     "DB_FEHLERMELDUNG".Meldung4._702440_TDS_KONV_ERROR10; //702439 "MEL, _TDS_KONV_ERROR10"
      =     #S_Lampe_T_IN_schnell; 
      =     #S_Lampe_T_OUT_schnell; 
      =     #Request_Sperre; 


      UN    "M_WZW_Aktiv"; 
      UN    "M_MAG_Laeuft"; 
      UN    "MX_BeEntladen_Aktiv"; 
      UN    "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      =     #T_TIN_TOUT_Freigabe; 

      U     #E_T_IN; 
      FP    DB224.DBX   10.0; 
      U     #T_TIN_TOUT_Freigabe; 
      =     DB224.DBX   10.1; 
      SPB   abc; 

      O     #E_T_OUT; 
      FP    DB224.DBX   10.2; 
      U     #T_TIN_TOUT_Freigabe; 
      =     DB224.DBX   10.3; 
      SPB   abc; 

      U     "M_Request_TDS_bel"; 
      FP    "M_FP_Request_bel"; 
      UN    #Request_Sperre; 
      =     DB224.DBX   10.1; 

      U     "M_Request_TDS"; 
      FP    "M_FP_Request"; 
      UN    #Request_Sperre; 
      =     DB224.DBX   10.3; 

abc:  L     #S_SKZ; 
      L     0; 
      <>I   ; 
      =     "MX_TDS_Aktiv"; // TDS - Beladen oder Entladen laeuft

NETWORK
TITLE =Reset / Abbruch / beendet

      UN    "M_1_ter_OB1_Zyklus"; // erster Paketdurchlauf *
      SPB   EKON; 

// Rücksetzen Datenverteiler

      R     "DI_FB_WZV_Komm".Req; 
      R     "DI_FB_WZV_Komm".Done; 
      R     "DI_FB_WZV_Komm".Error; 
      R     #Req_DatVert; // FB94 Request

      L     0; 
      T     "DI_FB_WZV_Komm".StateFB94gespeichert; 
      T     "DI_FB_WZV_Komm".StateFB2_3_4_gesp; 
      T     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste Balluff
      T     DB224.DBB  270; // gespeicherte Ausgabe-Bitleiste Bilz
      SPA   INI; 

EKON: NOP   0; 

// Abbruch durch Bediener oder Fehler


      U     #S_Lampe_T_IN_schnell; // Fehler steht
      U     "M_Fehler_Quit_Taste"; 
      O     ; 
      U     "M_Ruecksetze_Fehler"; // MSST: Taste Reset
// U     "M_Handbetrieb"             // BA Hand
      O     ; 
      U(    ; 
      U     "M_Error_Beladen"; 
      U     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ungleich
      O     ; 
      U     #S_Lampe_T_IN_schnell; 
      U     #S_Lampe_T_OUT_schnell; 
      UN    "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ungleich
      UN    "M_TDS_vgl"; 
      )     ; 
      U     #E_T_IN; // Taste T_Out
      U     #E_T_OUT; 
      SPBN  ERST; // EABR

INI:  L     0; 
      T     #S_SKZ; 
      T     #Bytezaehler_schreiben; 

      T     "DB_TDS".SKZ_Vergleich; 
      R     #Start_DatVert_schreiben; // Start Datenverteiler schreiben von TDS
      R     #Start_DatVert_lesen; // Start Datenverteiler lesen von TDS
      R     #Start_DatVert_loeschen; // Start Datenverteiler loeschen beim Entladen
      R     #Start_DatVert_loes_Err; // Magazinposition lesen für TDS
//      R     #Req_DatVert                // FB94 Request                //wenn nicht auskommentiert und bei Beladen abgebrochen
//  WZ wird nicht aus Werkzeugliste gelöscht, da req. zurückgesetzt

      R     #Anf_TDS_lesen_beladen; 
      R     #Done_TDS_lesen_beladen; 
      R     #Anf_TDS_schreib_entladen; 
      R     #Done_TDS_schrei_entladen; 
      R     #Anf_TDS_lesen_entladen; 
      R     #Done_TDS_lesen_entladen; 
      R     #Anf_TDS_schreib_entladen; 
      R     #Done_TDS_schrei_entladen; 
      R     #Anf_NC_schreiben_beladen; 
      R     #Done_NC_schreiben_belade; 
      R     #Anf_NC_lesen_entladen; 
      R     #Done_NC_lesen_entladen; 
      R     #Anf_NC_loeschen; 
      R     #Done_NC_loeschen; 
      R     #Anf_Konvert_beladen; 
      R     #Done_Konvert_beladen; 
      R     #Done_Konvert_entladen; 
      R     #Anf_Konvert_entladen; 
      R     #Anf_Konvert_vergleichen; 
      R     #Done_Konvert_vergleichen; 
      R     "M_tds_write_last_part"; 
      R     "M_tds_lesen_last_part"; 
      R     "M_WZ_Sperren_REQUEST"; 
      R     "M_WZ_Sperren_DONE"; 
      R     "M_WZ_Sperren_ERROR"; 
      R     "M_TDS_vgl"; 

      R     "DB_FEHLERMELDUNG".Meldung._702148_TDS_Wz_Name; // FM, Länge Werkzeugbezeichner nicht i.O.
      R     "DB_FEHLERMELDUNG".Meldung._702149_TDS_Anz_Schneide; // FM, Scheidenanzahl nicht i.O.
      R     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // FM, Falsches Werkzeug am Entladeplatz Bez.und Duplo nicht gleich
      R     "DB_FEHLERMELDUNG".Meldung._702151_TDS_Uebertrag; // FM, Übertragungsfehler TDS <-> Datenträger
      R     "DB_FEHLERMELDUNG".Meldung._702152_TDS_Betriebsber; // FM, TDS-Station nicht betriebsbereit
      R     "DB_FEHLERMELDUNG".Meldung._702153_TDS_Lesebereich; // FM, Wzg-Datenträger nicht im Lesebereich
      R     "DB_FEHLERMELDUNG".Meldung._702154_TDS_Platz_leer; // FM, Platz ist bereits leer
      R     "DB_FEHLERMELDUNG".Meldung._702155_TDS_BeladeFehl; // FM, Werkzeug ist bereits beladen
      R     "DB_FEHLERMELDUNG".Meldung._702156_TDS_PlatzFehl; // FM, Platz kann nicht beladen werden        
      R     "DB_FEHLERMELDUNG".Meldung._702147_TDS_KONV_ERROR1; 
      R     "DB_FEHLERMELDUNG".Meldung4._702416_TDS_KONV_ERROR3; 
      R     "DB_FEHLERMELDUNG".Meldung4._702420_TDS_KONV_ERROR7; 
      R     "DB_FEHLERMELDUNG".Meldung4._702419_TDS_KONV_ERROR6; 
      R     "DB_FEHLERMELDUNG".Meldung4._702418_TDS_KONV_ERROR5; 
      R     "DB_FEHLERMELDUNG".Meldung4._702417_TDS_KONV_ERROR4; 
      R     "DB_FEHLERMELDUNG".Meldung4._702415_TDS_KONV_ERROR2; 
      R     "DB_FEHLERMELDUNG".Meldung4._702438_TDS_KONV_ERROR8; // 702438 "MEL, Keine Werte (DB229/Wizzard)od. Pos_length/radiusDB228 eingetragen"
      R     "DB_FEHLERMELDUNG".Meldung4._702439_TDS_KONV_ERROR9; //702439 "MEL, _TDS_KONV_ERROR9"
      R     "DB_FEHLERMELDUNG".Meldung4._702440_TDS_KONV_ERROR10; //702439 "MEL, _TDS_KONV_ERROR10"
      R     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      R     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      R     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 
      R     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 
      R     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 
      R     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 

      L     0; 
      T     "DB_TDS".Schritt; // Schrittzähler
      T     DB224.DBB  115; // Testbits
      T     DB224.DBD  130; // Fehlerstatus FB94 gespeichert
      T     DB224.DBB  127; // Fehlerstatus Datenübertragung
      T     "DB_TDS".Err_Code_FB94; // Fehlerstatus FB94 gespeichert
      T     "DB_TDS".Fehlernummer_IN; // Fehlernummer Bilz

      R     "M_Request_TDS"; 
      R     "M_TDS_WZ_NC_DELET"; 
      R     "M_FP_Request"; 
      R     "M_Request_TDS_bel"; 
      R     "M_FP_Request_bel"; 
      R     "M_TDS_RUNS"; 
      R     "M_Request_FB228"; 
      R     "M_DONE_FB228"; 
      R     "M_DONE_TNR_LESEN"; 
      R     "M_FP_ANF_FB228"; 
      R     "M_Error_Beladen"; 

// Grundstellung TDS Balluff/Bilz

      U     "M_TDS_BILZ_aktiv"; 
      SPB   GSBI; 
      L     2#100; // GR-Bit: Grundstellung  Bit 2
      T     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste Balluff
      T     PAB  160; // Statusbyte Balluff
      SPA   ERST; 

GSBI: L     2#100; // Reset-Bit Grundstellung Bit 2
      T     DB224.DBB  270; // gespeicherte Ausgabe-Bitleiste Bilz
      T     PAB  161; // Statusbyte BILZ


// Rücksetzen Grundstellungs-/Resetbit

ERST: U     "M_TDS_BALLUFF_aktiv"; // TDS BALLUFF
      U(    ; 
      U     "DB_TDS".B_in_BB; // Bit 7: BB-Bit: Betriebsbereit 
      ON    "DB_TDS".B_out_GR; // GR-Bit: Grundstellung
      )     ; 
      SPB   ERGS; 

      U     "M_TDS_BILZ_aktiv"; // TDS BILZ
      U(    ; 
      U     "DB_TDS".Statusbyte_IN_ON; // Bit 7: ON-Bit: Betriebsbereit 
      ON    "DB_TDS".Statusbyte_OUT_RESET; // RESET-Bit: Grundstellung
      )     ; 
      SPB   ERGS; 

      U     "M_TDS_BALLUFF_aktiv"; // TDS BALLUFF
      SPBN  RRBI; 
      R     "DB_TDS".B_out_GR; // Rücksetzen GR-Bit: Grundstellung
      L     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste
      T     PAB  160; // Statusbyte Balluff
      SPA   ERGS; 

RRBI: R     "DB_TDS".Statusbyte_OUT_RESET; // Rücksetzen Reset-Bit: Grundstellung
      L     DB224.DBB  270; // gespeicherte Ausgabe-Bitleiste
      T     PAB  161; // Statusbyte BILZ

ERGS: NOP   0; 
NETWORK
TITLE =Wizzard Hilfe Menue Status 

      O     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      O     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      O     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 
      O     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 
      O     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 
      O     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 
      O     "DB_VGL_DMTDC".Softkeys.Daten_loeschen; 
      =     "DB_VGL_DMTDC".Softkeys.Status; 

NETWORK
TITLE =Beladen mit TDS

      U     DB224.DBX   10.1; //E_T_IN
      U(    ; 
      L     #S_SKZ; 
      L     0; 
      ==I   ; 
      )     ; 
      SPBN  x101; 
      U     "DB_PLC_MD_DB20".UDHex._15_BIT7_Konf_TDS_Belade; 
      O     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPBN  oles; 
      L     101; 
      T     #S_SKZ; 
      R     "DB_TDS".E_T_IN; 
      SPA   x101; 
oles: L     1; 
      T     #S_SKZ; 
      R     "DB_TDS".E_T_IN; 

x101: L     #S_SKZ; 
      L     101; 
      ==I   ; 
      SPBN  x102; 
      R     #EA_Done_MagPos_lesen; 
      S     #A_Anf_MagPos_lesen; 
      S     #A_Mag_sperren; 
      L     102; 
      T     #S_SKZ; 

x102: L     #S_SKZ; 
      L     102; 
      ==I   ; 
      SPBN  x1; 
      U     #EA_Done_MagPos_lesen; 
      SPBN  x1; 
      L     #E_Platz_Nr; 
      T     DB224.DBW   96; 

      R     #EA_Done_MagPos_lesen; 
      L     1; 
      T     #S_SKZ; 

// Start TDS lesen zum Beladen
x1:   L     #S_SKZ; 
      L     1; 
      ==I   ; 
      SPBN  x2; 
      S     #Anf_TDS_lesen_beladen; 
      L     2; 
      T     #S_SKZ; 

// Warten auf TDS gelesen
x2:   L     #S_SKZ; 
      L     2; 
      ==I   ; 
      SPBN  x50; 
      U     #Done_TDS_lesen_beladen; 
      SPBN  x50; 
      R     #Anf_TDS_lesen_beladen; 
      R     #Done_TDS_lesen_beladen; 

      L     50; 
      T     #S_SKZ; 

x50:  L     #S_SKZ; 
      L     50; 
      ==I   ; 

      SPBN  x3; 
      S     "M_write_siro_db227"; 
      L     3; 
      T     #S_SKZ; 

// Start NC Lesen zum vgl oder Konvert
x3:   L     #S_SKZ; 
      L     3; 
      ==I   ; 
      SPBN  x49; 
      U     "M_write_siro_db227"; 
      SPB   x7; 

//      S     #Anf_Konvert_beladen
//      S     #Anf_NC_lesen_entladen      //nur lesen nicht entladen 


      U     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPBN  ddd; 
      S     "M_ANF_TNR_LESEN"; 
//      S     #Anf_NC_lesen_entladen      //nur lesen nicht entladen 
      S     "M_TDS_RUNS"; 
      L     49; //4
      T     #S_SKZ; 
      SPA   x7; 

ddd:  S     #Anf_Konvert_beladen; 
      L     4; //4
      T     #S_SKZ; 
      SPA   x7; 

// Start der Konvertierung vgl 
x49:  L     #S_SKZ; 
      L     49; 
      ==I   ; 
      SPBN  x51; 
      U     "M_DONE_TNR_LESEN"; 
      SPBN  x7; 
      R     "M_ANF_TNR_LESEN"; 
      R     "M_DONE_TNR_LESEN"; 
      S     "M_NC_lesen_beladen"; 
      S     #Anf_NC_lesen_entladen; //nur lesen nicht entladen 

      L     51; //4
      T     #S_SKZ; 
      SPA   x7; 


// Start der Konvertierung vgl 
x51:  L     #S_SKZ; 
      L     51; 
      ==I   ; 
      SPBN  x53; 

      U     #Done_NC_lesen_entladen; 
      SPBN  x7; 
      R     #Done_NC_lesen_entladen; 
      R     #Anf_NC_lesen_entladen; 
      R     "M_NC_lesen_beladen"; 
      S     #Anf_Konvert_vergleichen; 

      L     53; //4
      T     #S_SKZ; 
      SPA   x7; 

// Start der Konvertierung vgl 
x53:  L     #S_SKZ; 
      L     53; 
      ==I   ; 
      SPBN  x54; 

      U     #Done_Konvert_vergleichen; 
      SET   ; 
      SPBN  x7; 
      R     #Done_Konvert_vergleichen; 
      R     #Anf_Konvert_vergleichen; 
      L     54; //4
      T     #S_SKZ; 
      SPA   x7; 

// Werkzeug und Duplonummer gleich ??
// Warten auf Taste T_IN und T_OUT gleichzeitig für Überschreiben
// oder   Abbruch
x54:  L     #S_SKZ; 
      L     54; 
      ==I   ; 
      SPBN  x4; 

      U     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ist gleich
      S     "M_Error_Beladen"; 
      SPB   x7; 

      S     #Anf_Konvert_beladen; 
      L     4; 
      T     #S_SKZ; 
      R     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ist gleich


// Warten auf Konvertierung beendet
x4:   L     #S_SKZ; 
      L     4; 
      ==I   ; 
      SPBN  x5; 
      U     #Done_Konvert_beladen; 
      SPBN  x5; 
      R     #Anf_Konvert_beladen; 
      R     #Done_Konvert_beladen; 
      L     5; 
      T     #S_SKZ; 
      SPA   x7; 

// Start Nc schreiben und beladen
x5:   L     #S_SKZ; 
      L     5; 
      ==I   ; 
      SPBN  x6; 

      S     #Anf_NC_schreiben_beladen; 
      L     6; 
      T     #S_SKZ; 

// Warten auf NC geschrieben 
x6:   L     #S_SKZ; 
      L     6; 
      ==I   ; 
      SPBN  x190; 
      U     #Done_NC_schreiben_belade; 
      SPBN  x7; 
      R     #Anf_NC_schreiben_beladen; 
      R     #Done_NC_schreiben_belade; 

      U     DB227.DBX   79.2; // WZ Gesperrt im Status Word 
      UN    "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      UN    "DB_PLC_MD_DB20".UDHex._30_Bit5_TDS_Bel_ohne_sp; 
      U     "DB_CONFIG".ANWAHL_DURCH_USER_DATA.WZW_HORIZONTALE_KETTE; 
      SPBN  y01; 

      L     190; 
      T     #S_SKZ; 
      S     "M_WZ_Sperren_REQUEST"; 
      SPA   x7; 

x190: L     #S_SKZ; 
      L     190; 
      ==I   ; 
      SPBN  x55; 
      U     "M_WZ_Sperren_DONE"; 
      SPBN  x7; 
      R     "M_WZ_Sperren_REQUEST"; 
      R     "M_WZ_Sperren_DONE"; 


y01:  U     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPBN  ddd2; 
      L     55; 
      T     #S_SKZ; 
      SPA   x7; 
ddd2: L     0; 
      T     #S_SKZ; 
      SPA   x7; 


// Qittung Beladen 
x55:  L     #S_SKZ; 
      L     55; 
      ==I   ; 
      SPBN  x7; 
      S     "DB_FEHLERMELDUNG".Meldung._702026_Quit_Beladen; 

      U     #E_T_IN; 
      SPBN  x7; 

      S     "M_WZV_Beladen_ende"; 
      R     "M_TDS_RUNS"; 
      L     0; 
      T     #S_SKZ; 

x7:   NOP   0; 

NETWORK
TITLE =Entladen mit TDS
//
//
//
//Start Magazin Position lesen bei Taste T_out
      U     DB224.DBX   10.3; //E_T_OUT
      U(    ; 
      L     #S_SKZ; 
      L     0; 
      ==I   ; 
      )     ; 
      SPBN  x10; 

      L     10; 
      T     #S_SKZ; 
      R     "DB_TDS".E_T_OUT; 
      R     #EA_Done_MagPos_lesen; 
      S     #A_Anf_MagPos_lesen; 
      S     #A_Mag_sperren; 

// Warten auf Magazinposition gelesen

x10:  L     #S_SKZ; 
      L     10; 
      ==I   ; 
      SPBN  x11; 
      U     #EA_Done_MagPos_lesen; 
      SPBN  x11; 
      L     #E_Platz_Nr; 
      T     DB224.DBW   96; 

      R     #EA_Done_MagPos_lesen; 
      L     11; 
      T     #S_SKZ; 

// Start NC-Daten lesen zum Entladen
x11:  L     #S_SKZ; 
      L     11; 
      ==I   ; 
      SPBN  x12; 
      L     32; // Simatic String max.Länge auf 32 schreiben
      T     DB227.DBB   32; // (ansonsten NC kann Sting nicht lesen)
      U     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      S     "M_TDS_RUNS"; 
      SET   ; 
      S     #Anf_NC_lesen_entladen; 
      L     12; 
      T     #S_SKZ; 

// Warten auf NC gelesen
x12:  L     #S_SKZ; 
      L     12; 
      <>I   ; 
      SPB   x13; 
      U     #Done_NC_lesen_entladen; 

      SPBN  x13; 
      R     #Anf_NC_lesen_entladen; 
      R     #Done_NC_lesen_entladen; 

      S     #Anf_TDS_lesen_beladen; 
      L     13; 
      T     #S_SKZ; 
      SPA   x23; 
      L     #S_SKZ; 
      L     24; 
      <>I   ; 
      SPB   x13; 
      S     "DB_FEHLERMELDUNG".Meldung._702105_Quit_Entladen; 

      U     #E_T_OUT; 
      SPBN  x13; 

      S     #Anf_TDS_lesen_beladen; 
      R     "DB_FEHLERMELDUNG".Meldung._702105_Quit_Entladen; 

      L     13; 
      T     #S_SKZ; 
      SPA   x23; 

//-- Warten TDS lesen zum vergleichen
x13:  L     #S_SKZ; 
      L     13; 
      ==I   ; 
      SPBN  x14; 
      U     #Done_TDS_lesen_beladen; 
      SPBN  x14; 
      R     #Anf_TDS_lesen_beladen; 
      R     #Done_TDS_lesen_beladen; 
      S     #Anf_Konvert_vergleichen; 

      L     14; 
      T     #S_SKZ; 
      SPA   x23; 

// Werkzeug und Duplonummer vergleichen
x14:  L     #S_SKZ; 
      L     14; 
      ==I   ; 
      SPBN  x15; 
      U     #Done_Konvert_vergleichen; 
      SPBN  x15; 
      R     #Done_Konvert_vergleichen; 
      R     #Anf_Konvert_vergleichen; 
      L     15; 
      T     #S_SKZ; 
      SPA   x23; 

// Werkzeug und Duplonummer gleich ??
// Warten auf Taste T_IN und T_OUT gleichzeitig für Überschreiben
// oder   Abbruch
x15:  L     #S_SKZ; 
      L     15; 
      ==I   ; 
      SPBN  x16; 

      U     "DB_KONFIG_DMTDC".Option.DM_Bit1; //Option Überschreiben möglich
      U     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ungleich
      U     #E_T_IN; // Taste T_Out
      U     #E_T_OUT; 
      O     ; 
      UN    "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ist gleich
      SPBN  x15a; 
      L     16; 
//      S     "M_Siro_db137"
      T     #S_SKZ; 
      R     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // Wz ist gleich
      SPA   x23; 
x15a: U     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; 
      U     "M_Ruecksetze_Fehler"; 
      SPBN  x16; 

// Start der Konvertierung
x16:  L     #S_SKZ; 
      L     16; 
      <>I   ; 
      O     #Anf_Konvert_entladen; 
      O     #Anf_Konvert_vergleichen; 
//      UN    "M_Siro_db137"
      SPB   x17; 
      S     #Anf_Konvert_entladen; 
      L     17; //16
      T     #S_SKZ; 
      SPA   x23; 
// Warten auf Konvertierung beendet
x17:  L     #S_SKZ; 
      L     17; 
      ==I   ; 
      SPBN  x18; 
      U     #Done_Konvert_entladen; 
      SPBN  x18; 
      R     #Done_Konvert_entladen; 
      R     #Anf_Konvert_entladen; 
      L     18; 
      T     #S_SKZ; 
      SPA   x23; 
//-- Start TDS schreiben
x18:  L     #S_SKZ; 
      L     18; 
      ==I   ; 
      SPBN  x19; 

      S     #Anf_TDS_schreib_entladen; 
      L     19; 
      T     #S_SKZ; 
      SPA   x23; 
// Warten auf TDS geschrieben
x19:  L     #S_SKZ; 
      L     19; 
      ==I   ; 
      SPBN  x20; 
      U     #Done_TDS_schrei_entladen; 
      SPBN  x20; 
      R     #Anf_TDS_schreib_entladen; 
      R     #Done_TDS_schrei_entladen; 
      L     20; 
      T     #S_SKZ; 

// Start Werkzeug aus NC löschen
x20:  L     #S_SKZ; 
      L     20; 
      ==I   ; 
      SPBN  x21; 
      S     "M_WZV_Entladen_ende"; 

      U     "DB_TDS".BE_ENTLADEN_TDS_AKT; //Entladen über NC
      SPBN  x20a; 
      L     21; 
      T     #S_SKZ; 
      SPA   x23; 
//      U     "M_TDS_WZ_NC_DELET"
//      SPBN  x23
x20a: S     #Anf_NC_loeschen; 
      L     21; 
      T     #S_SKZ; 

// Warten Werkzeug aus NC gelöscht
x21:  L     #S_SKZ; 
      L     21; 
      ==I   ; 
      SPBN  x23; 
      U     "DB_TDS".BE_ENTLADEN_TDS_AKT; //Entladen über NC
      SPB   x21a; 
      U     #Done_NC_loeschen; 
      SPBN  x23; 
x21a: R     #Done_NC_loeschen; 
      R     #Anf_NC_loeschen; 
      R     "M_TDS_WZ_NC_DELET"; 
      R     "M_TDS_RUNS"; 
      L     0; 
      T     #S_SKZ; 

// Warten auf Quittierung an der Beladestation

x23:  NOP   0; 
NETWORK
TITLE =Anwahl Schreib-Lesekopf und Variante LESEN
// TDS BALLUFF
      CLR   ; 
      =     "DB_TDS".B_out_HD; // Kopf 1 anwaehlen

      U     "M_TDS_BALLUFF_aktiv"; 
      SPB   NW07; // Balluff Codeträger lesen

// TDS BILZ

      U     "M_TDS_BILZ_aktiv"; 
      SPB   NW08; // Bilz Codeträger lesen

//   --> Anwahl Schreib-Lesekopf nicht nötig (default/Voreinstellung)

//      L     2#11
//      T     "DB_TDS".Kommandobyte_OUT   // Anwahl Tool (Schreib/Lese-Kopf) = 0x03

//      L     0
//      T     "DB_TDS".Anfangsadresse_OUT_Low    // Schreib/Lese-Kopf 1 anwaehlen = 0x00

NETWORK
TITLE = BALLUFF: Code-Träger lesen ( für Werkzeug beladen )

NW07: U     #Anf_TDS_lesen_beladen; // Befehl lesen Codeträger
      UN    #Done_TDS_lesen_beladen; // Code ist gelesen
      O     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      SPBN  ECLB; 

      U     "DB_TDS".B_in_AF; // Bit 3: AF-Bit: Fehler 
      ON    "DB_TDS".B_in_BB; // Bit 7: BB-Bit: betriebsbereit 
      ON    "DB_TDS".B_inCP; // Bit 0: CP-Bit: Codeträger im Schreib-/Lesebereich 
      SPB   FTDS; 

      L     "DB_TDS".Schritt; // Schrittzähler
      L     0; 
      <>I   ; 
      O     "DB_TDS".B_in_AA; // Bit 1: AA-Bit: Auftrag Anfang 
      SPB   EALB; 

// Ausgabetelegramm:  Bytes vom Codeträger lesen

      L     B#16#1; // Befehl: Codeträger lesen
      T     PAB  161; 
      L     W#16#0; // Anfangsadresse Low / High Byte
      T     PAW  162; 
      L     DB224.DBW   16; // #Chiplaengegedreht          // Anzahl Bytes 
      T     PAW  164; 
      S     "DB_TDS".B_out_AV; // AV-Bit: Auftrag Start
      L     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste
      T     PAB  160; // AV-Bit setzen
      SPA   ECLB; 

EALB: L     "DB_TDS".Schritt; // Schrittzähler
      L     0; 
      ==I   ; 
      SPB   LT0; // Datenübernahme Teil 1
      U     "M_tds_lesen_last_part"; // Letzter Teil der Datenübernahme wenn :1
      SPB   LT17; // Datenübernahme Teil 1
      SPA   LT1; // Datenübernahme Teil 2

// Datenübernahme Teil 1 ( 31 Datenbytes )

LT0:  UN    "DB_TDS".B_in_AE; // Bit 2: AE-Bit: Auftrag Ende 
      SPB   ECLB; 

// Datenübernahme Teil 1 ( 31 Datenbytes ), wenn AE-Bit 1
      L     31; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      L     0; 
      T     #Bytezaehler_lesen; 
      SPA   DUE; 

LT1:  U     "DB_TDS".B_in_TO; // Bit 5: TO-Bit: Toggle-Bit Out
      X     #Hilfsmerker_lesen; 
      SPBN  ECLB; 

      U     "DB_TDS".B_in_TO; // Bit 5: TO-Bit: Toggle-Bit Out
      =     #Hilfsmerker_lesen; 

      L     31; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes

      L     #Bytezaehler_lesen; 
      +I    ; 
      T     #Bytezaehler_lesen; 
      L     DB224.DBW   12; // #Chiplaenge
      L     #Bytezaehler_lesen; 
      -I    ; 
      L     31; 
      >I    ; 
      SPB   DUE; 
      TAK   ; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      S     "M_tds_lesen_last_part"; 

DUE:  LAR1  P#1.0; // Pointer 1.Datenbyte Ausgangspuffer
      L     "DB_TDS".Schritt; // Schrittzähler
      L     31; // maximale Anzahl Bytes pro Übertragung
      *I    ; 
      SLD   3; 
      L     P#0.0; 
      +D    ; 
      LAR2  ; // Pointer 1.Byte Datenpuffer
      AUF   "DB_TOOL_DATA _SPEICHER"; 

DUE1: L     PEB [AR1,P#160.0]; 
      AUF   "DB_TOOL_DATA _SPEICHER"; 
      T     DBB [AR2,P#0.0]; 
      L     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      SLW   3; // letztes Datenbyte Eingangspuffer
      TAR1  ; 
      <=D   ; 
      SPB   EDUE; 
      L     P#1.0; 
      +D    ; 
      LAR1  ; 
      TAR2  ; 
      L     P#1.0; 
      +D    ; 
      LAR2  ; 
      SPA   DUE1; 


EDUE: L     "DB_TDS".Schritt; // Schrittzähler
      INC   1; 
      T     "DB_TDS".Schritt; // Schrittzähler

      U     "M_tds_lesen_last_part"; 
      SPB   LOAV; // Loeschen AV-Bit kein Invertieren des TI-Bits

// TI-Bit invertieren

      UN    "DB_TDS".B_out_TI; // TI-Bit: Togglebit IN
      =     "DB_TDS".B_out_TI; // TI-Bit: Togglebit IN

      U     "DB_TDS".B_in_TO; // TI-Bit: Togglebit IN
      =     #Hilfsmerker_lesen; 

      L     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste
      T     PAB  160; 
      SPA   ECLB; 

LOAV: L     0; // gespeicherte Ausgabe-Bitleiste
      T     DB224.DBB  127; 
      T     PAB  160; 
      SPA   ECLB; 

// Warten auf Quittung der Datenträgerstation

LT17: U     "DB_TDS".B_in_AA; // Bit 1: AA-Bit: Auftrag Anfang 
      O     "DB_TDS".B_in_AE; // Bit 2: AE-Bit: Auftrag Ende 
      SPB   ECLB; 
      U     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      SPB   dd1; 
      S     #Done_TDS_lesen_beladen; 
dd1:  R     "M_tds_lesen_last_part"; 
      R     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      L     B#16#0; 
      T     "DB_TDS".Schritt; // Schrittzähler zurücksetzen
ECLB: NOP   0; 

      SPA   NW09; 
NETWORK
TITLE = BILZ: Code-Träger lesen ( für Werkzeug beladen )

NW08: U     #Anf_TDS_lesen_beladen; // Befehl lesen Codeträger
      UN    #Done_TDS_lesen_beladen; // Code ist gelesen
      O     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      SPBN  eclb; 

      U     "DB_TDS".Statusbyte_IN_KERR; // Bit 3: KERR-Bit: Fehler 
      ON    "DB_TDS".Statusbyte_IN_ON; // Bit 7: On-Bit: betriebsbereit 
      ON(   ; 
      L     "DB_TDS".Fehlernummer_IN; 
      L     0; 
      ==I   ; 
      )     ; 
      SPB   ftds; 

      L     "DB_TDS".Schritt; // Schrittzähler
      L     0; 
      <>I   ; 
      O     "DB_TDS".Statusbyte_IN_KST; // Bit 1: KST-Bit: Kommando Start
      SPB   ealb; 

// Ausgabetelegramm Maschine --> TDS :  Bytes vom Codeträger lesen 
      L     B#16#1; // Datenträger lesen = 0x01
      T     "DB_TDS".Kommandobyte_OUT; 
      T     PAB  160; 

      L     B#16#0; // Anfangsadresse Low = 0x00
      T     "DB_TDS".Anfangsadresse_OUT_Low; 
      T     PAB  163; 

      L     B#16#0; // Anfangsadresse High = 0x00
      T     "DB_TDS".Anfangsadresse_OUT_High; 
      T     PAB  162; 

      L     "DB_TDS".WZV_Byte[3]; 
      T     "DB_TDS".Datenlaenge_OUT_Low; // Chiplänge = Anzahl Bytes 
      T     PAB  165; 

      L     "DB_TDS".WZV_Byte[2]; 
      T     "DB_TDS".Datenlaenge_OUT_High; // Chiplänge = Anzahl Bytes 
      T     PAB  164; 

      S     "DB_TDS".Statusbyte_OUT_KE; // Kommando bereit

      L     DB224.DBB  270; // Statusbyte 
      T     PAB  161; 

      SPA   eclb; 

ealb: L     "DB_TDS".Schritt; // Schrittzähler
      L     0; 
      ==I   ; 
      SPB   lt0; // Datenübernahme Teil 1
      U     "M_tds_lesen_last_part"; // Letzter Teil der Datenübernahme wenn :1
      SPB   lt17; // Datenübernahme Teil 1
      SPA   lt1; // Datenübernahme Teil 2

// Datenübernahme Teil 1 ( 15 Datenbytes )

lt0:  UN    "DB_TDS".Statusbyte_IN_KRDY; // Bit 2: KRDY-Bit: Kommando Ready 
      SPB   eclb; 

// Datenübernahme Teil 1 ( 15 Datenbytes ), wenn AE-Bit 1
      L     15; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      L     0; 
      T     #Bytezaehler_lesen; 
      SPA   due; 

lt1:  U     "DB_TDS".Statusbyte_IN_DEHS; // Bit 5: TO-Bit: Toggle-Bit Out
      X     #Hilfsmerker_lesen; 
      SPBN  eclb; 

      U     "DB_TDS".Statusbyte_IN_DEHS; // Bit 5: TO-Bit: Toggle-Bit Out
      =     #Hilfsmerker_lesen; 

      L     15; 
      T     "DB_TDS".WZV_Byte[40]; // #Anzahl Wörter

      L     #Bytezaehler_lesen; 
      +I    ; 
      T     #Bytezaehler_lesen; 
      L     DB224.DBW   12; // #Chiplaenge
      L     #Bytezaehler_lesen; 
      -I    ; 
      L     15; 
      >I    ; 
      SPB   due; 

      TAK   ; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      S     "M_tds_lesen_last_part"; 

due:  LAR1  P#0.0; // Pointer 1.Datenbyte/wort Eingangsspuffer
      L     "DB_TDS".Schritt; // Schrittzähler
      L     15; // maximale Anzahl Wörter pro Übertragung
      *I    ; 
      SLD   3; 
      L     P#0.0; 
      +D    ; 
      LAR2  ; // Pointer 1.Byte Datenpuffer

      AUF   "DB_TOOL_DATA _SPEICHER"; 
      L     PEB [AR1,P#160.0]; // Übertragung des 1. Datenbytes
      T     DBB [AR2,P#0.0]; 

due1: AUF   "DB_TOOL_DATA _SPEICHER"; // Übertragung des 1. Datenwortes
      L     PEW [AR1,P#162.0]; 
      TAW   ; 
      T     DBW [AR2,P#1.0]; 

      L     "DB_TDS".WZV_Byte[40]; // #Anzahl Bytes
      L     3; 
      -I    ; 
      SLW   3; // letztes Datenbyte Eingangspuffer Konvertierung ins Pointerformat
      TAR1  ; 
      <=D   ; 
      SPB   edue; 

      L     P#2.0; // Pointer für PEB um 1 erhöhen
      +D    ; 
      LAR1  ; 

      TAR2  ; // Pointer für DB137 um 1 erhöhen
      L     P#2.0; 
      +D    ; 
      LAR2  ; 
      SPA   due1; 

edue: L     "DB_TDS".Schritt; // Schrittzähler
      INC   1; 
      T     "DB_TDS".Schritt; // Schrittzähler

      U     "M_tds_lesen_last_part"; 
      SPB   loav; // Loeschen AV-Bit kein Invertieren des TI-Bits

// TI-Bit invertieren

      UN    "DB_TDS".Statusbyte_OUT_DAHS; // TI-Bit: Togglebit IN
      =     "DB_TDS".Statusbyte_OUT_DAHS; // TI-Bit: Togglebit IN

      U     "DB_TDS".Statusbyte_IN_DEHS; // TI-Bit: Togglebit IN
      =     #Hilfsmerker_lesen; 

      L     DB224.DBB  270; // gespeicherte Ausgabe-Bitleiste
      T     PAB  161; 
      SPA   eclb; 

loav: L     0; // gespeicherte Ausgabe-Bitleiste
      T     DB224.DBB  270; 
      T     PAB  161; 
      SPA   eclb; 

// Warten auf Quittung der Datenträgerstation

lt17: U     "DB_TDS".Statusbyte_IN_KST; // Bit 1: AA-Bit: Auftrag Anfang 
      O     "DB_TDS".Statusbyte_IN_KRDY; // Bit 2: AE-Bit: Auftrag Ende 
      SPB   eclb; 
      U     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      SPB   dd1; 
      S     #Done_TDS_lesen_beladen; 
      R     "M_tds_lesen_last_part"; 
      R     "DB_VGL_DMTDC".Softkeys.Chiplesen; 
      L     B#16#0; 
      T     "DB_TDS".Schritt; // Schrittzähler zurücksetzen

eclb: NOP   0; 
NETWORK
TITLE =Werkzeugdaten in NC schreiben

NW09: U     #Anf_NC_schreiben_beladen; 
      UN    #Done_NC_schreiben_belade; 
      O     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 
      SPBN  ESCH; 

// Kommando-Code 0:
// Werkzeug anlegen, beladen und Werkzeugdaten schreiben

      U     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 
      SPBN  w12; 
      L     2; 
      SPA   q02; 

w12:  U     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPB   q01; 
      L     0; // anlegen,beladen,schreiben,
      SPA   q02; 
q01:  L     "MW_TNUMMER_WZLISTE"; 
      T     "DB_WZV_DV".WZV_TNummer; 
      L     3; 
q02:  T     DB224.DBW  128; // Kommando-Code

      L     1; // TOA-Bereich
      T     "DB_WZV_DV".TOA; 
      L     #MagazinNr; 
      T     "DB_WZV_DV".Magazin_Nummer; 

      U     "DB_PLC_MD_DB20".UDHex._15_BIT7_Konf_TDS_Belade; // Wenn 1 dann soll der Platz, der momentan an der Beladestelle steht, beladen werden 
      O     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPBN  a01; 
      L     DB224.DBW   96; 
      T     "DB_WZV_DV".Platz_Nummer; 
      SPA   a02; 
a01:  L     0; 
      T     "DB_WZV_DV".Platz_Nummer; 
a02:  L     9999; // Belademagazin
      T     "DB_WZV_DV".MagNrBeladestelle; 
      L     #Beladestelle; 
      T     "DB_WZV_DV".PlatzNrBeladestelle; 

//      U     "DB228".Option.DM_Bit2
// =     "DB227".Ueberwachung_aktiv  // Überwachung aktiv
//      L     0
      L     10; 
      T     "DB_WZV_DV".Anzahl_CC_T_Par; // Anzahl Zusatz-Werkzeugdaten

      L     10; 
      T     "DB_WZV_DV".Anzahl_CC_D_Par; // Anzahl Zusatz-Schneidendaten

      SET   ; 
      S     #Start_DatVert_schreiben; // Start Datenverteiler schreiben von TDS
      SPA   DATV; 
ESCH: NOP   0; 

NETWORK
TITLE =Werkzeugdaten von NC lesen und entladen

      U     #Anf_NC_lesen_entladen; 
      UN    #Done_NC_lesen_entladen; 
      O     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 
      SPBN  ELES; 

      U     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 
      SPBN  w04; 
      L     "DB_VGL_DMTDC".Softkeys.T_NUM; 
      T     "DB_WZV_DV".WZV_TNummer; 
      L     "DB_VGL_DMTDC".Softkeys.PLATZNUM; 
      T     "DB_WZV_DV".Platz_Nummer; 
      SPA   fila; 

// Kommando-Code 11
// Entladen von Magazinplatz ohne Werkzeug löschen
// wenn Anstoss über Taste an Beladestation erfolgt ist
w04:  U     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPB   fil; 
      L     11; // Kommando-Code
      SPA   ofil; 
// Kommando-Code 14                                                                 
// Werkzeugdaten lesen
// wenn Anstoss über MMC-Entladen an Beladestation erfolgt ist


fil:  U     "M_NC_lesen_beladen"; 
      SPBN  fila; 
      L     "MW_TNUMMER_WZLISTE"; //gelesene T-ummer aus der WZ-Liste
      T     "DB_WZV_DV".WZV_TNummer; 

fila: L     14; // Kommando-Code

// Kommando-Code 12
// Entladen von Magazinplatz und Werkzeug löschen
// wenn Anstoss über MMC-Entladen an Beladestation erfolgt ist

//      L     12
ofil: T     DB224.DBW  128; 


      L     1; // TOA-Bereich
      T     "DB_WZV_DV".TOA; 
      L     #MagazinNr; 
      T     "DB_WZV_DV".Magazin_Nummer; 
// Die Platznummer wird direkt nach Istwertlesen eingetragen
//      L     2
      L     DB224.DBW   96; 
      T     "DB_WZV_DV".Platz_Nummer; 
      L     9999; // Magazin-Nr Beladestation
      T     "DB_WZV_DV".MagNrBeladestelle; 
      L     #Beladestelle; 
      T     "DB_WZV_DV".PlatzNrBeladestelle; 

      L     10; 
      T     "DB_WZV_DV".Anzahl_CC_T_Par; // Anzahl Zusatz-Werkzeugdaten
      L     10; 
      T     "DB_WZV_DV".Anzahl_CC_D_Par; // Anzahl Zusatz-Schneidendaten

//      L     156
//      T     "DB_WZV_DV".WZV_TNummer


      S     #Start_DatVert_lesen; //M    180.1 Start Datenverteiler lesen von TDS
      SPA   DATV; 

ELES: NOP   0; 
NETWORK
TITLE =Anwahl Variante SCHREIBEN
// TDS BALLUFF
      U     "M_TDS_BALLUFF_aktiv"; 
      SPB   NW12; // Balluff Codeträger schreiben

// TDS BILZ

      U     "M_TDS_BILZ_aktiv"; 
      SPB   NW13; // Bilz Codeträger schreiben

NETWORK
TITLE =Balluff: Code-Träger beschreiben ( Werkzeug entladen )

NW12: U     #Anf_TDS_schreib_entladen; 
      UN    #Done_TDS_schrei_entladen; 
      O     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      SPBN  ECSE; 

      U     "DB_TDS".B_in_AF; // Bit 3: AF-Bit: Fehler 
      ON    "DB_TDS".B_in_BB; // Bit 7: BB-Bit: betriebsbereit 
      ON    "DB_TDS".B_inCP; // Bit 0: CP-Bit: Codeträger im Schreib-/Lesebereich 
      SPB   FTDS; 
      L     "DB_TDS".Schritt; // Schrittzähler
      L     0; // kein neuer Auftrag, wenn das AA-Bit gesetzt ist
      <>I   ; 
      O     "DB_TDS".B_in_AA; // Bit 1: AA-Bit: Auftrag Anfang 
      SPB   EASE; 
      L     B#16#2; // Befehl: Codeträger schreiben
      T     PAB  161; 
      L     W#16#0; // Anfangsadresse Low / High Byte
      T     PAW  162; 
      L     DB224.DBW   16; // #Chiplaengegedreht          // Anzahl Bytes 
      T     PAW  164; 
      S     "DB_TDS".B_out_AV; // AV-Bit: Auftrag Start
      L     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste
      T     PAB  160; // AV-Bit setzen
      L     1; 
      T     "DB_TDS".Schritt; // Schrittzähler
      SPA   ECSE; 

EASE: L     "DB_TDS".Schritt; // Schrittzähler
      L     1; 
      ==I   ; 
      SPB   LT20; // Datenübernahme Teil 1

//      L     "DM_DB_Balluf".Schritt      // Schrittzähler
//      L     110
//  ==I   
      U     "M_tds_write_last_part"; //Letzter Teil Datenübernahme;wenn:1
      SPB   LOA; // Datenübernahme Teil 1
      L     "DB_TDS".Schritt; // Schrittzähler
      L     111; 
      >=I   ; 
      SPB   LT18; 
      SPA   LT21; // Datenübernahme Teil 2

LT20: UN    "DB_TDS".B_in_TO; // Bit 5: TO-Bit: Toggle-Bit Out
      SPB   ECSE; 
      L     31; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      SPA   DAUS; 

LT21: U     "DB_TDS".B_in_TO; // Bit 5: TO-Bit: Toggle-Bit Out
      X     #Hilfsmerker_schreiben; 
      SPBN  ECSE; 

//      U     "DM_DB_Balluf".B_in_TO      // Bit 5: TO-Bit: Toggle-Bit Out
//      =     Hilfsmerker_schreiben

      L     31; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      L     #Bytezaehler_schreiben; 
      +I    ; 
      T     #Bytezaehler_schreiben; 
      L     DB224.DBW   12; // #Chiplaenge
      L     #Bytezaehler_schreiben; 
      -I    ; 
      L     31; 
      >I    ; 
      SPB   DAUS; 
      TAK   ; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      S     "M_tds_write_last_part"; 

//      L     109                         // Rest schreiben
//      T     "DM_DB_Balluf".Schritt
//      L     #Bytezaehler_schreiben
///      L     DB224.DBW   12              //#Chiplaenge
//      <I    
//      SPB   DAUS
//      L     125                         // AV-Bit Invertieren
//      T     "DM_DB_Balluf".Schritt
//      SPA   LOA

DAUS: LAR1  P#1.0; // Pointer 1.Datenbyte Ausgangspuffer
      L     "DB_TDS".Schritt; // Schrittzähler
      L     1; 
      -I    ; 
      L     31; // maximale Anzahl Bytes pro Übertragung
      *I    ; 
      SLD   3; 
      L     P#0.0; 
      +D    ; 
      LAR2  ; // Pointer 1.Byte Datenpuffer

      AUF   "DB_TOOL_DATA _SPEICHER"; 


DAU1: AUF   "DB_TOOL_DATA _SPEICHER"; 
      L     DBB [AR2,P#0.0]; 
      T     PAB [AR1,P#160.0]; 

      L     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      SLW   3; // letztes Datenbyte Ausgangspuffer
      TAR1  ; 
      <=D   ; 
      SPB   EAUS; 

      L     P#1.0; 
      +D    ; 
      LAR1  ; 

      TAR2  ; 
      L     P#1.0; 
      +D    ; 
      LAR2  ; 
      SPA   DAU1; 

EAUS: L     "DB_TDS".Schritt; // Schrittzähler
      INC   1; 
      T     "DB_TDS".Schritt; // Schrittzähler



      UN    "DB_TDS".B_out_TI; // TI-Bit: Togglebit IN
      =     "DB_TDS".B_out_TI; // TI-Bit: Togglebit IN
      U     "DB_TDS".B_out_TI; // TI-Bit: Togglebit IN
      =     #Hilfsmerker_schreiben; 

      L     DB224.DBB  127; // gespeicherte Ausgabe-Bitleiste
      T     PAB  160; 

      U     "M_tds_write_last_part"; 
      SPB   LOA; 
      SPA   ECSE; 

LOA:  U     "DB_TDS".B_in_AE; // Alle Daten auf Chip geschrieben
      SPBN  ECSE; 

      R     "M_tds_write_last_part"; 
      L     0; // gespeicherte Ausgabe-Bitleiste
      T     DB224.DBB  127; // AV Bit ruecksetzen
      T     PAB  160; 
      T     #Bytezaehler_schreiben; 
      L     120; 
      T     "DB_TDS".Schritt; 
      SPA   ECSE; 

// Warten auf Quittung der Datenträgerstation

LT18: U     "DB_TDS".B_in_AA; // Bit 1: AA-Bit: Auftrag Anfang 
      O     "DB_TDS".B_in_AE; // Bit 2: AE-Bit: Auftrag Ende 
      SPB   ECSE; 
      U     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      SPB   dd2; 
      S     #Done_TDS_schrei_entladen; 
dd2:  R     #Anf_TDS_schreib_entladen; 
      R     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 

      L     B#16#0; 
      T     "DB_TDS".Schritt; // Schrittzähler zurücksetzen
ECSE: NOP   0; 

      SPA   NW14; 
NETWORK
TITLE =BILZ: Code-Träger beschreiben ( Werkzeug entladen )

NW13: U     #Anf_TDS_schreib_entladen; 
      O     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      UN    #Done_TDS_schrei_entladen; 
      SPBN  ecse; 

      U     "DB_TDS".Statusbyte_IN_KERR; // Bit 3: AF-Bit: Fehler 
      ON    "DB_TDS".Statusbyte_IN_ON; // Bit 7: BB-Bit: betriebsbereit 
      SPB   ftds; 

      L     "DB_TDS".Schritt; // Schrittzähler
      L     0; // kein neuer Auftrag, wenn das AA-Bit gesetzt ist
      <>I   ; 
      O     "DB_TDS".Statusbyte_IN_KST; // Bit 1: AA-Bit: Auftrag Anfang 
      SPB   ease; 

// Ausgabetelegramm Maschine --> TDS :  Bytes auf Codeträger schreiben 
      L     B#16#2; // Datenträger beschreiben = 0x02
      T     "DB_TDS".Kommandobyte_OUT; 
      T     PAB  160; 

      L     B#16#0; // Anfangsadresse Low = 0x00
      T     "DB_TDS".Anfangsadresse_OUT_Low; 
      T     PAB  163; 

      L     B#16#0; // Anfangsadresse High = 0x00
      T     "DB_TDS".Anfangsadresse_OUT_High; 
      T     PAB  162; 

      L     "DB_TDS".WZV_Byte[3]; 
      T     "DB_TDS".Datenlaenge_OUT_Low; // Chiplänge = Anzahl Bytes 
      T     PAB  165; 

      L     "DB_TDS".WZV_Byte[2]; 
      T     "DB_TDS".Datenlaenge_OUT_High; // Chiplänge = Anzahl Bytes 
      T     PAB  164; 

      S     "DB_TDS".Statusbyte_OUT_KE; // Kommando bereit

      L     DB224.DBB  270; // Statusbyte 
      T     PAB  161; 

      L     1; 
      T     "DB_TDS".Schritt; // Schrittzähler
      SPA   ecse; 

ease: L     "DB_TDS".Schritt; // Schrittzähler
      L     1; 
      ==I   ; 
      SPB   lt20; // Datenübernahme Teil 1

      U     "M_tds_write_last_part"; //Letzter Teil Datenübernahme;wenn:1
      SPB   loa; // Datenübernahme Teil 1

      L     "DB_TDS".Schritt; // Schrittzähler
      L     111; 
      >=I   ; 
      SPB   lt18; 
      SPA   lt21; // Datenübernahme Teil 2

lt20: UN    "DB_TDS".Statusbyte_IN_DEHS; // Bit 5: TO-Bit: Toggle-Bit Out
      SPB   ecse; 

      L     15; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      SPA   daus; 

lt21: U     "DB_TDS".Statusbyte_IN_DEHS; // Bit 5: TO-Bit: Toggle-Bit Out
      X     #Hilfsmerker_schreiben; 
      SPBN  ecse; 

      L     15; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      L     #Bytezaehler_schreiben; 
      +I    ; 
      T     #Bytezaehler_schreiben; 
      L     DB224.DBW   12; // #Chiplaenge
      L     #Bytezaehler_schreiben; 
      -I    ; 
      L     15; 
      >I    ; 
      SPB   daus; 

      TAK   ; 
      T     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      S     "M_tds_write_last_part"; 

daus: LAR1  P#0.0; // Pointer 1.Datenbyte Ausgangspuffer
      L     "DB_TDS".Schritt; // Schrittzähler
      L     1; 
      -I    ; 
      L     15; // maximale Anzahl Bytes pro Übertragung
      *I    ; 
      SLD   3; 
      L     P#0.0; 
      +D    ; 
      LAR2  ; // Pointer 1.Byte Datenpuffer

      AUF   "DB_TOOL_DATA _SPEICHER"; 
      L     DBB [AR2,P#0.0]; 
      T     PAB [AR1,P#160.0]; 

dau1: AUF   "DB_TOOL_DATA _SPEICHER"; 
      L     DBW [AR2,P#1.0]; 
      TAW   ; 
      T     PAW [AR1,P#162.0]; 

      L     "DB_TDS".WZV_Byte[40]; // #AnzahlBytes
      L     3; 
      -I    ; 
      SLW   3; // letztes Datenbyte Ausgangspuffer
      TAR1  ; 
      <=D   ; 
      SPB   eaus; 

      L     P#2.0; // Pointer für PAB um 1 erhöhen
      +D    ; 
      LAR1  ; 

      TAR2  ; // Pointer für DB137 um 1 erhöhen
      L     P#2.0; 
      +D    ; 
      LAR2  ; 
      SPA   dau1; 

eaus: L     "DB_TDS".Schritt; // Schrittzähler
      INC   1; 
      T     "DB_TDS".Schritt; // Schrittzähler

      UN    "DB_TDS".Statusbyte_OUT_DAHS; // TI-Bit: Togglebit IN
      =     "DB_TDS".Statusbyte_OUT_DAHS; // TI-Bit: Togglebit IN
      U     "DB_TDS".Statusbyte_OUT_DAHS; // TI-Bit: Togglebit IN
      =     #Hilfsmerker_schreiben; 

      L     DB224.DBB  270; // gespeicherte Ausgabe-Bitleiste
      T     PAB  161; 

      U     "M_tds_write_last_part"; 
      SPB   loa; 
      SPA   ecse; 

loa:  U     "DB_TDS".Statusbyte_IN_KRDY; // Alle Daten auf Chip geschrieben
      SPBN  ecse; 

      R     "M_tds_write_last_part"; 
      L     0; // gespeicherte Ausgabe-Bitleiste
      T     DB224.DBB  270; // AV Bit ruecksetzen
      T     PAB  161; 
      T     #Bytezaehler_schreiben; 
      L     120; 
      T     "DB_TDS".Schritt; 
      SPA   ecse; 

// Warten auf Quittung der Datenträgerstation

lt18: U     "DB_TDS".Statusbyte_IN_KST; // Bit 1: AA-Bit: Auftrag Anfang 
      O     "DB_TDS".Statusbyte_IN_KRDY; // Bit 2: AE-Bit: Auftrag Ende 
      SPB   ecse; 
      U     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 
      SPB   dd21; 
      S     #Done_TDS_schrei_entladen; 
dd21: R     #Anf_TDS_schreib_entladen; 
      R     "DB_VGL_DMTDC".Softkeys.Chipschreiben; 

      L     B#16#0; 
      T     "DB_TDS".Schritt; // Schrittzähler zurücksetzen
ecse: NOP   0; 

NETWORK
TITLE = Netwerk 14: Werkzeugdaten löschen
// Kommando-Code 15: Werkzeug löschen
NW14: U     #Anf_NC_loeschen; 
      UN    #Done_NC_loeschen; 
      SPBN  DATV; 
      L     15; 
      T     DB224.DBW  128; // Kommando-Code
      S     #Start_DatVert_loeschen; // M 180.2 Start Datenverteiler loeschen beim Entladen
      SPA   DATV; 
NETWORK
TITLE = Netwerk 15: Fehlerauswertung
// Tatsächliche Länge Werkzeugbezeichner nicht 1-18
      S     "DB_FEHLERMELDUNG".Meldung._702148_TDS_Wz_Name; // FM, Länge Werkzeugbezeichner nicht i.O.
      SPA   DATV; 

// Scheidenanzahl nicht 1-2

      S     "DB_FEHLERMELDUNG".Meldung._702149_TDS_Anz_Schneide; // FM, Scheidenanzahl nicht i.O.
      SPA   DATV; 

// Werkzeugbezeichner und Duplonummer nicht gleich

      S     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; // FM, Falsches Werkzeug am Entladeplatz
      S     #Done_TDS_lesen_entladen; 
      SPA   DATV; 

// Fehler BALLUFF
FTDS: UN    "DB_TDS".B_in_AF; // Bit 3: AF-Bit: Fehler 
      O     "M_TDS_BILZ_aktiv"; 
      SPB   ftds; 

      S     "DB_FEHLERMELDUNG".Meldung._702151_TDS_Uebertrag; // FM, Übertragungsfehler TDS <-> Datenträger

      L     PEB  161; // Fehlerkennung
      T     "DB_TDS".B_in_ErrorCode; 

//Fehler BILZ
ftds: UN    "DB_TDS".Statusbyte_IN_KERR; // Bit 3: AF-Bit: Fehler 
      O     "M_TDS_BALLUFF_aktiv"; 
      SPB   BTB; 

      L     PEB  163; // Fehlerkennung
      T     "DB_TDS".Fehlernummer_IN; 

      L     "DB_TDS".Fehlernummer_IN; 
      L     B#16#13; // Angegebene Länge konnte nicht gelesen werden
      ==I   ; 
      O(    ; 
      L     "DB_TDS".Fehlernummer_IN; 
      L     B#16#14; // Angegebene Länge konnte nicht geschrieben werden
      ==I   ; 
      )     ; 
      O(    ; 
      L     "DB_TDS".Fehlernummer_IN; // LESEN: Zeitüberschreitung für das toggeln DAHS-Bit
      L     B#16#68; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     "DB_TDS".Fehlernummer_IN; // SCHREIBEN: Zeitüberschreitung für das toggeln DAHS-Bit
      L     B#16#69; 
      ==I   ; 
      )     ; 
      S     "DB_FEHLERMELDUNG".Meldung._702151_TDS_Uebertrag; // FM, Übertragungsfehler TDS <-> Datenträger

      L     "DB_TDS".Fehlernummer_IN; 
      L     B#16#2E; 
      ==I   ; 
      S     "DB_FEHLERMELDUNG".Meldung._702153_TDS_Lesebereich; // FM, Wzg-Datenträger nicht im Lesebereich

BTB:  U     "M_TDS_BALLUFF_aktiv"; 
      UN    "DB_TDS".B_in_BB; // Bit 7: BB-Bit: betriebsbereit 
      S     "DB_FEHLERMELDUNG".Meldung._702152_TDS_Betriebsber; // FM, TDS-Station nicht betriebsbereit

      U     "M_TDS_BALLUFF_aktiv"; 
      UN    "DB_TDS".B_inCP; // Bit 0: CP-Bit: Codeträger im Schreib-/Lesebereich 
      S     "DB_FEHLERMELDUNG".Meldung._702153_TDS_Lesebereich; // FM, Wzg-Datenträger nicht im Lesebereich

      U     "M_TDS_BILZ_aktiv"; 
      UN    "DB_TDS".Statusbyte_IN_ON; // Bit 7: BB-Bit: betriebsbereit 
      S     "DB_FEHLERMELDUNG".Meldung._702152_TDS_Betriebsber; // FM, TDS-Station nicht betriebsbereit

NETWORK
TITLE = Netwerk 16: Aufruf Datenverteiler

DATV: O     #Start_DatVert_schreiben; // M 180.0 Start Datenverteiler schreiben von TDS
      O     #Start_DatVert_lesen; //M    180.1 Start Datenverteiler lesen von TDS
      O     #Start_DatVert_loeschen; // M 180.2 Start Datenverteiler loeschen beim Entladen
      O     #Start_DatVert_loes_Err; // M 180.3 Start Datenverteiler loeschen bei Fehler Wzg beladen



      FP    #Req_DatVert_FP; // PF Start Datenverteiler
      S     #Req_DatVert; // FB94 Request

      L     DB224.DBD  108; 
      L     0; 
      <>D   ; 
      SPBN  qqq; 
      L     DB224.DBD  108; 
      T     "MD_TDS_FC197"; // DB224.DBD  104
qqq:  NOP   0; 


      CALL "FB_WZV_Komm" , "DI_FB_WZV_Komm" (
           K_Code                   := DB224.DBW  128,// Kommandocode
           Req                      := #Req_DatVert,
           Error                    := #Err_DatVert,// FB94 Error
           Done                     := #Done_DatVert,// FB94 Done
           State                    := DB224.DBD  108,
           Active                   := #Activ_DatVert);// FB94 Activ

      UN    #Req_DatVert; // FB94 Request
      SPB   EDV; 
      UN    #Done_DatVert; // FB94 Done
      SPB   EAW; 
      R     #Req_DatVert; // FB94 Request


// Auswertung, wenn Datenverteilung durchgeführt wurde

      UN    #Start_DatVert_schreiben; // Start Datenverteiler schreiben von TDS
      ON    #Start_DatVert_loeschen; // Start Datenverteiler loeschen Beim Entladen
      SPB   ELSZ; 

      L     0; 
      T     "DB_TDS".Schritt; // Schrittzähler

ELSZ: U     #Start_DatVert_schreiben; // Start Datenverteiler schreiben von TDS
      R     #Start_DatVert_schreiben; // Start Datenverteiler schreiben von TDS
      S     #Done_NC_schreiben_belade; // Werkzeugdaten sind geschrieben

      U     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 
      R     #Done_NC_schreiben_belade; // Werkzeugdaten sind geschrieben
      R     "DB_VGL_DMTDC".Softkeys.WZ_anlegen; 

      U     #Start_DatVert_lesen; // Start Datenverteiler lesen von TDS
      R     #Start_DatVert_lesen; // Start Datenverteiler lesen von TDS
      S     #Done_NC_lesen_entladen; // Werkzeugdaten sind gelesen

      U     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 
      R     #Done_NC_lesen_entladen; // Werkzeugdaten sind gelesen
      R     "DB_VGL_DMTDC".Softkeys.WZ_auslesen; 

      U     #Start_DatVert_loeschen; // Start Datenverteiler loeschen beim Entladen
      R     #Start_DatVert_loeschen; // Start Datenverteiler loeschen beim Entladen
      S     #Done_NC_loeschen; // Werkzeugdaten sind gelöscht

      U     #Start_DatVert_loes_Err; // Start Datenverteiler loeschen bei Fehler Wzg beladen
      R     #Start_DatVert_loes_Err; // Start Datenverteiler loeschen bei Fehler Wzg beladen
      SPA   EDV; 

EAW:  UN    #Err_DatVert; // FB94 Error
      SPB   EDV; 

      R     #Start_DatVert_schreiben; // Start Datenverteiler schreiben von TDS
      R     #Start_DatVert_lesen; // Start Datenverteiler lesen von TDS
      R     #Start_DatVert_loeschen; // Start Datenverteiler loeschen beim Entladen
      R     #Start_DatVert_loes_Err; // Start Datenverteiler loeschen bei Fehler Wzg beladen
      R     #Req_DatVert; // FB94 Request

      L     "DI_FB_WZV_Komm".State; 
      T     "DB_TDS".Err_Code_FB94; // Fehlerstatus FB94 gespeichert

      L     W#16#40; 
      L     DB224.DBW  122; 
      ==I   ; 
      S     "DB_FEHLERMELDUNG".Meldung._702154_TDS_Platz_leer; // FM, Platz ist bereits leer
      SPB   EDV; 

      L     W#16#4000; 
      ==I   ; 
      S     "DB_FEHLERMELDUNG".Meldung._702155_TDS_BeladeFehl; // FM, Werkzeug ist bereits beladen
      SPB   EDV; 

      TAK   ; 
      L     W#16#30; 
      ==I   ; 
      S     "DB_FEHLERMELDUNG".Meldung._702156_TDS_PlatzFehl; // FM, Platz kann nicht beladen werden        
      SPB   PLF; 
      SPA   EDV; 

// Kommando-Code 15: Werkzeug löschen

PLF:  L     15; 
      T     DB224.DBW  128; // Kommando-Code
      S     #Start_DatVert_loes_Err; // Start Datenverteiler loeschen bei Fehler Wzg beladen
      SPA   EDV; 
EDV:  NOP   0; 

NETWORK
TITLE =Aufruf Konvertierung
// L     1
// T     DB224.DBW   18              //#ModeFB229
      U     #Anf_Konvert_beladen; 
      O     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 
      SPBN  el; 
      L     0; 
      T     DB224.DBW   18; //#ModeFB229
      SPA   xx; 
el:   U     #Anf_Konvert_entladen; 
      O     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 
      SPBN  vg; 
      L     1; 
      T     DB224.DBW   18; //#ModeFB229
      SPA   xx; 
vg:   U     #Anf_Konvert_vergleichen; 
      SPBN  xx; 
      L     3; 
      T     DB224.DBW   18; //#ModeFB229
      SPA   xx; 

xx:   NOP   0; 

//      U     #Anf_Konvert_beladen
//      O     "DB_VGL_DMTDC".Softkeys.Konv_beladen
//      UN    #Anf_Konvert_entladen
//      UN    #Anf_Konvert_vergleichen
//      O     
//      U     #Anf_Konvert_entladen
//      O     "DB_VGL_DMTDC".Softkeys.Konv_entladen
//      UN    #Anf_Konvert_beladen
//      UN    #Anf_Konvert_vergleichen
//      O     
//      U     #Anf_Konvert_vergleichen
//      UN    #Anf_Konvert_beladen
//      UN    #Anf_Konvert_entladen

//      =     DB224.DBX   20.1            //#Start_Konverter

//----
      U(    ; 
      U     #Anf_Konvert_beladen; 
      UN    #Anf_Konvert_entladen; 
      UN    #Anf_Konvert_vergleichen; 
      O     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 
      )     ; 
      O(    ; 
      U     #Anf_Konvert_entladen; 
      UN    #Anf_Konvert_beladen; 
      UN    #Anf_Konvert_vergleichen; 
      O     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 
      )     ; 
      O(    ; 
      U     #Anf_Konvert_vergleichen; 
      UN    #Anf_Konvert_beladen; 
      UN    #Anf_Konvert_entladen; 
      )     ; 
      =     DB224.DBX   20.1; //#Start_Konverter




//----
      CLR   ; 
      =     DB224.DBX   80.0; //Error
      L     0; 
      T     DB224.DBW   82; //State

      CALL "FB_TDC_DM" , "DI_TDC_DM" (
           Start                    := DB224.DBX   20.1,//#Start_Konverter
           Mode                     := DB224.DBW   18,//#ModeFB229
           Done                     := #Done_Konverter,
           Error                    := DB224.DBX   80.0,
           Vergleich                := "M_TDS_vgl",
           State                    := DB224.DBW   82);


      U     "M_TDS_vgl"; 
      U     #Anf_Konvert_vergleichen; 
      S     "DB_FEHLERMELDUNG".Meldung._702150_TDS_Vergleich; 

      U     #Done_Konverter; 
      U     #Anf_Konvert_beladen; 
      S     #Done_Konvert_beladen; 

      U     #Done_Konverter; 
      U     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 
      R     "DB_VGL_DMTDC".Softkeys.Konv_beladen; 

      U     #Done_Konverter; 
      U     #Anf_Konvert_entladen; 
      S     #Done_Konvert_entladen; 

      U     #Done_Konverter; 
      U     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 
      R     "DB_VGL_DMTDC".Softkeys.Konv_entladen; 

      U     #Done_Konverter; 
      U     #Anf_Konvert_vergleichen; 
      S     #Done_Konvert_vergleichen; 

//Fehlermeldungen Konverter

      L     DB224.DBW   82; //State Konverter
      L     1001; 
      ==I   ; 
      SPBN  wei1; 
      S     "DB_FEHLERMELDUNG".Meldung._702147_TDS_KONV_ERROR1; 
      L     0; 
      T     #S_SKZ; 

wei1: L     DB224.DBW   82; //State Konverter
      L     1002; 
      ==I   ; 
      SPBN  wei2; 
      S     "DB_FEHLERMELDUNG".Meldung4._702416_TDS_KONV_ERROR3; //Wz Radius zu Groß
      L     0; 
      T     #S_SKZ; 


wei2: L     DB224.DBW   82; //State Konverter
      L     1003; 
      ==I   ; 
      SPBN  wei3; 
      S     "DB_FEHLERMELDUNG".Meldung4._702415_TDS_KONV_ERROR2; //WZ Länge zu lang
      L     0; 
      T     #S_SKZ; 


wei3: L     DB224.DBW   82; //State Konverter
      L     1004; 
      ==I   ; 
      SPBN  wei4; 
      S     "DB_FEHLERMELDUNG".Meldung4._702417_TDS_KONV_ERROR4; //Falscher WZ-TYP

      L     0; 
      T     #S_SKZ; 

wei4: L     DB224.DBW   82; //State Konverter
      L     1005; 
      ==I   ; 
      SPBN  wei5; 
      S     "DB_FEHLERMELDUNG".Meldung4._702418_TDS_KONV_ERROR5; //Auf dem Chip stehen keine Zulassigen Stringwerte
      L     0; 
      T     #S_SKZ; 


wei5: L     DB224.DBW   82; //State Konverter
      L     1006; 
      ==I   ; 
      SPBN  wei6; 
      S     "DB_FEHLERMELDUNG".Meldung4._702419_TDS_KONV_ERROR6; //Falsche Wz-Größe (Techspace hat WZ-Größentypen)
      L     0; 
      T     #S_SKZ; 


wei6: L     DB224.DBW   82; //State Konverter
      L     1007; 
      ==I   ; 
      SPBN  wei7; 
      S     "DB_FEHLERMELDUNG".Meldung4._702420_TDS_KONV_ERROR7; //Werkzeug war bereit im Eisatz darf nicht mehr beladen werden
      L     0; 
      T     #S_SKZ; 

wei7: L     DB224.DBW   82; //State Konverter
      L     1008; 
      ==I   ; 
      SPBN  wei8; 
      S     "DB_FEHLERMELDUNG".Meldung4._702438_TDS_KONV_ERROR8; // 702438 "MEL, Keine Werte (DB229/Wizzard)od. Pos_length/radiusDB228 eingetragen"
      L     0; 
      T     #S_SKZ; 

wei8: L     DB224.DBW   82; //State Konverter
      L     1009; 
      ==I   ; 
      SPBN  wei9; 
      S     "DB_FEHLERMELDUNG".Meldung4._702439_TDS_KONV_ERROR9; //702439 "MEL, _TDS_KONV_ERROR9"
      L     0; 
      T     #S_SKZ; 

wei9: L     DB224.DBW   82; //State Konverter
      L     1010; 
      ==I   ; 
      SPBN  weit; 
      S     "DB_FEHLERMELDUNG".Meldung4._702440_TDS_KONV_ERROR10; //702439 "MEL, _TDS_KONV_ERROR10"
      L     0; 
      T     #S_SKZ; 

weit: NOP   0; 

NETWORK
TITLE =Lesen der TNR des in der WZ-Liste angewählten WZ´s

      U     "DB_TDS".BE_ENTLADEN_TDS_AKT; 
      SPBN  w01; 

      U     "M_ANF_TNR_LESEN"; 
      FP    "M_FP_ANF_FB228"; 
      S     "M_Request_FB228"; 
      SPBN  s01; 
      L     0; 
      T     "MW_TNUMMER_WZLISTE"; 

s01:  CALL "FB_TM_Get_TNR" , "DI_TM_Get_TNR" (
           TNR_FB228                := "MW_TNUMMER_WZLISTE",
           Request_FB228            := "M_Request_FB228",
           Done_FB228               := "M_DONE_FB228");

      U     "M_DONE_FB228"; 
      R     "M_Request_FB228"; 
      R     "M_DONE_FB228"; 
      S     "M_DONE_TNR_LESEN"; 

w01:  NOP   0; 

NETWORK
TITLE =Das Beladende Wz sperren wenn im Status vorhanden 

      CALL "FB_TDC_WZ_Sperren" , "DI_TDC_WZ_Sperren" (
           E_MAG_Platz_Nr           := #E_Platz_Nr,//MW860
           E_WRITE                  := "M_WZ_Sperren_REQUEST",
           EA_Error_Write           := "M_WZ_Sperren_ERROR",
           EA_DONE_Write            := "M_WZ_Sperren_DONE");


END_FUNCTION

