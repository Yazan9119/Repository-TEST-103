FUNCTION "FC_GR_MAG" : VOID
TITLE =
//$Revision: 1.23 $
//$Date: 2008/08/05 13:25:41CEST $
//$Author: schmoelp $
//
//Geregeltes Magazin Ablauf
//
//Logbuch:
//
//V0.1 / 27.01.00 / SCH
//
//- Modul Erstellt
AUTHOR : SCH
FAMILY : DM_BASIS
NAME : 'FC278'
VERSION : 0.1


VAR_INPUT
  EX_Enable : BOOL ;	//Modul freigabe
  EX_Maschine_Ein : BOOL ;	//Maschine Ein
  EX_Mag_Tuer_Zu : BOOL ;	//Magazin Tuer Zu
  EX_Mag_Links_Drehen : BOOL ;	//Magazin links drehen (Taste)
  EX_Mag_Rechts_Drehen : BOOL ;	//Magazin Rechts drehen (Taste)
  EX_Ax_RefPunkt_gefunden : BOOL ;	//Achse: Referenzpunkt gefunden
  EX_Ax_InBewegung : BOOL ;	//Achse: In Bewegung
  EX_Ax_Fehler_Pos : BOOL ;	//Achse: Fehler bei Positionierung
  EX_Ax_Pos_lesen_ready : BOOL ;	//Achse: Achsposition Istwert gelesen
  EX_Ax_Pos_lesen_error : BOOL ;	//Achse: Achsposition Fehler Istwert lesen
  EX_MD_Anwahl_Magazin : INT ;	//Anwahl Magazin: 0=aus,1=getakted,2=geregelt,3=Omron,4=Rad,5=Zusatz,6=Mast-Slave
END_VAR
VAR_IN_OUT
  EAX_Mag_Start : BOOL ;	//Magazin Start bzw. Anforderung
  EAX_Mag_Laeuft : BOOL ;	//Magazin laeuft
  EAX_Mag_Fehler : BOOL ;	//Magazin Fehler
  EAX_Mag_Stop : BOOL ;	//Magazin anhalten
  EAX_Ax_Plus_FahrAnf : BOOL ;	//Achse: Fahranforderung Plus
  EAX_Ax_Minus_FahrAnf : BOOL ;	//Achse: Fahranforderung Minus
  EAX_Ax_Abbruch_FahrAnf : BOOL ;	//Achse: Abbruch FahrAnforderung
  EAX_Ax_Anforderung : BOOL ;	//Achse: Fahranforderung
  EAX_Ax_Rueckmeldung : BOOL ;	//Achse: Rückmeldung Positionierung
  EAX_Fehler_Mag_Pos : BOOL ;	//Fehler: Ungültige Magazinposition
  EAX_Kein_RefPunkt : BOOL ;	//Fehler: Kein Referenzpunkt 
  EAB_SKZ_Abl : BYTE ;	//Schrittkettenzaehler Ablauf
  EAW_MP_Ist : WORD ;	//Position Magazin (Platz)
  EAW_MP_Soll : WORD ;	//Position Angefordert
  EAR_Ax_SollPos : REAL ;	//Achse: Sollposition
  EAR_AX_IstPos : REAL ;	//Achse: Istposition
END_VAR
VAR_TEMP
  TR_IstPos : REAL ;	//Istposition
  TR_Grad_Teilung : REAL ;	//Grad Teilung
  tx_teilungsachse : BOOL ;	
  TR_Akt_Grad : REAL ;	
  TR_MP_Soll : REAL ;	//Magazinplatz Sollwert (Real)
  TR_MP_Soll_Teilung : REAL ;	//Magazinplatz Sollwert Teilungsnummer (Real)
  TR_Offset_Umkehrspiel : REAL ;	//Offset Umkehrspiel in Grad für Positionierachse (Real)
  TR_Soll_Positionierachse : REAL ;	//Sollposition in Grad für Positionierachse (Real)
  TX_RAD : BOOL ;	
  TX_RESET : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =Bausteinfreigabe
// 
      U     #EX_Enable; // Freigabe Modul
      SPBN  MEND; // Nein => zum Ende

NETWORK
TITLE =Teilungsachse
//31.08.06 Lokalvariable #tx_teilungsachse nicht notwendig bei Radmagazin   
      U     "m_null"; // radmagazin
      =     #tx_teilungsachse; 
NETWORK
TITLE =Radmagazin

      L     #EX_MD_Anwahl_Magazin; 
      L     4; 
      ==I   ; 
      =     #TX_RAD; 
NETWORK
TITLE =Fehler löschen
// 
      U     "M_Ruecksetze_Fehler"; 
      R     #EAX_Fehler_Mag_Pos; 
      R     #EAX_Kein_RefPunkt; 

NETWORK
TITLE =Fehler Achse nicht referiert
//Zum Einrichten der vertikalen Kette (MD34210 ist auf 1) ist nur ein fahren über 
//die Rettung WZW3 zulässig und nicht über diesen Baustein !
      U(    ; 
      O     #EX_Mag_Links_Drehen; 
      O     #EX_Mag_Rechts_Drehen; 
      )     ; 
      UN    #EX_Ax_RefPunkt_gefunden; 
      U     "DB_CONFIG".ANWAHL_DURCH_USER_DATA.WZW_VKETTE_MIT_TPU; 
      S     #EAX_Kein_RefPunkt; 
NETWORK
TITLE =Sprung ans Bausteinende bei #EAX_Kein_RefPunkt

      U     #EAX_Kein_RefPunkt; 
      SPB   MEND; 
NETWORK
TITLE =Schrittkette initialisieren bei aktiver Handfunktion

      U(    ; 
      O(    ; 
      L     #EAB_SKZ_Abl; 
      L     7; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     #EAB_SKZ_Abl; 
      L     8; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     #EAB_SKZ_Abl; 
      L     9; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     #EAB_SKZ_Abl; 
      L     11; 
      ==I   ; 
      )     ; 
      O(    ; 
      L     #EAB_SKZ_Abl; 
      L     12; 
      ==I   ; 
      )     ; 
      )     ; 
      U(    ; 
      U     #EX_Mag_Links_Drehen; 
      UN    "m_mag_handfunktion_-"; 
      O     ; 
      U     #EX_Mag_Rechts_Drehen; 
      UN    "m_mag_handfunktion_+"; 
      )     ; 
      U     "I_WM_Beladung_zu"; 
      =     L     31.0; 
      U     L     31.0; 
      SPBNB _001; 
      L     0; 
      T     #EAB_SKZ_Abl; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_001: U     BIE; 
      S     #EAX_Mag_Stop; 
      R     #EAX_Ax_Anforderung; 
      S     #EAX_Ax_Abbruch_FahrAnf; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      U     L     31.0; 
      SPBNB _002; 
      L     0; 
      T     "DB_ACHS7_WZM".MB_SKZ_Achse; 
_002: NOP   0; 
NETWORK
TITLE =Reset

      O     "M_Reset_WZW"; 
      O     ; 
      U     #TX_RAD; 
      U     "M_Reset_Taste"; 
      =     #TX_RESET; 
NETWORK
TITLE =Reset Schrittkette
// 
// 
      U     #EAX_Mag_Laeuft; 
      U     #TX_RESET; 
      SPBN  SK00; 

      L     0; 
      T     #EAB_SKZ_Abl; 
      SET   ; 
      R     #EAX_Ax_Anforderung; 
      R     #EAX_Ax_Rueckmeldung; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      R     "M_MAG_Umk_Korrektur_bei+"; 
      R     "M_MAG_Umk_Korrektur_bei-"; 
      R     "M_MAG_Umk_rueck_auf_plz"; 
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 
      R     "m_mag_handfunktion_-"; 
      R     "m_mag_handfunktion_+"; 
NETWORK
TITLE =Schritt 0: Warten auf Magazinstart bzw. Anforderung
// 
SK00: L     #EAB_SKZ_Abl; // Schritt 0 ?
      L     0; 
      ==I   ; 
      SPBN  SA01; // Nein => Schrtitt 1

// -----------------------------------------------------------------------------
// Löschen Istwert, wenn Achse extern bewegt wird

      U     #EAX_Mag_Laeuft; 
      SPBN  ERML; 

      L     0; 
      T     #EAW_MP_Ist; 

ERML: NOP   0; 

// -----------------------------------------------------------------------------

      U     #EAX_Mag_Start; 
      UN    #EAX_Mag_Fehler; 
      SPBN  MEND; 

      L     1; 
      T     #EAB_SKZ_Abl; 
      SET   ; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      R     "M_MAG_Umk_Korrektur_bei+"; 
      R     "M_MAG_Umk_Korrektur_bei-"; 
      R     "M_MAG_Umk_rueck_auf_plz"; 
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 
      R     "m_mag_handfunktion_-"; 
      R     "m_mag_handfunktion_+"; 
NETWORK
TITLE =Schritt 1: Sprungverteiler -> Schritt 2 / 3 / 7 / 0
//Sprung in Schritt 2: Handfunktion  Jog +/- 
//Sprung in Schritt 3: Magazin positionieren Ablaufschritt 1
//Sprung in Schritt 7: Handfunktion Magazin takten/fahren Ablaufschritt 1
//
SA01: L     #EAB_SKZ_Abl; // Schritt 1 ?
      L     1; 
      ==I   ; 
      SPBN  SA02; // Nein => Schrtitt 2

// -----------------------------------------------------------------------------

      L     0; 
      T     #EAW_MP_Ist; 

      SET   ; 
      R     "MX_Mag_Pos_Gueltig"; 

      U     #EX_Mag_Links_Drehen; 
      O     #EX_Mag_Rechts_Drehen; 
      UN    "M_WZW_Aktiv"; 
      U(    ; 
      UN    "DB_NC_PLC".WZW_T_Prepare_aktiv; 
      O     "TA_WZW_SUCHEN_U_POSITION"; 
      )     ; 
      SPBN  A012; 

      U     "M_Handbetrieb"; 
      UN    "DB_SIEM_BAG".E_REF; 
      U     "I_WM_Beladung_zu"; 
      SPBN  A013; 

// ---- Anwahl Schritt 2: Handfunktion  Jog +/- ----
      U     #EX_Mag_Rechts_Drehen; 
      S     #EAX_Ax_Plus_FahrAnf; 
      U     #EX_Mag_Links_Drehen; 
      S     #EAX_Ax_Minus_FahrAnf; 

      L     2; 
      T     #EAB_SKZ_Abl; 
      SPA   SA02; 

A013: U     #EX_Ax_RefPunkt_gefunden; 
      SPBN  A012; 

// --- Anwahl Schritt 7: Handfunktion Magazin takten Ablaufschritt 1 ---
      U     "I_WM_Beladung_zu"; 
      U     #EX_Mag_Links_Drehen; 
      S     "m_mag_handfunktion_-"; // Taste links speichern  
      U     "I_WM_Beladung_zu"; 
      U     #EX_Mag_Rechts_Drehen; 
      S     "m_mag_handfunktion_+"; // Taste rechts speichern

      L     7; 
      T     #EAB_SKZ_Abl; 
      SPA   SA07; 

A012: U     #EX_Ax_RefPunkt_gefunden; 
      SPB   A011; 

      SET   ; 
      S     #EAX_Kein_RefPunkt; 

      L     0; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

// --- Anwahl Schritt 3: Magazin positionieren Ablaufschritt 1 ---
A011: U     #EAX_Mag_Start; 
      UN    #EX_Mag_Rechts_Drehen; 
      UN    #EX_Mag_Links_Drehen; 
      SPB   strt; 
      L     0; 
      T     #EAB_SKZ_Abl; 
      SPB   MEND; 

strt: L     3; 
      T     #EAB_SKZ_Abl; 
      SPA   SA03; 


NETWORK
TITLE =Schritt 2: Magazin Jog +/-    -> Schritt 6
//Handfunktion  Jog Schritt 1
SA02: L     #EAB_SKZ_Abl; // Schritt 2 ?
      L     2; 
      ==I   ; 
      SPBN  SA03; // Nein => Schritt 4

// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------

      U     #EAX_Mag_Stop; 
      ON(   ; 
      O     #EX_Mag_Links_Drehen; 
      O     #EX_Mag_Rechts_Drehen; 
      )     ; 
      SPBN  MEND; 

      R     #EAX_Mag_Stop; 
      R     #EAX_Ax_Plus_FahrAnf; 
      R     #EAX_Ax_Minus_FahrAnf; 

      L     6; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

NETWORK
TITLE =Schritt 3: Achsposition lesen für Positionierachse -> Schritt 4
//Magazin positionieren Ablaufschritt 1
//
SA03: L     #EAB_SKZ_Abl; // Schritt 3 ?
      L     3; 
      ==I   ; 
      SPBN  SA04; // Nein => Ende

      U     "DB_PLC_MD_DB20".UDHex._24_Bit2_MAG_Umk_min; // Vorbesetzung Ausgleich Umkehrspiel ?
      UN    "DB_PLC_MD_DB20".UDHex._24_Bit1_MAG_Umk_plus; 
      O     ; 
      U     "DB_PLC_MD_DB20".UDHex._24_Bit1_MAG_Umk_plus; 
      UN    "DB_PLC_MD_DB20".UDHex._24_Bit2_MAG_Umk_min; 
      SPBN  my1; 

// ----- Bei Anwahl Ausgleich Umkehrspiel:  -----------------------------------
// ----- aktuelle Achsposition lesen zum ermitteln "kürzester Weg" ------------  
      SET   ; 
      =     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 

// -----------------------------------------------------------------------------
      U     #EX_Ax_Pos_lesen_ready; 
      O     #EX_Ax_Pos_lesen_error; 
      SPBN  MEND; 

my1:  SET   ; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      L     4; 
      T     #EAB_SKZ_Abl; 

NETWORK
TITLE =Schritt 4: Achstyp auswählen/Fahranforderung setzen -> Schritt 5
//Magazin positionieren Ablaufschritt 2
//
SA04: L     #EAB_SKZ_Abl; // Schritt 4 ?
      L     4; 
      ==I   ; 
      SPBN  SA05; // Nein => Schritt 5


      U     "DB_PLC_MD_DB20".UDHex._24_Bit2_MAG_Umk_min; // Vorbesetzung Ausgleich Umkehrspiel ? -->
      UN    "DB_PLC_MD_DB20".UDHex._24_Bit1_MAG_Umk_plus; 
      O     ; 
      U     "DB_PLC_MD_DB20".UDHex._24_Bit1_MAG_Umk_plus; 
      UN    "DB_PLC_MD_DB20".UDHex._24_Bit2_MAG_Umk_min; 
      SPBN  mx7; //                    --> Umschaltung auf Positionierachse

// ------ POSITIONIERSACHSE --------------------------------------------------
// ------ Position berechnen für Positionierachse ----------------------------
      L     3.600000e+002; // 360 Grad
      L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; // durch Anzahl der Plätze
      DTR   ; 
      /R    ; 
      T     #TR_Grad_Teilung; // Grad pro Platz Real

      L     0; 
      L     #EAW_MP_Soll; 
      ITD   ; 
      DTR   ; 
      T     #TR_MP_Soll; // Magazinplatz Sollwert Real

      L     #TR_MP_Soll; // Magazinplatz 1 entspricht 0 Grad
      L     1.000000e+000; 
      -R    ; 
      T     #TR_MP_Soll_Teilung; 

      L     #TR_Grad_Teilung; 
      L     #TR_MP_Soll_Teilung; 
      *R    ; 
      T     #TR_Soll_Positionierachse; // Sollposition in Grad für Positionierachse

// ------ Offset Umkehrspiel berechnen ---------------------------------------
      L     #TR_Grad_Teilung; 
      L     1.000000e+001; 
      /R    ; 
      T     #TR_Offset_Umkehrspiel; // 0,1 Platz   

// ------ kürzesten Weg ermitteln --------------------------------------------                                 
      L     #EAR_AX_IstPos; 
      L     #TR_Soll_Positionierachse; 
      -R    ; 
      T     "DB_ACHS7_WZM".TR_Ergebnis_1; 

      L     #TR_Soll_Positionierachse; 
      L     #EAR_AX_IstPos; 
      -R    ; 
      T     "DB_ACHS7_WZM".TR_Ergebnis_2; 

      U(    ; 
      L     "DB_ACHS7_WZM".TR_Ergebnis_1; 
      L     1.800000e+002; 
      >=R   ; 
      )     ; 
      O(    ; 
      L     "DB_ACHS7_WZM".TR_Ergebnis_1; 
      L     -1.800000e+002; 
      <R    ; 
      )     ; 
      SPBN  mx1; 

      U     DB161.DBX   26.7; // Vorzeichen Ergebnis 1 (1 entspricht negativem Vorzeichen)
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      S     "M_MAG_Umk_kuerzesterWeg-"; 

      UN    DB161.DBX   26.7; // Vorzeichen Ergebnis 1 (0 entspricht positivem Vorzeichen)
      S     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 
      SPA   mx2; 

mx1:  U     DB161.DBX   30.7; // Vorzeichen Ergebnis 2 (1 entspricht negativem Vorzeichen)
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      S     "M_MAG_Umk_kuerzesterWeg-"; 

      UN    DB161.DBX   30.7; // Vorzeichen Ergebnis 2 (0 entspricht positivem Vorzeichen)
      S     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 

// ----- Anwahl Korrektur von Umkehrspiel bei Plusfahrt   ---------------------
mx2:  U     "DB_PLC_MD_DB20".UDHex._24_Bit1_MAG_Umk_plus; // Vorbesetzung
      UN    "DB_PLC_MD_DB20".UDHex._24_Bit2_MAG_Umk_min; 
      U     "M_MAG_Umk_kuerzesterWeg+"; 
      UN    "M_MAG_Umk_rueck_auf_plz"; 
      S     "M_MAG_Umk_Korrektur_bei+"; 

// ----- Anwahl Korrektur von Umkehrspiel bei Minusfahrt  ---------------------
      U     "DB_PLC_MD_DB20".UDHex._24_Bit2_MAG_Umk_min; // Vorbesetzung
      UN    "DB_PLC_MD_DB20".UDHex._24_Bit1_MAG_Umk_plus; 
      U     "M_MAG_Umk_kuerzesterWeg-"; 
      UN    "M_MAG_Umk_rueck_auf_plz"; 
      S     "M_MAG_Umk_Korrektur_bei-"; 

// ------ Sollposition in Grad für Positionierungsachse -----------------------
      U     "M_MAG_Umk_Korrektur_bei+"; 
      SPBN  mx8; 
      L     #TR_Soll_Positionierachse; //Sollposition + Offset Umkehrspiel     
      L     #TR_Offset_Umkehrspiel; 
      +R    ; 
      T     #EAR_Ax_SollPos; 
      L     3.600000e+002; 
      >=R   ; 
      SPBN  mx9; 
      -R    ; 
      T     #EAR_Ax_SollPos; 
      SPA   mx9; 

mx8:  U     "M_MAG_Umk_Korrektur_bei-"; 
      SPBN  mx7; 
      L     #TR_Soll_Positionierachse; //Sollposition - Offset Umkehrspiel
      L     #TR_Offset_Umkehrspiel; 
      -R    ; 
      T     #EAR_Ax_SollPos; 
      L     0.000000e+000; 
      <R    ; 
      SPBN  mx9; 
      L     #EAR_Ax_SollPos; 
      L     3.600000e+002; 
      +R    ; 
      T     #EAR_Ax_SollPos; 
      SPA   mx9; 

// ------ TEILUNGSACHSE ------------------------------------------------------
// ------ Sollposition Magazinplatz für Teilungsachse ------------------------
mx7:  L     0; 
      L     #EAW_MP_Soll; 
      ITD   ; 
      DTR   ; 
      T     #EAR_Ax_SollPos; 

// ---------------------------------------------------------------------------
// ------ Fahranforderung setzen ---------------------------------------------
mx9:  SET   ; 
      S     #EAX_Ax_Anforderung; 
      R     #EAX_Ax_Rueckmeldung; 
      R     "MX_Mag_Pos_Gueltig"; 

// ---------------------------------------------------------------------------
      L     5; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

NETWORK
TITLE =Schritt 5: Magazinposition gueltig -> Schritt 6 bzw. 10
//Magazin positionieren Ablaufschritt 3
SA05: L     #EAB_SKZ_Abl; // Schritt 5 ?
      L     5; 
      ==I   ; 
      SPBN  SA06; // Nein => Schritt 6

//----- Reset Korrektur von Umkehrspiel wenn diese ausgeführt wurde -----------
      U     #EAX_Ax_Rueckmeldung; 
      UN    #EX_Ax_InBewegung; 
      FP    "M_MAG_Umk_reset_korr_fp"; 
      U     "M_MAG_Umk_rueck_auf_plz"; 
      R     "M_MAG_Umk_Korrektur_bei+"; 
      R     "M_MAG_Umk_Korrektur_bei-"; 
      R     "M_MAG_Umk_rueck_auf_plz"; 
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 

//----------------------------------------------------------------------------
      U     #EAX_Mag_Stop; // Sobald ein Stop kommt
      SPBN  A052; // Abbruch anfordern und
      S     #EAX_Ax_Abbruch_FahrAnf; // Warten bis die Achse Steht
      L     6; 
      T     #EAB_SKZ_Abl; 

      L     0; 
      T     #EAW_MP_Ist; 

      SET   ; 
      R     "M_MAG_Umk_Korrektur_bei+"; 
      R     "M_MAG_Umk_Korrektur_bei-"; 
      R     "M_MAG_Umk_rueck_auf_plz"; 
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 
      SPA   SA06; 

// ---------------------------------------------------------------------------
A052: U     #EAX_Ax_Rueckmeldung; 
      UN    #EX_Ax_InBewegung; 
      SPBN  MEND; 

      U     #EX_Ax_Fehler_Pos; 
      SPB   A051; 

      SET   ; 
      R     #EAX_Ax_Rueckmeldung; 
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 

//----------------------------------------------------------------------------
      UN    "M_MAG_Umk_Korrektur_bei+"; // Korrektur Umkehrspiel aktiv ?
      UN    "M_MAG_Umk_Korrektur_bei-"; 
      SPB   A053; 
      L     10; 
      T     #EAB_SKZ_Abl; // Dann Sprung nach Schritt 10
      SPA   SA10; 

//----------------------------------------------------------------------------
A053: S     "MX_Mag_Pos_Gueltig"; 

      L     #EAW_MP_Soll; 
      T     #EAW_MP_Ist; 
      L     6; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

A051: SET   ; 
      S     #EAX_Fehler_Mag_Pos; 
      S     #EAX_Mag_Fehler; 
      R     "M_MAG_Umk_Korrektur_bei+"; 
      R     "M_MAG_Umk_Korrektur_bei-"; 
      R     "M_MAG_Umk_rueck_auf_plz"; 
      R     "M_MAG_Umk_kuerzesterWeg+"; 
      R     "M_MAG_Umk_kuerzesterWeg-"; 
      SPA   MEND; 
NETWORK
TITLE =Schritt 10: Umkehrspiel ausgl. -> zurück auf Platz! ->Schritt 5
//Magazin positionieren Ablaufschritt 4
//[Nur aktiv beim Ausgleich vom Umkehrspiel]
SA10: L     #EAB_SKZ_Abl; // Schritt 10 ?
      L     10; 
      ==I   ; 
      SPBN  SA05; // Nein => Schritt 5

// ------ TEILUNGSACHSE ------------------------------------------------------
// ------ Sollposition Magazinplatz für Teilungsachse ------------------------
      L     0; 
      L     #EAW_MP_Soll; 
      ITD   ; 
      DTR   ; 
      T     #EAR_Ax_SollPos; 
      SET   ; 
      S     "M_MAG_Umk_rueck_auf_plz"; 

// ---------------------------------------------------------------------------
// ------------ Fahranforderung ----------------------------------------------
      SET   ; 
      S     #EAX_Ax_Anforderung; 
      R     #EAX_Ax_Rueckmeldung; 
      R     "MX_Mag_Pos_Gueltig"; 

// ---------------------------------------------------------------------------
      L     5; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

NETWORK
TITLE =Schritt 6: Bewegung beendet -> Schritt 0
//Magazin positionieren Ablaufschritt 5 [ENDE]
//Handfunktion Jog Schritt 2 [ENDE]
//Handfunktion Magazin takten Ablaufschritt 4 [ENDE]
//Handfunktion Magazin durchgehend Ablaufschritt 7 [ENDE]
SA06: L     #EAB_SKZ_Abl; // Schritt 6 ?
      L     6; 
      ==I   ; 
      SPBN  SA07; // Nein => Ende

// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------

      U     #EX_Ax_InBewegung; 
      SPB   MEND; 

      L     0; 
      T     #EAB_SKZ_Abl; 

      SET   ; 
      R     #EAX_Mag_Start; 
      R     #EAX_Mag_Stop; 
      R     #EAX_Ax_Abbruch_FahrAnf; 
      SPA   MEND; 

NETWORK
TITLE =Schritt 7: Achsposition lesen -> Schritt 8 bzw. 11
//Handfunktion Magazin takten Ablaufschritt 1
//Handfunktion Magazin durchgehend Ablaufschritt 1+4
SA07: L     #EAB_SKZ_Abl; // Schritt 7 ?
      L     7; 
      ==I   ; 
      SPBN  SA08; // Nein => SA08

// -----------------------------------------------------------------------------

      UN    #EX_Ax_InBewegung; //      SET   
      =     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 

// -----------------------------------------------------------------------------

      U     #EX_Ax_Pos_lesen_ready; 
      SPBN  MEND; 

      SET   ; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 

      U     "I_WM_Beladung_zu"; 
      U(    ; 
      U     #EX_Mag_Links_Drehen; 
      O     #EX_Mag_Rechts_Drehen; 
      )     ; 
      SPB   A701; 

// --- Bei offener Türe -> Magazin getaktet fahren ---
      L     8; 
      T     #EAB_SKZ_Abl; 
      SPA   SA08; 

// --- Bei geschlossener Türe -> Magazin durchgehend fahren ---
A701: L     11; 
      T     #EAB_SKZ_Abl; 
      SPA   SA11; 
NETWORK
TITLE =Schritt 8: Magazin takten +/- 1 Platz -> Schritt 9
//Handfunktion Magazin takten Ablaufschritt 2
//Handfunktion Magazin durchgehend Ablaufschritt 5
SA08: L     #EAB_SKZ_Abl; // Schritt 8 ?
      L     8; 
      ==I   ; 
      SPBN  SA09; // Nein => Schritt 9

// -----------------------------------------------------------------------------

      L     3.600000e+002; 
      L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; 
      DTR   ; 
      /R    ; 
      T     #TR_Grad_Teilung; 

      L     #EAR_AX_IstPos; //  DB161.DBD    4
      L     0; 
      >=R   ; 
      TAK   ; 
      SPB   xx1; 
      L     3.600000e+002; 
      +R    ; 
xx1:  L     1.000000e+001; 
      *R    ; 
      RND   ; 
      L     3600; 
      MOD   ; 
      DTR   ; 
      L     1.000000e+001; 
      /R    ; 

// Nachkommastellen

      L     #TR_Grad_Teilung; 
      +R    ; 
      T     #TR_IstPos; 
      T     #TR_Akt_Grad; 

      L     #TR_Grad_Teilung; 
      /R    ; 
      RND   ; 
      DTR   ; 
      T     #TR_IstPos; 

      U     "M_MAG_Rechts_Fahren"; 
      UN    "I_WM_Beladung_zu"; 
      O     ; 
      U     "m_mag_handfunktion_+"; 
      U     "I_WM_Beladung_zu"; 
      SPBN  A801; 

      U     #tx_teilungsachse; 
      SPBN  kta1; 

      L     #TR_Akt_Grad; 
      T     #EAR_Ax_SollPos; 

      SPA   tei1; 


kta1: L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; 
      DTR   ; 
      L     #TR_IstPos; 
      >R    ; 
      SPBN  A802; 
      L     #TR_IstPos; 
      RND   ; 
      DTR   ; 
      L     1.000000e+000; 
      +R    ; 
      T     #EAR_Ax_SollPos; // Platznummer
      SPA   A810; 

A802: L     1.000000e+000; 
      T     #EAR_Ax_SollPos; 
      SPA   A810; 


A801: U     #tx_teilungsachse; 
      SPBN  kta2; 


      L     #TR_Akt_Grad; 
      L     #TR_Grad_Teilung; 
      -R    ; 
      L     #TR_Grad_Teilung; 
      -R    ; 
      T     #EAR_Ax_SollPos; 


tei1: L     #EAR_Ax_SollPos; 
      L     3.600000e+002; 
      ==R   ; 
      SPBN  tei2; 

      L     0.000000e+000; 
      T     #EAR_Ax_SollPos; 

      SPA   A810; 

tei2: L     -8.000000e+000; 
      L     #EAR_Ax_SollPos; 
      ==R   ; 
      SPBN  A810; 

      L     3.520000e+002; 
      T     #EAR_Ax_SollPos; 
      SPA   A810; 

kta2: L     1.000000e+000; 
      L     #TR_IstPos; 
      <R    ; 
      SPBN  A803; 
      L     #TR_IstPos; 
      RND   ; 
      DTR   ; 
      L     1.000000e+000; 
      -R    ; 
      T     #EAR_Ax_SollPos; // Platznummer
      SPA   A810; 

A803: L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; 
      DTR   ; 
      T     #EAR_Ax_SollPos; 



A810: SET   ; 
      S     #EAX_Ax_Anforderung; 
      R     "m_mag_handfunktion_-"; 
      R     "m_mag_handfunktion_+"; 

// -----------------------------------------------------------------------------

      L     9; 
      T     #EAB_SKZ_Abl; 

NETWORK
TITLE =Schritt 9: Magazin getaktet +/- 1 Platz -> Schritt 6 bzw. 8
//Handfunktion Magazin takten Ablaufschritt 3
//Handfunktion Magazin durchgehend Ablaufschritt 6 
SA09: L     #EAB_SKZ_Abl; // Schritt 9 ?
      L     9; 
      ==I   ; 
      SPBN  SA11; // Nein => Schritt 11

// -----------------------------------------------------------------------------
      U     #EX_Mag_Links_Drehen; 
      O     #EX_Mag_Rechts_Drehen; 
      UN    "DB_ACHS7_WZM".MX_Ax_FahrAnf; 
      S     #EAX_Ax_Anforderung; 

// -----------------------------------------------------------------------------

      U(    ; 
      U     #EAX_Ax_Rueckmeldung; 
      O     "DB_FEHLERMELDUNG".Warnung._701860_Rueck_Pos_Umg; 
      )     ; 
      UN    #EX_Ax_InBewegung; 
      UN    "DB_ACHS7_WZM".MX_Ax_Positioniert; 
      O     "M_Reset_Taste"; 
      SPBN  MEND; 
      R     #EAX_Ax_Rueckmeldung; 

      U     #EX_Mag_Links_Drehen; 
      U     "M_MAG_Links_Fahren"; 
      O(    ; 
      U     #EX_Mag_Rechts_Drehen; 
      U     "M_MAG_Rechts_Fahren"; 
      )     ; 
      UN    #EAX_Mag_Stop; 
      SPB   A091; 

      SET   ; 
      R     #EAX_Mag_Stop; 
      R     #EAX_Ax_Plus_FahrAnf; 
      R     #EAX_Ax_Minus_FahrAnf; 
      L     6; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

A091: L     8; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 

NETWORK
TITLE =Schritt 11: Magazin durchgehend +/-  -> Schritt 12
//Handfunktion Magazin durchgehend Ablaufschritt 2 
//(Ziel ist der am weitesten entfernte Platz)
SA11: L     #EAB_SKZ_Abl; // Schritt 11 ?
      L     11; 
      ==I   ; 
      SPBN  SA12; // Nein => Schritt 12

// -----------------------------------------------------------------------------

      L     3.600000e+002; 
      L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; 
      DTR   ; 
      /R    ; 
      T     #TR_Grad_Teilung; 

      L     #EAR_AX_IstPos; //  DB161.DBD    4
      L     0; 
      >=R   ; 
      TAK   ; 
      SPB   yy1; 
      L     3.600000e+002; 
      +R    ; 

yy1:  L     1.000000e+001; 
      *R    ; 
      RND   ; 
      L     3600; 
      MOD   ; 
      DTR   ; 
      L     1.000000e+001; 
      /R    ; 

// Nachkommastellen

      L     #TR_Grad_Teilung; 
      +R    ; 
      T     #TR_IstPos; 
      T     #TR_Akt_Grad; 

      L     #TR_Grad_Teilung; 
      /R    ; 
      T     #TR_IstPos; 

      U     "m_mag_handfunktion_-"; 
      SPBN  Ax01; 

      U     #tx_teilungsachse; 
      SPBN  kta5; 

      L     #TR_Akt_Grad; 
      T     #EAR_Ax_SollPos; 

      SPA   tei5; 

//------------------------------------------------------------------
//--- Magazinkette ins Minus fahren -> Ziel entferntester Platz  ---
kta5: L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; 
      DTR   ; 
      L     #TR_IstPos; 
      >R    ; 
      SPBN  Ax02; 
      L     #TR_IstPos; 
      RND   ; 
      DTR   ; 
      L     1.000000e+000; 
      +R    ; 
      T     #EAR_Ax_SollPos; // Platznummer
      SPA   Ax10; 

Ax02: L     1.000000e+000; 
      T     #EAR_Ax_SollPos; 
      SPA   Ax10; 

//------------------------------------
//--- Teilungsachse ------------------
Ax01: U     #tx_teilungsachse; 
      SPBN  kta6; 


      L     #TR_Akt_Grad; 
      L     #TR_Grad_Teilung; 
      -R    ; 
      L     #TR_Grad_Teilung; 
      -R    ; 
      T     #EAR_Ax_SollPos; 


tei5: L     #EAR_Ax_SollPos; 
      L     3.600000e+002; 
      ==R   ; 
      SPBN  tei6; 

      L     0.000000e+000; 
      T     #EAR_Ax_SollPos; 

      SPA   Ax10; 

tei6: L     -8.000000e+000; 
      L     #EAR_Ax_SollPos; 
      ==R   ; 
      SPBN  Ax10; 

      L     3.520000e+002; 
      T     #EAR_Ax_SollPos; 
      SPA   Ax10; 

//-----------------------------------------------------------------
//--- Magazinkette ins Plus fahren -> Ziel entferntester Platz  ---
kta6: L     1.000000e+000; 
      L     #TR_IstPos; 
      <R    ; 
      SPBN  Ax03; 
      L     #TR_IstPos; 
      RND   ; 
      DTR   ; 
      L     1.000000e+000; 
      -R    ; 
      T     #EAR_Ax_SollPos; // Platznummer
      SPA   Ax10; 

Ax03: L     "DB_PLC_MD_DB20".UDInt._120_ANZAHL_MAG_PLAETZE; 
      DTR   ; 
      T     #EAR_Ax_SollPos; 


//-------------------------------------
//--- Fahranforderung setzen  --- -----
Ax10: SET   ; 
      S     #EAX_Ax_Anforderung; 

// -----------------------------------------------------------------------------

      L     12; 
      T     #EAB_SKZ_Abl; 
      SPA   MEND; 
NETWORK
TITLE =Schritt 12:Magazin fährt durchgehend -> Schritt 7
//Handfunktion Magazin durchgehend Ablaufschritt 3
SA12: L     #EAB_SKZ_Abl; // Schritt 12 ?
      L     12; 
      ==I   ; 
      SPBN  MEND; // Nein => ENDE

// -----------------------------------------------------------------------------
      U     #EX_Mag_Links_Drehen; 
      O     #EX_Mag_Rechts_Drehen; 
      UN    "DB_ACHS7_WZM".MX_Ax_FahrAnf; 
      S     #EAX_Ax_Anforderung; 

//----------------------------------------------------------------------------

      UN    #EX_Mag_Links_Drehen; 
      UN    #EX_Mag_Rechts_Drehen; 
      U     #EX_Ax_InBewegung; 
      O(    ; 
      U(    ; 
      U     #EAX_Ax_Rueckmeldung; 
      O     "DB_FEHLERMELDUNG".Warnung._701860_Rueck_Pos_Umg; 
      )     ; 
      UN    #EX_Ax_InBewegung; 
      UN    "DB_ACHS7_WZM".MX_Ax_Positioniert; 
      FP    "m_mag_positioniert_fp"; 
      O     "M_Reset_Taste"; 
      )     ; 
      SPBN  MEND; 

      SET   ; 
      S     #EAX_Mag_Stop; 
      R     #EAX_Ax_Anforderung; 
      S     #EAX_Ax_Abbruch_FahrAnf; 

      L     7; 
      T     #EAB_SKZ_Abl; 

NETWORK
TITLE =Bausteinende

MEND: U     #EAX_Mag_Fehler; 
      SPBN  ME01; 
      SET   ; 
      S     #EAX_Ax_Abbruch_FahrAnf; 
      R     #EAX_Mag_Fehler; 

      L     0; 
      T     #EAW_MP_Ist; 
      T     #EAB_SKZ_Abl; 

      SPA   ENDE; 

ME01: UN    #EX_Ax_InBewegung; // Sobald dann das Magazin steht
      R     #EAX_Ax_Abbruch_FahrAnf; // Abbruch löschen
      R     #EAX_Mag_Stop; 

      L     #EAB_SKZ_Abl; 
      L     0; // Bildung Magazin faehrt
      >I    ; 
      O     #EX_Ax_InBewegung; 
      =     #EAX_Mag_Laeuft; 

ENDE: NOP   0; 
END_FUNCTION

