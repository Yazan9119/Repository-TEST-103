FUNCTION "FC_UT_AXIS_READ" : VOID
TITLE =
//$Revision: 1.24 $
//$Date: 2008/05/28 14:11:07CEST $
//$Author: schmoelp $
//
AUTHOR : SJA
FAMILY : UT
VERSION : 0.1


VAR_TEMP
  Anzahl_Achsen : INT ;	
  Anzahl_1 : INT ;	
  TX_Anf_Lesen : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =Achse 7/8 (Magazinachsen) lesen
// Netzwerk-Übersicht
// ==================
// NW 1: Achse 7/8 (Magazinachsen) lesen
// NW 2: Achse 9 (Drehachse Palettenspeicher) lesen
// NW 3: Achse 10 (Transportachse Palettenspeicher) lesen
// NW 4: Achse 15 (Rüstplatz) lesen
// NW 5: Achse 16 (Hubachse Palettenspeicher) lesen
      U     "M_Axpos_read_error"; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 

      O     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      O     "DB_Achs8".MX_Ax_Position_Lesen; 
      =     #TX_Anf_Lesen; 

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX7_AX8" (
           Req                      := #TX_Anf_Lesen,// Lesen Istpositionen alle Achsen
           NumVar                   := 3,//3
           Addr1                    := "DB_NC_VAR".C1_SEMA_measPos17_5,//"NC_VAR".C1_SEMA_measPos18_5
           Addr2                    := "DB_NC_VAR".C1_SEMA_measPos18_5,
           Addr3                    := "DB_NC_VAR".C1_SEMA_measPos15_5,
           Error                    := "M_Axpos_read_error",
           NDR                      := "M_Axpos_lesen_ready",
           State                    := "MW_STATE_AXPOSLESEN",
           RD1                      := "DB_ACHS7_WZM".MR_IstPosition,
           RD2                      := "DB_Achs8".MR_IstPosition,
           RD3                      := "DB_Achs5".MR_IstPosition);

      U     "M_Axpos_lesen_ready"; // Istwert 1. Teil gelesen
      SPBN  EM1K; 

// Bei Modulo-Achsen können beim Istwertlesen Werte < 0 oder Werte > 360 gelesen werden.
// Deshalb wird hier nach dem Lesen noch eine Korrektur ausgeführt, falls erforderlich.

// Umrechnung auf Werte < 360

      L     "DB_ACHS7_WZM".MR_IstPosition; 
      L     1.000000e+003; 
      *R    ; 
      RND   ; // Umrechnung in Ganzzahl
      L     L#360000; 
      MOD   ; // Ermittlung des Restwertes
      DTR   ; 
      L     1.000000e+003; 
      /R    ; 
      T     "DB_ACHS7_WZM".MR_IstPosition; 

// Umwandlung bei Werten < 0

      L     0.000000e+000; 
      <R    ; 
      SPBN  EM1K; // Wert <0  => dann 360 addieren

      TAK   ; // gelesene Istposition
      L     3.600000e+002; 
      +R    ; 
      T     "DB_ACHS7_WZM".MR_IstPosition; 

EM1K: NOP   0; 


      U     "M_Axpos_lesen_ready"; // Istwert 1. Teil gelesen
      S     "DB_Achs8".MX_Ax_Pos_Lesen_Fertig; 
      R     "DB_Achs8".MX_Ax_Position_Lesen; 
      R     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 

// Lesen wiederholen bei Fehler
      U     "M_Axpos_read_error"; 
      UN    "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      S     "DB_ACHS7_WZM".MX_Ax_Position_Lesen; 
      R     "M_Axpos_read_error"; 
NETWORK
TITLE =Achse 9 (Drehachse Palettenspeicher) lesen
// Reset lesen bei Fehler
      U     "DB_SIEM_STARTUP".ActivAxis[9]; 
      SPBN  kdre; 

      U     "M_Error_Lesen_Ax9"; 
      R     "DB_Achs9_DrehSt".MX_Ax_Position_Lesen; 

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX9" (
           Req                      := "DB_Achs9_DrehSt".MX_Ax_Position_Lesen,
           NumVar                   := 1,
           Addr1                    := "DB_NC_VAR".C1_SEMA_measPos19_5,
           Error                    := "M_Error_Lesen_Ax9",
           NDR                      := "M_RDY_Lesen_Ax9",
           State                    := "MW_STATE_AXPOSLESEN",
           RD1                      := "DB_Achs9_DrehSt".MR_IstPosition);

// Lesen wiederholen bei Fehler
      U     "M_Error_Lesen_Ax9"; 
      UN    "DB_Achs9_DrehSt".MX_Ax_Position_Lesen; 
      S     "DB_Achs9_DrehSt".MX_Ax_Position_Lesen; 
      R     "M_Error_Lesen_Ax9"; 

// Lesen ok -> lesen Fertig setzen
      U     "M_RDY_Lesen_Ax9"; 
      R     "DB_Achs9_DrehSt".MX_Ax_Position_Lesen; 
      S     "DB_Achs9_DrehSt".M_Ax_Pos_Lesen_Fertig; 
      R     "M_RDY_Lesen_Ax9"; 

kdre: NOP   0; 
NETWORK
TITLE =Achse 10 (Transportachse Palettenspeicher) lesen
// Reset lesen bei Fehler
      U     "DB_SIEM_STARTUP".ActivAxis[10]; 
      SPBN  ktra; 

      U     "Error_FB_SIEM_GET"; 
      R     "DB_Achs10_Transport".MX_Ax_Position_Lesen; 

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX10" (
           Req                      := "DB_Achs10_Transport".MX_Ax_Position_Lesen,
           NumVar                   := 1,
           Addr1                    := "DB_NC_VAR".C1_SEMA_measPos110_5,
           Error                    := "Error_FB_SIEM_GET",
           NDR                      := "NDR_FB_SIEM_GET",
           State                    := "MW_STATE_AXPOSLESEN",
           RD1                      := "DB_Achs10_Transport".MR_IstPosition);

// Lesen wiederholen bei Fehler
      U     "Error_FB_SIEM_GET"; 
      UN    "DB_Achs10_Transport".MX_Ax_Position_Lesen; 
      S     "DB_Achs10_Transport".MX_Ax_Position_Lesen; 
      R     "Error_FB_SIEM_GET"; 

// Lesen ok -> lesen Fertig setzen
      U     "NDR_FB_SIEM_GET"; 
      R     "DB_Achs10_Transport".MX_Ax_Position_Lesen; 
      S     "DB_Achs10_Transport".M_Ax_Pos_Lesen_Fertig; 
      R     "NDR_FB_SIEM_GET"; 

ktra: NOP   0; 

NETWORK
TITLE =Achse 15 (Rüstplatz) lesen

      U     "DB_SIEM_STARTUP".ActivAxis[15]; 
      SPBN  krpl; 

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX15" (
           Req                      := "DB_ACHSE_RPL".MX_Ax_Position_Lesen,
           NumVar                   := 1,
           Addr1                    := "DB_NC_VAR".C1_SGA_actProgPos0_10,//"DB_NC_VAR".C1_SEMA_measPos10_5
           Line1                    := W#16#F,
           Error                    := "MX_Error_RD_IstPos15",
           NDR                      := "MX_NDR_RD_IstPos15",
           RD1                      := "DB_ACHSE_RPL".MR_IstPosition);

      U     "MX_Error_RD_IstPos15"; 
      O     "MX_NDR_RD_IstPos15"; 
      R     "DB_ACHSE_RPL".MX_Ax_Position_Lesen; 
      S     "DB_ACHSE_RPL".M_Ax_Pos_Lesen_Fertig; 

      U     "MX_Error_RD_IstPos15"; 
      O     "MX_NDR_RD_IstPos15"; 
      R     "MX_Error_RD_IstPos15"; 
      R     "NDR_FB_SIEM_GET"; 

krpl: NOP   0; 
NETWORK
TITLE =Achse 14 (Greiferachse Vertikalmagazin) lesen

      U     "DB_SIEM_STARTUP".ActivAxis[14]; 
      SPBN  kvgr; 

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX14" (
           Req                      := "DB_Achs11_VMAG_Greifer".MX_Ax_Position_Lesen,
           NumVar                   := 1,
           Addr1                    := "DB_NC_VAR".C1_SEMA_measPos114_5,
           Error                    := "MX_Error_RD_IstPos14",//"MX_Error_RD_IstPos15"
           NDR                      := "MX_NDR_RD_IstPos14",//"MX_NDR_RD_IstPos15"
           RD1                      := "DB_Achs11_VMAG_Greifer".MR_IstPosition);

      U     "MX_Error_RD_IstPos14"; //"MX_Error_RD_IstPos15"
      O     "MX_NDR_RD_IstPos14"; //"MX_NDR_RD_IstPos15"
      R     "DB_Achs11_VMAG_Greifer".MX_Ax_Position_Lesen; 
      S     "DB_Achs11_VMAG_Greifer".M_Ax_Pos_Lesen_Fertig; 

      U     "MX_Error_RD_IstPos14"; //"MX_Error_RD_IstPos15"
      O     "MX_NDR_RD_IstPos14"; //"MX_NDR_RD_IstPos15"
      R     "MX_Error_RD_IstPos14"; //"MX_Error_RD_IstPos15"

kvgr: NOP   0; 
NETWORK
TITLE =Achse 16 (Hubachse Palettenspeicher) lesen

      U     "DB_SIEM_STARTUP".ActivAxis[16]; 
      SPBN  khub; 

// *** Achsposition ermitteln für FC_ACHSE_HILF ***


// Reset lesen bei Fehler
      U     "M_Error_Lesen_Ax16"; 
      R     "DB_Achs16_Hub_PS".MX_Ax_Position_Lesen; 

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX16" (
           Req                      := "DB_Achs16_Hub_PS".MX_Ax_Position_Lesen,
           NumVar                   := 1,
           Addr1                    := "DB_NC_VAR".C1_SEMA_measPos116_5,
           Error                    := "M_Error_Lesen_Ax16",
           NDR                      := "M_RDY_Lesen_Ax16",
           State                    := "MW_STATE_AXPOSLESEN",
           RD1                      := "DB_Achs16_Hub_PS".MR_IstPosition);


// Lesen wiederholen bei Fehler
      U     "M_Error_Lesen_Ax16"; 
      UN    "DB_Achs16_Hub_PS".MX_Ax_Position_Lesen; 
      S     "DB_Achs16_Hub_PS".MX_Ax_Position_Lesen; 
      R     "M_Error_Lesen_Ax16"; 

// Lesen ok -> lesen Fertig setzen
      U     "M_RDY_Lesen_Ax16"; 
      R     "DB_Achs16_Hub_PS".MX_Ax_Position_Lesen; 
      S     "DB_Achs16_Hub_PS".M_Ax_Pos_Lesen_Fertig; 
      R     "M_RDY_Lesen_Ax16"; 


// *** Achsposition ermitteln für PLC-Softwarenocken ***

      CALL "FB_SIEM_GET" , "DI_SIEM_GET_AX16_SW_CAM" (
           Req                      := "M_ANF_Lesen_AX16_CAM",
           NumVar                   := 1,
           Addr1                    := "DB_NC_VAR".C1_SEMA_measPos116_5,
           Error                    := "M_Error_Lesen_Ax16_CAM",
           NDR                      := "M_RDY_Lesen_Ax16_CAM",
           State                    := "MW_STATE_AXPOSLESEN",
           RD1                      := "DB_Achs16_Hub_PS".MR_ISTPOSITION_SW_CAM);

// *** SW-Nocken gültig für RS10 ***
      U     "M_RDY_Lesen_Ax16_CAM"; 
      S     "M_AX16_SW_NOCKEN_OK"; 
      UN    "DB_ACHSE16".E_TCMinus; 
      UN    "DB_ACHSE16".E_TCPlus; 
      FP    "M_RESET_AX16_SWN_OK"; 
      R     "M_AX16_SW_NOCKEN_OK"; 
// *********************************

      U     "M_Error_Lesen_Ax16_CAM"; 
      O     "M_RDY_Lesen_Ax16_CAM"; 
      R     "M_ANF_Lesen_AX16_CAM"; 

      UN    "M_ANF_Lesen_AX16_CAM"; 
      UN    "M_RDY_Lesen_Ax16_CAM"; 
      UN    "M_Error_Lesen_Ax16_CAM"; 
      S     "M_ANF_Lesen_AX16_CAM"; 

      U     "M_Error_Lesen_Ax16_CAM"; 
      O     "M_RDY_Lesen_Ax16_CAM"; 
      R     "M_RDY_Lesen_Ax16_CAM"; 

      O     "M_RDY_Lesen_Ax16_CAM"; 
      O     ; 
      U     "M_Ruecksetze_Fehler"; 
      U     "M_Error_Lesen_Ax16_CAM"; 
      R     "M_Error_Lesen_Ax16_CAM"; 

khub: NOP   0; 
END_FUNCTION

