FUNCTION_BLOCK "FB_TM_WZBRUCH_R"
TITLE =
//$Revision: 1.7 $
//$Date: 2008/08/28 17:51:58CEST $
//$Author: schmoelp $

//
//Wz-Bruch-Kennung lesen
//
//erstellt 27.06.01 AB
VERSION : 0.1


VAR_INPUT
  E_TNR_READ : INT ;	
  E_READ : BOOL ;	
END_VAR
VAR_IN_OUT
  EA_WZBRUCH : BOOL ;	
  EA_Error_Read : BOOL ;	
  EA_DONE_Read : BOOL ;	
END_VAR
VAR
  Req_Get_Read : BOOL ;	
  NDR_GET_Read : BOOL ;	
  Error_Get_Read : BOOL ;	
  S_READ : BOOL ;	
  TC_DP25 : DWORD ;	
  TC_TPC1 : REAL ;	
  TC_DPC5 : REAL ;	
  T1_TO_edgeData25_1 : STRUCT 	//SM Optionsbits $TC_DPC25
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD  := W#16#1;	
   zeile : WORD  := W#16#19;	
   bausteintyp : BYTE  := B#16#14;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#F;	
   laenge : BYTE  := B#16#8;	
  END_STRUCT ;	
  T1_TU_data1_1 : STRUCT 	//$TC_TCP1 Anwender Schneidendaten
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD  := W#16#1;	
   zeile : WORD  := W#16#1;	
   bausteintyp : BYTE  := B#16#24;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#F;	
   laenge : BYTE  := B#16#8;	
  END_STRUCT ;	
  T1_TUE_edgedata0_0 : STRUCT 	
   SYNTAX_ID : BYTE  := B#16#82;	
   bereich_u_einheit : BYTE  := B#16#81;	
   spalte : WORD ;	
   zeile : WORD ;	
   bausteintyp : BYTE  := B#16#25;	
   ZEILENANZAHL : BYTE  := B#16#1;	
   typ : BYTE  := B#16#F;	
   laenge : BYTE  := B#16#8;	
  END_STRUCT ;	
  GET_FB2 : "FB_SIEM_GET";	
END_VAR
VAR_TEMP
  locline1 : WORD ;	
  locspalte : WORD ;	
  WZLine_WZ : WORD ;	
END_VAR
BEGIN
NETWORK
TITLE =

      L     "DB_PLC_MD_DB20".UDInt._010_ANWAHL_WERZEUGBRUCH; 
      L     0; 
      >I    ; 
      O(    ; 
      L     "DB_PLC_MD_DB20".UDInt._010_ANWAHL_WERZEUGBRUCH; 
      L     2; 
      <=I   ; 
      )     ; 
      SPB   STRT; 
      CLR   ; 
      =     #EA_DONE_Read; 
      =     #EA_Error_Read; 
      =     #EA_WZBRUCH; 
      BE    ; 

STRT: NOP   0; 

NETWORK
TITLE =Kenung Wz-Bruch lesen 
//Bei T-Befehl wird die Kennung WZ-Bruch aus 2 verschiedenen Variablen gelesen
//
//1. $TC_DPC25 Shopmill Kennungen  Bit 4
//2. $TC_TCP1  Anwender Werkzeugdaten  0:AUS, 1:EIN
//
//
//Bedeutung $TC_DPC25
//
//BIT 8 und BIT 9 nicht gesetzt, Spindel  stop
//BIT 8 gesetzt, Spindel rechts
//BIT 9 gesetzt, Spindel links
//
//M-Funktionen:
//Bit 0    - Meßwerkzeug - Drehzahl sperren
//Bit 1    - Werkzeugbruch-Überwachung aktivieren
//Bit 2    - 
//Bit 3    - Inneres Kühlmittel zugelassen
//
//
//Kuehlmittel:
//BIT 10 gesetzt, Kühlmittel 1
//BIT 11 gesetzt, Kühlmittel  
//
//
//
      U     #E_READ; 
      FP    #S_READ; 
      R     #EA_DONE_Read; 
      R     #EA_Error_Read; 
      S     #Req_Get_Read; 
      SPBN  xx1; 

      L     #E_TNR_READ; // T-Nummer
      T     #T1_TO_edgeData25_1.spalte; // $TC_DPC25
      T     #T1_TU_data1_1.zeile; // $TC_TPC1
      T     #T1_TUE_edgedata0_0.spalte; // $TC_DPC5

      L     25; 
      T     #T1_TO_edgeData25_1.zeile; // $TC_DPC25 (1.Schneide)
      L     1; 
      T     #T1_TU_data1_1.spalte; // $TC_TPC1
      L     5; 
      T     #T1_TUE_edgedata0_0.zeile; // $TC_DPC5 (Länge WZ_Bruchkontrolle)






xx1:  CALL #GET_FB2 (// ---- Kenung WZ-Bruchkennung lesen --------------------------------
           Req                      := #Req_Get_Read,
           NumVar                   := 3,
           Addr1                    := #T1_TO_edgeData25_1,
           Addr2                    := #T1_TU_data1_1,
           Addr3                    := #T1_TUE_edgedata0_0,
           Error                    := #Error_Get_Read,
           NDR                      := #NDR_GET_Read,
           RD1                      := #TC_DP25,
           RD2                      := #TC_TPC1,
           RD3                      := #TC_DPC5);

      U     #Error_Get_Read; 
      S     #EA_Error_Read; 

      O     #NDR_GET_Read; // Lesen beendet 
      O     #Error_Get_Read; // Lesen beendet mit Fehler
      R     #Req_Get_Read; // Anstoß lesen löschen
      S     #EA_DONE_Read; 

      UN    #NDR_GET_Read; 
      SPB   cc1; 
      O(    ; 
      L     #TC_DP25; 
      L     2; // Bit 1 abfragen
      UW    ; 
      L     0; 
      >I    ; 
      )     ; 
      O(    ; 
      L     #TC_TPC1; 
      RND   ; 
      L     0; 
      >I    ; 
      )     ; 
      =     #EA_WZBRUCH; 

cc1:  NOP   0; 


END_FUNCTION_BLOCK

